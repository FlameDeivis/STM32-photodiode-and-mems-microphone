
Semestro darbas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c38c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c0  0800c450  0800c450  0001c450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d710  0800d710  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800d710  0800d710  0001d710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d718  0800d718  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d718  0800d718  0001d718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d71c  0800d71c  0001d71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800d720  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007cc  20000200  0800d920  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009cc  0800d920  000209cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   000127a2  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a48  00000000  00000000  00032a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00035458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d6c  00000000  00000000  00036580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000173f6  00000000  00000000  000372ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015747  00000000  00000000  0004e6e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c58b  00000000  00000000  00063e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000545c  00000000  00000000  000f03b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000f5810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000200 	.word	0x20000200
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c434 	.word	0x0800c434

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000204 	.word	0x20000204
 8000104:	0800c434 	.word	0x0800c434

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fd87 	bl	8001f50 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fcd7 	bl	8001e00 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fd79 	bl	8001f50 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fd6f 	bl	8001f50 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fcff 	bl	8001e84 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fcf5 	bl	8001e84 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fc73 	bl	8000d9c <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fbff 	bl	8000cc4 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc65 	bl	8000d9c <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc5b 	bl	8000d9c <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc0b 	bl	8000d10 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc01 	bl	8000d10 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f834 	bl	80005b8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__udivmoddi4>:
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	4657      	mov	r7, sl
 80005bc:	464e      	mov	r6, r9
 80005be:	4645      	mov	r5, r8
 80005c0:	46de      	mov	lr, fp
 80005c2:	b5e0      	push	{r5, r6, r7, lr}
 80005c4:	0004      	movs	r4, r0
 80005c6:	000d      	movs	r5, r1
 80005c8:	4692      	mov	sl, r2
 80005ca:	4699      	mov	r9, r3
 80005cc:	b083      	sub	sp, #12
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d830      	bhi.n	8000634 <__udivmoddi4+0x7c>
 80005d2:	d02d      	beq.n	8000630 <__udivmoddi4+0x78>
 80005d4:	4649      	mov	r1, r9
 80005d6:	4650      	mov	r0, sl
 80005d8:	f002 fcf8 	bl	8002fcc <__clzdi2>
 80005dc:	0029      	movs	r1, r5
 80005de:	0006      	movs	r6, r0
 80005e0:	0020      	movs	r0, r4
 80005e2:	f002 fcf3 	bl	8002fcc <__clzdi2>
 80005e6:	1a33      	subs	r3, r6, r0
 80005e8:	4698      	mov	r8, r3
 80005ea:	3b20      	subs	r3, #32
 80005ec:	d434      	bmi.n	8000658 <__udivmoddi4+0xa0>
 80005ee:	469b      	mov	fp, r3
 80005f0:	4653      	mov	r3, sl
 80005f2:	465a      	mov	r2, fp
 80005f4:	4093      	lsls	r3, r2
 80005f6:	4642      	mov	r2, r8
 80005f8:	001f      	movs	r7, r3
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	001e      	movs	r6, r3
 8000600:	42af      	cmp	r7, r5
 8000602:	d83b      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000604:	42af      	cmp	r7, r5
 8000606:	d100      	bne.n	800060a <__udivmoddi4+0x52>
 8000608:	e079      	b.n	80006fe <__udivmoddi4+0x146>
 800060a:	465b      	mov	r3, fp
 800060c:	1ba4      	subs	r4, r4, r6
 800060e:	41bd      	sbcs	r5, r7
 8000610:	2b00      	cmp	r3, #0
 8000612:	da00      	bge.n	8000616 <__udivmoddi4+0x5e>
 8000614:	e076      	b.n	8000704 <__udivmoddi4+0x14c>
 8000616:	2200      	movs	r2, #0
 8000618:	2300      	movs	r3, #0
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	465a      	mov	r2, fp
 8000622:	4093      	lsls	r3, r2
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2301      	movs	r3, #1
 8000628:	4642      	mov	r2, r8
 800062a:	4093      	lsls	r3, r2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	e029      	b.n	8000684 <__udivmoddi4+0xcc>
 8000630:	4282      	cmp	r2, r0
 8000632:	d9cf      	bls.n	80005d4 <__udivmoddi4+0x1c>
 8000634:	2200      	movs	r2, #0
 8000636:	2300      	movs	r3, #0
 8000638:	9200      	str	r2, [sp, #0]
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <__udivmoddi4+0x8e>
 8000642:	601c      	str	r4, [r3, #0]
 8000644:	605d      	str	r5, [r3, #4]
 8000646:	9800      	ldr	r0, [sp, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	b003      	add	sp, #12
 800064c:	bcf0      	pop	{r4, r5, r6, r7}
 800064e:	46bb      	mov	fp, r7
 8000650:	46b2      	mov	sl, r6
 8000652:	46a9      	mov	r9, r5
 8000654:	46a0      	mov	r8, r4
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	4642      	mov	r2, r8
 800065a:	469b      	mov	fp, r3
 800065c:	2320      	movs	r3, #32
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	4652      	mov	r2, sl
 8000662:	40da      	lsrs	r2, r3
 8000664:	4641      	mov	r1, r8
 8000666:	0013      	movs	r3, r2
 8000668:	464a      	mov	r2, r9
 800066a:	408a      	lsls	r2, r1
 800066c:	0017      	movs	r7, r2
 800066e:	4642      	mov	r2, r8
 8000670:	431f      	orrs	r7, r3
 8000672:	4653      	mov	r3, sl
 8000674:	4093      	lsls	r3, r2
 8000676:	001e      	movs	r6, r3
 8000678:	42af      	cmp	r7, r5
 800067a:	d9c3      	bls.n	8000604 <__udivmoddi4+0x4c>
 800067c:	2200      	movs	r2, #0
 800067e:	2300      	movs	r3, #0
 8000680:	9200      	str	r2, [sp, #0]
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	4643      	mov	r3, r8
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0d8      	beq.n	800063c <__udivmoddi4+0x84>
 800068a:	07fb      	lsls	r3, r7, #31
 800068c:	0872      	lsrs	r2, r6, #1
 800068e:	431a      	orrs	r2, r3
 8000690:	4646      	mov	r6, r8
 8000692:	087b      	lsrs	r3, r7, #1
 8000694:	e00e      	b.n	80006b4 <__udivmoddi4+0xfc>
 8000696:	42ab      	cmp	r3, r5
 8000698:	d101      	bne.n	800069e <__udivmoddi4+0xe6>
 800069a:	42a2      	cmp	r2, r4
 800069c:	d80c      	bhi.n	80006b8 <__udivmoddi4+0x100>
 800069e:	1aa4      	subs	r4, r4, r2
 80006a0:	419d      	sbcs	r5, r3
 80006a2:	2001      	movs	r0, #1
 80006a4:	1924      	adds	r4, r4, r4
 80006a6:	416d      	adcs	r5, r5
 80006a8:	2100      	movs	r1, #0
 80006aa:	3e01      	subs	r6, #1
 80006ac:	1824      	adds	r4, r4, r0
 80006ae:	414d      	adcs	r5, r1
 80006b0:	2e00      	cmp	r6, #0
 80006b2:	d006      	beq.n	80006c2 <__udivmoddi4+0x10a>
 80006b4:	42ab      	cmp	r3, r5
 80006b6:	d9ee      	bls.n	8000696 <__udivmoddi4+0xde>
 80006b8:	3e01      	subs	r6, #1
 80006ba:	1924      	adds	r4, r4, r4
 80006bc:	416d      	adcs	r5, r5
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d1f8      	bne.n	80006b4 <__udivmoddi4+0xfc>
 80006c2:	9800      	ldr	r0, [sp, #0]
 80006c4:	9901      	ldr	r1, [sp, #4]
 80006c6:	465b      	mov	r3, fp
 80006c8:	1900      	adds	r0, r0, r4
 80006ca:	4169      	adcs	r1, r5
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	db24      	blt.n	800071a <__udivmoddi4+0x162>
 80006d0:	002b      	movs	r3, r5
 80006d2:	465a      	mov	r2, fp
 80006d4:	4644      	mov	r4, r8
 80006d6:	40d3      	lsrs	r3, r2
 80006d8:	002a      	movs	r2, r5
 80006da:	40e2      	lsrs	r2, r4
 80006dc:	001c      	movs	r4, r3
 80006de:	465b      	mov	r3, fp
 80006e0:	0015      	movs	r5, r2
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	db2a      	blt.n	800073c <__udivmoddi4+0x184>
 80006e6:	0026      	movs	r6, r4
 80006e8:	409e      	lsls	r6, r3
 80006ea:	0033      	movs	r3, r6
 80006ec:	0026      	movs	r6, r4
 80006ee:	4647      	mov	r7, r8
 80006f0:	40be      	lsls	r6, r7
 80006f2:	0032      	movs	r2, r6
 80006f4:	1a80      	subs	r0, r0, r2
 80006f6:	4199      	sbcs	r1, r3
 80006f8:	9000      	str	r0, [sp, #0]
 80006fa:	9101      	str	r1, [sp, #4]
 80006fc:	e79e      	b.n	800063c <__udivmoddi4+0x84>
 80006fe:	42a3      	cmp	r3, r4
 8000700:	d8bc      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000702:	e782      	b.n	800060a <__udivmoddi4+0x52>
 8000704:	4642      	mov	r2, r8
 8000706:	2320      	movs	r3, #32
 8000708:	2100      	movs	r1, #0
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	2200      	movs	r2, #0
 800070e:	9100      	str	r1, [sp, #0]
 8000710:	9201      	str	r2, [sp, #4]
 8000712:	2201      	movs	r2, #1
 8000714:	40da      	lsrs	r2, r3
 8000716:	9201      	str	r2, [sp, #4]
 8000718:	e785      	b.n	8000626 <__udivmoddi4+0x6e>
 800071a:	4642      	mov	r2, r8
 800071c:	2320      	movs	r3, #32
 800071e:	1a9b      	subs	r3, r3, r2
 8000720:	002a      	movs	r2, r5
 8000722:	4646      	mov	r6, r8
 8000724:	409a      	lsls	r2, r3
 8000726:	0023      	movs	r3, r4
 8000728:	40f3      	lsrs	r3, r6
 800072a:	4644      	mov	r4, r8
 800072c:	4313      	orrs	r3, r2
 800072e:	002a      	movs	r2, r5
 8000730:	40e2      	lsrs	r2, r4
 8000732:	001c      	movs	r4, r3
 8000734:	465b      	mov	r3, fp
 8000736:	0015      	movs	r5, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	dad4      	bge.n	80006e6 <__udivmoddi4+0x12e>
 800073c:	4642      	mov	r2, r8
 800073e:	002f      	movs	r7, r5
 8000740:	2320      	movs	r3, #32
 8000742:	0026      	movs	r6, r4
 8000744:	4097      	lsls	r7, r2
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	40de      	lsrs	r6, r3
 800074a:	003b      	movs	r3, r7
 800074c:	4333      	orrs	r3, r6
 800074e:	e7cd      	b.n	80006ec <__udivmoddi4+0x134>

08000750 <__aeabi_fadd>:
 8000750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000752:	4647      	mov	r7, r8
 8000754:	46ce      	mov	lr, r9
 8000756:	024a      	lsls	r2, r1, #9
 8000758:	0243      	lsls	r3, r0, #9
 800075a:	0045      	lsls	r5, r0, #1
 800075c:	0fc4      	lsrs	r4, r0, #31
 800075e:	0a50      	lsrs	r0, r2, #9
 8000760:	4680      	mov	r8, r0
 8000762:	0048      	lsls	r0, r1, #1
 8000764:	0a5b      	lsrs	r3, r3, #9
 8000766:	0e00      	lsrs	r0, r0, #24
 8000768:	0992      	lsrs	r2, r2, #6
 800076a:	4694      	mov	ip, r2
 800076c:	b580      	push	{r7, lr}
 800076e:	001e      	movs	r6, r3
 8000770:	4681      	mov	r9, r0
 8000772:	0002      	movs	r2, r0
 8000774:	0e2d      	lsrs	r5, r5, #24
 8000776:	00df      	lsls	r7, r3, #3
 8000778:	0fc9      	lsrs	r1, r1, #31
 800077a:	428c      	cmp	r4, r1
 800077c:	d024      	beq.n	80007c8 <__aeabi_fadd+0x78>
 800077e:	1a28      	subs	r0, r5, r0
 8000780:	2800      	cmp	r0, #0
 8000782:	dd0e      	ble.n	80007a2 <__aeabi_fadd+0x52>
 8000784:	2a00      	cmp	r2, #0
 8000786:	d13e      	bne.n	8000806 <__aeabi_fadd+0xb6>
 8000788:	4662      	mov	r2, ip
 800078a:	2a00      	cmp	r2, #0
 800078c:	d100      	bne.n	8000790 <__aeabi_fadd+0x40>
 800078e:	e0fd      	b.n	800098c <__aeabi_fadd+0x23c>
 8000790:	1e42      	subs	r2, r0, #1
 8000792:	2801      	cmp	r0, #1
 8000794:	d100      	bne.n	8000798 <__aeabi_fadd+0x48>
 8000796:	e137      	b.n	8000a08 <__aeabi_fadd+0x2b8>
 8000798:	28ff      	cmp	r0, #255	; 0xff
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0x4e>
 800079c:	e0a9      	b.n	80008f2 <__aeabi_fadd+0x1a2>
 800079e:	0010      	movs	r0, r2
 80007a0:	e039      	b.n	8000816 <__aeabi_fadd+0xc6>
 80007a2:	2800      	cmp	r0, #0
 80007a4:	d063      	beq.n	800086e <__aeabi_fadd+0x11e>
 80007a6:	464b      	mov	r3, r9
 80007a8:	1b52      	subs	r2, r2, r5
 80007aa:	2d00      	cmp	r5, #0
 80007ac:	d000      	beq.n	80007b0 <__aeabi_fadd+0x60>
 80007ae:	e0e0      	b.n	8000972 <__aeabi_fadd+0x222>
 80007b0:	2f00      	cmp	r7, #0
 80007b2:	d100      	bne.n	80007b6 <__aeabi_fadd+0x66>
 80007b4:	e0ce      	b.n	8000954 <__aeabi_fadd+0x204>
 80007b6:	1e53      	subs	r3, r2, #1
 80007b8:	2a01      	cmp	r2, #1
 80007ba:	d100      	bne.n	80007be <__aeabi_fadd+0x6e>
 80007bc:	e155      	b.n	8000a6a <__aeabi_fadd+0x31a>
 80007be:	2aff      	cmp	r2, #255	; 0xff
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fadd+0x74>
 80007c2:	e094      	b.n	80008ee <__aeabi_fadd+0x19e>
 80007c4:	001a      	movs	r2, r3
 80007c6:	e0d9      	b.n	800097c <__aeabi_fadd+0x22c>
 80007c8:	1a2a      	subs	r2, r5, r0
 80007ca:	2a00      	cmp	r2, #0
 80007cc:	dc00      	bgt.n	80007d0 <__aeabi_fadd+0x80>
 80007ce:	e099      	b.n	8000904 <__aeabi_fadd+0x1b4>
 80007d0:	2800      	cmp	r0, #0
 80007d2:	d062      	beq.n	800089a <__aeabi_fadd+0x14a>
 80007d4:	2dff      	cmp	r5, #255	; 0xff
 80007d6:	d100      	bne.n	80007da <__aeabi_fadd+0x8a>
 80007d8:	e08b      	b.n	80008f2 <__aeabi_fadd+0x1a2>
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	4661      	mov	r1, ip
 80007de:	04db      	lsls	r3, r3, #19
 80007e0:	4319      	orrs	r1, r3
 80007e2:	468c      	mov	ip, r1
 80007e4:	2a1b      	cmp	r2, #27
 80007e6:	dc00      	bgt.n	80007ea <__aeabi_fadd+0x9a>
 80007e8:	e0d2      	b.n	8000990 <__aeabi_fadd+0x240>
 80007ea:	2301      	movs	r3, #1
 80007ec:	19db      	adds	r3, r3, r7
 80007ee:	015a      	lsls	r2, r3, #5
 80007f0:	d56a      	bpl.n	80008c8 <__aeabi_fadd+0x178>
 80007f2:	3501      	adds	r5, #1
 80007f4:	2dff      	cmp	r5, #255	; 0xff
 80007f6:	d05b      	beq.n	80008b0 <__aeabi_fadd+0x160>
 80007f8:	2201      	movs	r2, #1
 80007fa:	49a3      	ldr	r1, [pc, #652]	; (8000a88 <__aeabi_fadd+0x338>)
 80007fc:	401a      	ands	r2, r3
 80007fe:	085b      	lsrs	r3, r3, #1
 8000800:	400b      	ands	r3, r1
 8000802:	4313      	orrs	r3, r2
 8000804:	e01c      	b.n	8000840 <__aeabi_fadd+0xf0>
 8000806:	2dff      	cmp	r5, #255	; 0xff
 8000808:	d100      	bne.n	800080c <__aeabi_fadd+0xbc>
 800080a:	e072      	b.n	80008f2 <__aeabi_fadd+0x1a2>
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	4662      	mov	r2, ip
 8000810:	04db      	lsls	r3, r3, #19
 8000812:	431a      	orrs	r2, r3
 8000814:	4694      	mov	ip, r2
 8000816:	281b      	cmp	r0, #27
 8000818:	dc00      	bgt.n	800081c <__aeabi_fadd+0xcc>
 800081a:	e090      	b.n	800093e <__aeabi_fadd+0x1ee>
 800081c:	2301      	movs	r3, #1
 800081e:	1afb      	subs	r3, r7, r3
 8000820:	015a      	lsls	r2, r3, #5
 8000822:	d551      	bpl.n	80008c8 <__aeabi_fadd+0x178>
 8000824:	019b      	lsls	r3, r3, #6
 8000826:	099e      	lsrs	r6, r3, #6
 8000828:	0030      	movs	r0, r6
 800082a:	f002 fbb1 	bl	8002f90 <__clzsi2>
 800082e:	0033      	movs	r3, r6
 8000830:	3805      	subs	r0, #5
 8000832:	4083      	lsls	r3, r0
 8000834:	4285      	cmp	r5, r0
 8000836:	dc00      	bgt.n	800083a <__aeabi_fadd+0xea>
 8000838:	e075      	b.n	8000926 <__aeabi_fadd+0x1d6>
 800083a:	4a94      	ldr	r2, [pc, #592]	; (8000a8c <__aeabi_fadd+0x33c>)
 800083c:	1a2d      	subs	r5, r5, r0
 800083e:	4013      	ands	r3, r2
 8000840:	075a      	lsls	r2, r3, #29
 8000842:	d004      	beq.n	800084e <__aeabi_fadd+0xfe>
 8000844:	220f      	movs	r2, #15
 8000846:	401a      	ands	r2, r3
 8000848:	2a04      	cmp	r2, #4
 800084a:	d000      	beq.n	800084e <__aeabi_fadd+0xfe>
 800084c:	3304      	adds	r3, #4
 800084e:	015a      	lsls	r2, r3, #5
 8000850:	d53c      	bpl.n	80008cc <__aeabi_fadd+0x17c>
 8000852:	1c68      	adds	r0, r5, #1
 8000854:	2dfe      	cmp	r5, #254	; 0xfe
 8000856:	d02b      	beq.n	80008b0 <__aeabi_fadd+0x160>
 8000858:	019b      	lsls	r3, r3, #6
 800085a:	0a5e      	lsrs	r6, r3, #9
 800085c:	b2c0      	uxtb	r0, r0
 800085e:	05c0      	lsls	r0, r0, #23
 8000860:	4330      	orrs	r0, r6
 8000862:	07e4      	lsls	r4, r4, #31
 8000864:	4320      	orrs	r0, r4
 8000866:	bcc0      	pop	{r6, r7}
 8000868:	46b9      	mov	r9, r7
 800086a:	46b0      	mov	r8, r6
 800086c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800086e:	20fe      	movs	r0, #254	; 0xfe
 8000870:	1c6a      	adds	r2, r5, #1
 8000872:	4210      	tst	r0, r2
 8000874:	d172      	bne.n	800095c <__aeabi_fadd+0x20c>
 8000876:	2d00      	cmp	r5, #0
 8000878:	d000      	beq.n	800087c <__aeabi_fadd+0x12c>
 800087a:	e0ae      	b.n	80009da <__aeabi_fadd+0x28a>
 800087c:	2f00      	cmp	r7, #0
 800087e:	d100      	bne.n	8000882 <__aeabi_fadd+0x132>
 8000880:	e0ec      	b.n	8000a5c <__aeabi_fadd+0x30c>
 8000882:	4663      	mov	r3, ip
 8000884:	2000      	movs	r0, #0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d0e9      	beq.n	800085e <__aeabi_fadd+0x10e>
 800088a:	1afb      	subs	r3, r7, r3
 800088c:	015a      	lsls	r2, r3, #5
 800088e:	d400      	bmi.n	8000892 <__aeabi_fadd+0x142>
 8000890:	e0f3      	b.n	8000a7a <__aeabi_fadd+0x32a>
 8000892:	4663      	mov	r3, ip
 8000894:	000c      	movs	r4, r1
 8000896:	1bdb      	subs	r3, r3, r7
 8000898:	e7d2      	b.n	8000840 <__aeabi_fadd+0xf0>
 800089a:	4661      	mov	r1, ip
 800089c:	2900      	cmp	r1, #0
 800089e:	d05b      	beq.n	8000958 <__aeabi_fadd+0x208>
 80008a0:	1e51      	subs	r1, r2, #1
 80008a2:	2a01      	cmp	r2, #1
 80008a4:	d100      	bne.n	80008a8 <__aeabi_fadd+0x158>
 80008a6:	e0a7      	b.n	80009f8 <__aeabi_fadd+0x2a8>
 80008a8:	2aff      	cmp	r2, #255	; 0xff
 80008aa:	d022      	beq.n	80008f2 <__aeabi_fadd+0x1a2>
 80008ac:	000a      	movs	r2, r1
 80008ae:	e799      	b.n	80007e4 <__aeabi_fadd+0x94>
 80008b0:	20ff      	movs	r0, #255	; 0xff
 80008b2:	2600      	movs	r6, #0
 80008b4:	e7d3      	b.n	800085e <__aeabi_fadd+0x10e>
 80008b6:	21fe      	movs	r1, #254	; 0xfe
 80008b8:	1c6a      	adds	r2, r5, #1
 80008ba:	4211      	tst	r1, r2
 80008bc:	d073      	beq.n	80009a6 <__aeabi_fadd+0x256>
 80008be:	2aff      	cmp	r2, #255	; 0xff
 80008c0:	d0f6      	beq.n	80008b0 <__aeabi_fadd+0x160>
 80008c2:	0015      	movs	r5, r2
 80008c4:	4467      	add	r7, ip
 80008c6:	087b      	lsrs	r3, r7, #1
 80008c8:	075a      	lsls	r2, r3, #29
 80008ca:	d1bb      	bne.n	8000844 <__aeabi_fadd+0xf4>
 80008cc:	08db      	lsrs	r3, r3, #3
 80008ce:	2dff      	cmp	r5, #255	; 0xff
 80008d0:	d00f      	beq.n	80008f2 <__aeabi_fadd+0x1a2>
 80008d2:	025b      	lsls	r3, r3, #9
 80008d4:	0a5e      	lsrs	r6, r3, #9
 80008d6:	b2e8      	uxtb	r0, r5
 80008d8:	e7c1      	b.n	800085e <__aeabi_fadd+0x10e>
 80008da:	4662      	mov	r2, ip
 80008dc:	2a00      	cmp	r2, #0
 80008de:	d008      	beq.n	80008f2 <__aeabi_fadd+0x1a2>
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	03d2      	lsls	r2, r2, #15
 80008e4:	4213      	tst	r3, r2
 80008e6:	d004      	beq.n	80008f2 <__aeabi_fadd+0x1a2>
 80008e8:	4640      	mov	r0, r8
 80008ea:	4210      	tst	r0, r2
 80008ec:	d101      	bne.n	80008f2 <__aeabi_fadd+0x1a2>
 80008ee:	000c      	movs	r4, r1
 80008f0:	4643      	mov	r3, r8
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d0dc      	beq.n	80008b0 <__aeabi_fadd+0x160>
 80008f6:	2680      	movs	r6, #128	; 0x80
 80008f8:	03f6      	lsls	r6, r6, #15
 80008fa:	431e      	orrs	r6, r3
 80008fc:	0276      	lsls	r6, r6, #9
 80008fe:	20ff      	movs	r0, #255	; 0xff
 8000900:	0a76      	lsrs	r6, r6, #9
 8000902:	e7ac      	b.n	800085e <__aeabi_fadd+0x10e>
 8000904:	2a00      	cmp	r2, #0
 8000906:	d0d6      	beq.n	80008b6 <__aeabi_fadd+0x166>
 8000908:	1b42      	subs	r2, r0, r5
 800090a:	2d00      	cmp	r5, #0
 800090c:	d05c      	beq.n	80009c8 <__aeabi_fadd+0x278>
 800090e:	28ff      	cmp	r0, #255	; 0xff
 8000910:	d0ee      	beq.n	80008f0 <__aeabi_fadd+0x1a0>
 8000912:	2380      	movs	r3, #128	; 0x80
 8000914:	04db      	lsls	r3, r3, #19
 8000916:	431f      	orrs	r7, r3
 8000918:	2a1b      	cmp	r2, #27
 800091a:	dc00      	bgt.n	800091e <__aeabi_fadd+0x1ce>
 800091c:	e082      	b.n	8000a24 <__aeabi_fadd+0x2d4>
 800091e:	2301      	movs	r3, #1
 8000920:	464d      	mov	r5, r9
 8000922:	4463      	add	r3, ip
 8000924:	e763      	b.n	80007ee <__aeabi_fadd+0x9e>
 8000926:	2220      	movs	r2, #32
 8000928:	1b40      	subs	r0, r0, r5
 800092a:	3001      	adds	r0, #1
 800092c:	1a12      	subs	r2, r2, r0
 800092e:	0019      	movs	r1, r3
 8000930:	4093      	lsls	r3, r2
 8000932:	40c1      	lsrs	r1, r0
 8000934:	1e5a      	subs	r2, r3, #1
 8000936:	4193      	sbcs	r3, r2
 8000938:	2500      	movs	r5, #0
 800093a:	430b      	orrs	r3, r1
 800093c:	e780      	b.n	8000840 <__aeabi_fadd+0xf0>
 800093e:	2320      	movs	r3, #32
 8000940:	4661      	mov	r1, ip
 8000942:	1a1b      	subs	r3, r3, r0
 8000944:	4099      	lsls	r1, r3
 8000946:	4662      	mov	r2, ip
 8000948:	000b      	movs	r3, r1
 800094a:	40c2      	lsrs	r2, r0
 800094c:	1e59      	subs	r1, r3, #1
 800094e:	418b      	sbcs	r3, r1
 8000950:	4313      	orrs	r3, r2
 8000952:	e764      	b.n	800081e <__aeabi_fadd+0xce>
 8000954:	000c      	movs	r4, r1
 8000956:	4643      	mov	r3, r8
 8000958:	0015      	movs	r5, r2
 800095a:	e7b8      	b.n	80008ce <__aeabi_fadd+0x17e>
 800095c:	4663      	mov	r3, ip
 800095e:	1afe      	subs	r6, r7, r3
 8000960:	0173      	lsls	r3, r6, #5
 8000962:	d445      	bmi.n	80009f0 <__aeabi_fadd+0x2a0>
 8000964:	2e00      	cmp	r6, #0
 8000966:	d000      	beq.n	800096a <__aeabi_fadd+0x21a>
 8000968:	e75e      	b.n	8000828 <__aeabi_fadd+0xd8>
 800096a:	2400      	movs	r4, #0
 800096c:	2000      	movs	r0, #0
 800096e:	2600      	movs	r6, #0
 8000970:	e775      	b.n	800085e <__aeabi_fadd+0x10e>
 8000972:	2bff      	cmp	r3, #255	; 0xff
 8000974:	d0bb      	beq.n	80008ee <__aeabi_fadd+0x19e>
 8000976:	2380      	movs	r3, #128	; 0x80
 8000978:	04db      	lsls	r3, r3, #19
 800097a:	431f      	orrs	r7, r3
 800097c:	2a1b      	cmp	r2, #27
 800097e:	dd47      	ble.n	8000a10 <__aeabi_fadd+0x2c0>
 8000980:	2301      	movs	r3, #1
 8000982:	4662      	mov	r2, ip
 8000984:	000c      	movs	r4, r1
 8000986:	464d      	mov	r5, r9
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	e749      	b.n	8000820 <__aeabi_fadd+0xd0>
 800098c:	0005      	movs	r5, r0
 800098e:	e79e      	b.n	80008ce <__aeabi_fadd+0x17e>
 8000990:	4661      	mov	r1, ip
 8000992:	2320      	movs	r3, #32
 8000994:	40d1      	lsrs	r1, r2
 8000996:	1a9b      	subs	r3, r3, r2
 8000998:	4662      	mov	r2, ip
 800099a:	409a      	lsls	r2, r3
 800099c:	0013      	movs	r3, r2
 800099e:	1e5a      	subs	r2, r3, #1
 80009a0:	4193      	sbcs	r3, r2
 80009a2:	430b      	orrs	r3, r1
 80009a4:	e722      	b.n	80007ec <__aeabi_fadd+0x9c>
 80009a6:	2d00      	cmp	r5, #0
 80009a8:	d146      	bne.n	8000a38 <__aeabi_fadd+0x2e8>
 80009aa:	2f00      	cmp	r7, #0
 80009ac:	d062      	beq.n	8000a74 <__aeabi_fadd+0x324>
 80009ae:	4663      	mov	r3, ip
 80009b0:	2000      	movs	r0, #0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d100      	bne.n	80009b8 <__aeabi_fadd+0x268>
 80009b6:	e752      	b.n	800085e <__aeabi_fadd+0x10e>
 80009b8:	003b      	movs	r3, r7
 80009ba:	4463      	add	r3, ip
 80009bc:	015a      	lsls	r2, r3, #5
 80009be:	d583      	bpl.n	80008c8 <__aeabi_fadd+0x178>
 80009c0:	4a32      	ldr	r2, [pc, #200]	; (8000a8c <__aeabi_fadd+0x33c>)
 80009c2:	3501      	adds	r5, #1
 80009c4:	4013      	ands	r3, r2
 80009c6:	e77f      	b.n	80008c8 <__aeabi_fadd+0x178>
 80009c8:	2f00      	cmp	r7, #0
 80009ca:	d0c4      	beq.n	8000956 <__aeabi_fadd+0x206>
 80009cc:	1e53      	subs	r3, r2, #1
 80009ce:	2a01      	cmp	r2, #1
 80009d0:	d012      	beq.n	80009f8 <__aeabi_fadd+0x2a8>
 80009d2:	2aff      	cmp	r2, #255	; 0xff
 80009d4:	d08c      	beq.n	80008f0 <__aeabi_fadd+0x1a0>
 80009d6:	001a      	movs	r2, r3
 80009d8:	e79e      	b.n	8000918 <__aeabi_fadd+0x1c8>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d000      	beq.n	80009e0 <__aeabi_fadd+0x290>
 80009de:	e77c      	b.n	80008da <__aeabi_fadd+0x18a>
 80009e0:	4663      	mov	r3, ip
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d183      	bne.n	80008ee <__aeabi_fadd+0x19e>
 80009e6:	2680      	movs	r6, #128	; 0x80
 80009e8:	2400      	movs	r4, #0
 80009ea:	20ff      	movs	r0, #255	; 0xff
 80009ec:	03f6      	lsls	r6, r6, #15
 80009ee:	e736      	b.n	800085e <__aeabi_fadd+0x10e>
 80009f0:	4663      	mov	r3, ip
 80009f2:	000c      	movs	r4, r1
 80009f4:	1bde      	subs	r6, r3, r7
 80009f6:	e717      	b.n	8000828 <__aeabi_fadd+0xd8>
 80009f8:	003b      	movs	r3, r7
 80009fa:	4463      	add	r3, ip
 80009fc:	2501      	movs	r5, #1
 80009fe:	015a      	lsls	r2, r3, #5
 8000a00:	d400      	bmi.n	8000a04 <__aeabi_fadd+0x2b4>
 8000a02:	e761      	b.n	80008c8 <__aeabi_fadd+0x178>
 8000a04:	2502      	movs	r5, #2
 8000a06:	e6f7      	b.n	80007f8 <__aeabi_fadd+0xa8>
 8000a08:	4663      	mov	r3, ip
 8000a0a:	2501      	movs	r5, #1
 8000a0c:	1afb      	subs	r3, r7, r3
 8000a0e:	e707      	b.n	8000820 <__aeabi_fadd+0xd0>
 8000a10:	2320      	movs	r3, #32
 8000a12:	1a9b      	subs	r3, r3, r2
 8000a14:	0038      	movs	r0, r7
 8000a16:	409f      	lsls	r7, r3
 8000a18:	003b      	movs	r3, r7
 8000a1a:	40d0      	lsrs	r0, r2
 8000a1c:	1e5a      	subs	r2, r3, #1
 8000a1e:	4193      	sbcs	r3, r2
 8000a20:	4303      	orrs	r3, r0
 8000a22:	e7ae      	b.n	8000982 <__aeabi_fadd+0x232>
 8000a24:	2320      	movs	r3, #32
 8000a26:	1a9b      	subs	r3, r3, r2
 8000a28:	0039      	movs	r1, r7
 8000a2a:	409f      	lsls	r7, r3
 8000a2c:	003b      	movs	r3, r7
 8000a2e:	40d1      	lsrs	r1, r2
 8000a30:	1e5a      	subs	r2, r3, #1
 8000a32:	4193      	sbcs	r3, r2
 8000a34:	430b      	orrs	r3, r1
 8000a36:	e773      	b.n	8000920 <__aeabi_fadd+0x1d0>
 8000a38:	2f00      	cmp	r7, #0
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_fadd+0x2ee>
 8000a3c:	e758      	b.n	80008f0 <__aeabi_fadd+0x1a0>
 8000a3e:	4662      	mov	r2, ip
 8000a40:	2a00      	cmp	r2, #0
 8000a42:	d100      	bne.n	8000a46 <__aeabi_fadd+0x2f6>
 8000a44:	e755      	b.n	80008f2 <__aeabi_fadd+0x1a2>
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	03d2      	lsls	r2, r2, #15
 8000a4a:	4213      	tst	r3, r2
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_fadd+0x300>
 8000a4e:	e750      	b.n	80008f2 <__aeabi_fadd+0x1a2>
 8000a50:	4641      	mov	r1, r8
 8000a52:	4211      	tst	r1, r2
 8000a54:	d000      	beq.n	8000a58 <__aeabi_fadd+0x308>
 8000a56:	e74c      	b.n	80008f2 <__aeabi_fadd+0x1a2>
 8000a58:	4643      	mov	r3, r8
 8000a5a:	e74a      	b.n	80008f2 <__aeabi_fadd+0x1a2>
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d083      	beq.n	800096a <__aeabi_fadd+0x21a>
 8000a62:	000c      	movs	r4, r1
 8000a64:	4646      	mov	r6, r8
 8000a66:	2000      	movs	r0, #0
 8000a68:	e6f9      	b.n	800085e <__aeabi_fadd+0x10e>
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	000c      	movs	r4, r1
 8000a6e:	1bdb      	subs	r3, r3, r7
 8000a70:	3501      	adds	r5, #1
 8000a72:	e6d5      	b.n	8000820 <__aeabi_fadd+0xd0>
 8000a74:	4646      	mov	r6, r8
 8000a76:	2000      	movs	r0, #0
 8000a78:	e6f1      	b.n	800085e <__aeabi_fadd+0x10e>
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d000      	beq.n	8000a80 <__aeabi_fadd+0x330>
 8000a7e:	e723      	b.n	80008c8 <__aeabi_fadd+0x178>
 8000a80:	2400      	movs	r4, #0
 8000a82:	2600      	movs	r6, #0
 8000a84:	e6eb      	b.n	800085e <__aeabi_fadd+0x10e>
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	7dffffff 	.word	0x7dffffff
 8000a8c:	fbffffff 	.word	0xfbffffff

08000a90 <__aeabi_fdiv>:
 8000a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a92:	464f      	mov	r7, r9
 8000a94:	4646      	mov	r6, r8
 8000a96:	46d6      	mov	lr, sl
 8000a98:	0245      	lsls	r5, r0, #9
 8000a9a:	b5c0      	push	{r6, r7, lr}
 8000a9c:	0047      	lsls	r7, r0, #1
 8000a9e:	1c0c      	adds	r4, r1, #0
 8000aa0:	0a6d      	lsrs	r5, r5, #9
 8000aa2:	0e3f      	lsrs	r7, r7, #24
 8000aa4:	0fc6      	lsrs	r6, r0, #31
 8000aa6:	2f00      	cmp	r7, #0
 8000aa8:	d100      	bne.n	8000aac <__aeabi_fdiv+0x1c>
 8000aaa:	e06f      	b.n	8000b8c <__aeabi_fdiv+0xfc>
 8000aac:	2fff      	cmp	r7, #255	; 0xff
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_fdiv+0x22>
 8000ab0:	e074      	b.n	8000b9c <__aeabi_fdiv+0x10c>
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	4699      	mov	r9, r3
 8000ab8:	469a      	mov	sl, r3
 8000aba:	00ed      	lsls	r5, r5, #3
 8000abc:	04d2      	lsls	r2, r2, #19
 8000abe:	4315      	orrs	r5, r2
 8000ac0:	3f7f      	subs	r7, #127	; 0x7f
 8000ac2:	0263      	lsls	r3, r4, #9
 8000ac4:	0a5b      	lsrs	r3, r3, #9
 8000ac6:	4698      	mov	r8, r3
 8000ac8:	0063      	lsls	r3, r4, #1
 8000aca:	0e1b      	lsrs	r3, r3, #24
 8000acc:	0fe4      	lsrs	r4, r4, #31
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d04d      	beq.n	8000b6e <__aeabi_fdiv+0xde>
 8000ad2:	2bff      	cmp	r3, #255	; 0xff
 8000ad4:	d045      	beq.n	8000b62 <__aeabi_fdiv+0xd2>
 8000ad6:	4642      	mov	r2, r8
 8000ad8:	2180      	movs	r1, #128	; 0x80
 8000ada:	00d2      	lsls	r2, r2, #3
 8000adc:	04c9      	lsls	r1, r1, #19
 8000ade:	4311      	orrs	r1, r2
 8000ae0:	4688      	mov	r8, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	3b7f      	subs	r3, #127	; 0x7f
 8000ae6:	0031      	movs	r1, r6
 8000ae8:	1aff      	subs	r7, r7, r3
 8000aea:	464b      	mov	r3, r9
 8000aec:	4061      	eors	r1, r4
 8000aee:	b2c9      	uxtb	r1, r1
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	d900      	bls.n	8000af6 <__aeabi_fdiv+0x66>
 8000af4:	e0b8      	b.n	8000c68 <__aeabi_fdiv+0x1d8>
 8000af6:	4870      	ldr	r0, [pc, #448]	; (8000cb8 <__aeabi_fdiv+0x228>)
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	58c3      	ldr	r3, [r0, r3]
 8000afc:	469f      	mov	pc, r3
 8000afe:	2300      	movs	r3, #0
 8000b00:	4698      	mov	r8, r3
 8000b02:	0026      	movs	r6, r4
 8000b04:	4645      	mov	r5, r8
 8000b06:	4692      	mov	sl, r2
 8000b08:	4653      	mov	r3, sl
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_fdiv+0x80>
 8000b0e:	e08d      	b.n	8000c2c <__aeabi_fdiv+0x19c>
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fdiv+0x86>
 8000b14:	e0a1      	b.n	8000c5a <__aeabi_fdiv+0x1ca>
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d018      	beq.n	8000b4c <__aeabi_fdiv+0xbc>
 8000b1a:	003b      	movs	r3, r7
 8000b1c:	337f      	adds	r3, #127	; 0x7f
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	dd6d      	ble.n	8000bfe <__aeabi_fdiv+0x16e>
 8000b22:	076a      	lsls	r2, r5, #29
 8000b24:	d004      	beq.n	8000b30 <__aeabi_fdiv+0xa0>
 8000b26:	220f      	movs	r2, #15
 8000b28:	402a      	ands	r2, r5
 8000b2a:	2a04      	cmp	r2, #4
 8000b2c:	d000      	beq.n	8000b30 <__aeabi_fdiv+0xa0>
 8000b2e:	3504      	adds	r5, #4
 8000b30:	012a      	lsls	r2, r5, #4
 8000b32:	d503      	bpl.n	8000b3c <__aeabi_fdiv+0xac>
 8000b34:	4b61      	ldr	r3, [pc, #388]	; (8000cbc <__aeabi_fdiv+0x22c>)
 8000b36:	401d      	ands	r5, r3
 8000b38:	003b      	movs	r3, r7
 8000b3a:	3380      	adds	r3, #128	; 0x80
 8000b3c:	2bfe      	cmp	r3, #254	; 0xfe
 8000b3e:	dd00      	ble.n	8000b42 <__aeabi_fdiv+0xb2>
 8000b40:	e074      	b.n	8000c2c <__aeabi_fdiv+0x19c>
 8000b42:	01aa      	lsls	r2, r5, #6
 8000b44:	0a52      	lsrs	r2, r2, #9
 8000b46:	b2d8      	uxtb	r0, r3
 8000b48:	e002      	b.n	8000b50 <__aeabi_fdiv+0xc0>
 8000b4a:	000e      	movs	r6, r1
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	2200      	movs	r2, #0
 8000b50:	05c0      	lsls	r0, r0, #23
 8000b52:	07f6      	lsls	r6, r6, #31
 8000b54:	4310      	orrs	r0, r2
 8000b56:	4330      	orrs	r0, r6
 8000b58:	bce0      	pop	{r5, r6, r7}
 8000b5a:	46ba      	mov	sl, r7
 8000b5c:	46b1      	mov	r9, r6
 8000b5e:	46a8      	mov	r8, r5
 8000b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b62:	4643      	mov	r3, r8
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d13f      	bne.n	8000be8 <__aeabi_fdiv+0x158>
 8000b68:	2202      	movs	r2, #2
 8000b6a:	3fff      	subs	r7, #255	; 0xff
 8000b6c:	e003      	b.n	8000b76 <__aeabi_fdiv+0xe6>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d12d      	bne.n	8000bd0 <__aeabi_fdiv+0x140>
 8000b74:	2201      	movs	r2, #1
 8000b76:	0031      	movs	r1, r6
 8000b78:	464b      	mov	r3, r9
 8000b7a:	4061      	eors	r1, r4
 8000b7c:	b2c9      	uxtb	r1, r1
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d838      	bhi.n	8000bf6 <__aeabi_fdiv+0x166>
 8000b84:	484e      	ldr	r0, [pc, #312]	; (8000cc0 <__aeabi_fdiv+0x230>)
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	58c3      	ldr	r3, [r0, r3]
 8000b8a:	469f      	mov	pc, r3
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d113      	bne.n	8000bb8 <__aeabi_fdiv+0x128>
 8000b90:	2304      	movs	r3, #4
 8000b92:	4699      	mov	r9, r3
 8000b94:	3b03      	subs	r3, #3
 8000b96:	2700      	movs	r7, #0
 8000b98:	469a      	mov	sl, r3
 8000b9a:	e792      	b.n	8000ac2 <__aeabi_fdiv+0x32>
 8000b9c:	2d00      	cmp	r5, #0
 8000b9e:	d105      	bne.n	8000bac <__aeabi_fdiv+0x11c>
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	4699      	mov	r9, r3
 8000ba4:	3b06      	subs	r3, #6
 8000ba6:	27ff      	movs	r7, #255	; 0xff
 8000ba8:	469a      	mov	sl, r3
 8000baa:	e78a      	b.n	8000ac2 <__aeabi_fdiv+0x32>
 8000bac:	230c      	movs	r3, #12
 8000bae:	4699      	mov	r9, r3
 8000bb0:	3b09      	subs	r3, #9
 8000bb2:	27ff      	movs	r7, #255	; 0xff
 8000bb4:	469a      	mov	sl, r3
 8000bb6:	e784      	b.n	8000ac2 <__aeabi_fdiv+0x32>
 8000bb8:	0028      	movs	r0, r5
 8000bba:	f002 f9e9 	bl	8002f90 <__clzsi2>
 8000bbe:	2776      	movs	r7, #118	; 0x76
 8000bc0:	1f43      	subs	r3, r0, #5
 8000bc2:	409d      	lsls	r5, r3
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	427f      	negs	r7, r7
 8000bc8:	4699      	mov	r9, r3
 8000bca:	469a      	mov	sl, r3
 8000bcc:	1a3f      	subs	r7, r7, r0
 8000bce:	e778      	b.n	8000ac2 <__aeabi_fdiv+0x32>
 8000bd0:	4640      	mov	r0, r8
 8000bd2:	f002 f9dd 	bl	8002f90 <__clzsi2>
 8000bd6:	4642      	mov	r2, r8
 8000bd8:	1f43      	subs	r3, r0, #5
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	2376      	movs	r3, #118	; 0x76
 8000bde:	425b      	negs	r3, r3
 8000be0:	4690      	mov	r8, r2
 8000be2:	1a1b      	subs	r3, r3, r0
 8000be4:	2200      	movs	r2, #0
 8000be6:	e77e      	b.n	8000ae6 <__aeabi_fdiv+0x56>
 8000be8:	2303      	movs	r3, #3
 8000bea:	464a      	mov	r2, r9
 8000bec:	431a      	orrs	r2, r3
 8000bee:	4691      	mov	r9, r2
 8000bf0:	33fc      	adds	r3, #252	; 0xfc
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	e777      	b.n	8000ae6 <__aeabi_fdiv+0x56>
 8000bf6:	000e      	movs	r6, r1
 8000bf8:	20ff      	movs	r0, #255	; 0xff
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	e7a8      	b.n	8000b50 <__aeabi_fdiv+0xc0>
 8000bfe:	2201      	movs	r2, #1
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b1b      	cmp	r3, #27
 8000c04:	dca2      	bgt.n	8000b4c <__aeabi_fdiv+0xbc>
 8000c06:	379e      	adds	r7, #158	; 0x9e
 8000c08:	002a      	movs	r2, r5
 8000c0a:	40bd      	lsls	r5, r7
 8000c0c:	40da      	lsrs	r2, r3
 8000c0e:	1e6b      	subs	r3, r5, #1
 8000c10:	419d      	sbcs	r5, r3
 8000c12:	4315      	orrs	r5, r2
 8000c14:	076a      	lsls	r2, r5, #29
 8000c16:	d004      	beq.n	8000c22 <__aeabi_fdiv+0x192>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	402a      	ands	r2, r5
 8000c1c:	2a04      	cmp	r2, #4
 8000c1e:	d000      	beq.n	8000c22 <__aeabi_fdiv+0x192>
 8000c20:	3504      	adds	r5, #4
 8000c22:	016a      	lsls	r2, r5, #5
 8000c24:	d544      	bpl.n	8000cb0 <__aeabi_fdiv+0x220>
 8000c26:	2001      	movs	r0, #1
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e791      	b.n	8000b50 <__aeabi_fdiv+0xc0>
 8000c2c:	20ff      	movs	r0, #255	; 0xff
 8000c2e:	2200      	movs	r2, #0
 8000c30:	e78e      	b.n	8000b50 <__aeabi_fdiv+0xc0>
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	2600      	movs	r6, #0
 8000c36:	20ff      	movs	r0, #255	; 0xff
 8000c38:	03d2      	lsls	r2, r2, #15
 8000c3a:	e789      	b.n	8000b50 <__aeabi_fdiv+0xc0>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4698      	mov	r8, r3
 8000c40:	2280      	movs	r2, #128	; 0x80
 8000c42:	03d2      	lsls	r2, r2, #15
 8000c44:	4215      	tst	r5, r2
 8000c46:	d008      	beq.n	8000c5a <__aeabi_fdiv+0x1ca>
 8000c48:	4643      	mov	r3, r8
 8000c4a:	4213      	tst	r3, r2
 8000c4c:	d105      	bne.n	8000c5a <__aeabi_fdiv+0x1ca>
 8000c4e:	431a      	orrs	r2, r3
 8000c50:	0252      	lsls	r2, r2, #9
 8000c52:	0026      	movs	r6, r4
 8000c54:	20ff      	movs	r0, #255	; 0xff
 8000c56:	0a52      	lsrs	r2, r2, #9
 8000c58:	e77a      	b.n	8000b50 <__aeabi_fdiv+0xc0>
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	03d2      	lsls	r2, r2, #15
 8000c5e:	432a      	orrs	r2, r5
 8000c60:	0252      	lsls	r2, r2, #9
 8000c62:	20ff      	movs	r0, #255	; 0xff
 8000c64:	0a52      	lsrs	r2, r2, #9
 8000c66:	e773      	b.n	8000b50 <__aeabi_fdiv+0xc0>
 8000c68:	4642      	mov	r2, r8
 8000c6a:	016b      	lsls	r3, r5, #5
 8000c6c:	0155      	lsls	r5, r2, #5
 8000c6e:	42ab      	cmp	r3, r5
 8000c70:	d21a      	bcs.n	8000ca8 <__aeabi_fdiv+0x218>
 8000c72:	201b      	movs	r0, #27
 8000c74:	2200      	movs	r2, #0
 8000c76:	3f01      	subs	r7, #1
 8000c78:	2601      	movs	r6, #1
 8000c7a:	001c      	movs	r4, r3
 8000c7c:	0052      	lsls	r2, r2, #1
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	2c00      	cmp	r4, #0
 8000c82:	db01      	blt.n	8000c88 <__aeabi_fdiv+0x1f8>
 8000c84:	429d      	cmp	r5, r3
 8000c86:	d801      	bhi.n	8000c8c <__aeabi_fdiv+0x1fc>
 8000c88:	1b5b      	subs	r3, r3, r5
 8000c8a:	4332      	orrs	r2, r6
 8000c8c:	3801      	subs	r0, #1
 8000c8e:	2800      	cmp	r0, #0
 8000c90:	d1f3      	bne.n	8000c7a <__aeabi_fdiv+0x1ea>
 8000c92:	1e58      	subs	r0, r3, #1
 8000c94:	4183      	sbcs	r3, r0
 8000c96:	4313      	orrs	r3, r2
 8000c98:	001d      	movs	r5, r3
 8000c9a:	003b      	movs	r3, r7
 8000c9c:	337f      	adds	r3, #127	; 0x7f
 8000c9e:	000e      	movs	r6, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	dd00      	ble.n	8000ca6 <__aeabi_fdiv+0x216>
 8000ca4:	e73d      	b.n	8000b22 <__aeabi_fdiv+0x92>
 8000ca6:	e7aa      	b.n	8000bfe <__aeabi_fdiv+0x16e>
 8000ca8:	201a      	movs	r0, #26
 8000caa:	2201      	movs	r2, #1
 8000cac:	1b5b      	subs	r3, r3, r5
 8000cae:	e7e3      	b.n	8000c78 <__aeabi_fdiv+0x1e8>
 8000cb0:	01aa      	lsls	r2, r5, #6
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	0a52      	lsrs	r2, r2, #9
 8000cb6:	e74b      	b.n	8000b50 <__aeabi_fdiv+0xc0>
 8000cb8:	0800c4e0 	.word	0x0800c4e0
 8000cbc:	f7ffffff 	.word	0xf7ffffff
 8000cc0:	0800c520 	.word	0x0800c520

08000cc4 <__eqsf2>:
 8000cc4:	b570      	push	{r4, r5, r6, lr}
 8000cc6:	0042      	lsls	r2, r0, #1
 8000cc8:	0245      	lsls	r5, r0, #9
 8000cca:	024e      	lsls	r6, r1, #9
 8000ccc:	004c      	lsls	r4, r1, #1
 8000cce:	0fc3      	lsrs	r3, r0, #31
 8000cd0:	0a6d      	lsrs	r5, r5, #9
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	0e12      	lsrs	r2, r2, #24
 8000cd6:	0a76      	lsrs	r6, r6, #9
 8000cd8:	0e24      	lsrs	r4, r4, #24
 8000cda:	0fc9      	lsrs	r1, r1, #31
 8000cdc:	2aff      	cmp	r2, #255	; 0xff
 8000cde:	d006      	beq.n	8000cee <__eqsf2+0x2a>
 8000ce0:	2cff      	cmp	r4, #255	; 0xff
 8000ce2:	d003      	beq.n	8000cec <__eqsf2+0x28>
 8000ce4:	42a2      	cmp	r2, r4
 8000ce6:	d101      	bne.n	8000cec <__eqsf2+0x28>
 8000ce8:	42b5      	cmp	r5, r6
 8000cea:	d006      	beq.n	8000cfa <__eqsf2+0x36>
 8000cec:	bd70      	pop	{r4, r5, r6, pc}
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	d1fc      	bne.n	8000cec <__eqsf2+0x28>
 8000cf2:	2cff      	cmp	r4, #255	; 0xff
 8000cf4:	d1fa      	bne.n	8000cec <__eqsf2+0x28>
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	d1f8      	bne.n	8000cec <__eqsf2+0x28>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d006      	beq.n	8000d0c <__eqsf2+0x48>
 8000cfe:	2001      	movs	r0, #1
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	d1f3      	bne.n	8000cec <__eqsf2+0x28>
 8000d04:	0028      	movs	r0, r5
 8000d06:	1e43      	subs	r3, r0, #1
 8000d08:	4198      	sbcs	r0, r3
 8000d0a:	e7ef      	b.n	8000cec <__eqsf2+0x28>
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	e7ed      	b.n	8000cec <__eqsf2+0x28>

08000d10 <__gesf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	0245      	lsls	r5, r0, #9
 8000d16:	024e      	lsls	r6, r1, #9
 8000d18:	004c      	lsls	r4, r1, #1
 8000d1a:	0fc3      	lsrs	r3, r0, #31
 8000d1c:	0a6d      	lsrs	r5, r5, #9
 8000d1e:	0e12      	lsrs	r2, r2, #24
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc8      	lsrs	r0, r1, #31
 8000d26:	2aff      	cmp	r2, #255	; 0xff
 8000d28:	d01b      	beq.n	8000d62 <__gesf2+0x52>
 8000d2a:	2cff      	cmp	r4, #255	; 0xff
 8000d2c:	d00e      	beq.n	8000d4c <__gesf2+0x3c>
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	d11b      	bne.n	8000d6a <__gesf2+0x5a>
 8000d32:	2c00      	cmp	r4, #0
 8000d34:	d101      	bne.n	8000d3a <__gesf2+0x2a>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	d01c      	beq.n	8000d74 <__gesf2+0x64>
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	d00c      	beq.n	8000d58 <__gesf2+0x48>
 8000d3e:	4283      	cmp	r3, r0
 8000d40:	d01c      	beq.n	8000d7c <__gesf2+0x6c>
 8000d42:	2102      	movs	r1, #2
 8000d44:	1e58      	subs	r0, r3, #1
 8000d46:	4008      	ands	r0, r1
 8000d48:	3801      	subs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2e00      	cmp	r6, #0
 8000d4e:	d122      	bne.n	8000d96 <__gesf2+0x86>
 8000d50:	2a00      	cmp	r2, #0
 8000d52:	d1f4      	bne.n	8000d3e <__gesf2+0x2e>
 8000d54:	2d00      	cmp	r5, #0
 8000d56:	d1f2      	bne.n	8000d3e <__gesf2+0x2e>
 8000d58:	2800      	cmp	r0, #0
 8000d5a:	d1f6      	bne.n	8000d4a <__gesf2+0x3a>
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4240      	negs	r0, r0
 8000d60:	e7f3      	b.n	8000d4a <__gesf2+0x3a>
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d117      	bne.n	8000d96 <__gesf2+0x86>
 8000d66:	2cff      	cmp	r4, #255	; 0xff
 8000d68:	d0f0      	beq.n	8000d4c <__gesf2+0x3c>
 8000d6a:	2c00      	cmp	r4, #0
 8000d6c:	d1e7      	bne.n	8000d3e <__gesf2+0x2e>
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d1e5      	bne.n	8000d3e <__gesf2+0x2e>
 8000d72:	e7e6      	b.n	8000d42 <__gesf2+0x32>
 8000d74:	2000      	movs	r0, #0
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e7      	beq.n	8000d4a <__gesf2+0x3a>
 8000d7a:	e7e2      	b.n	8000d42 <__gesf2+0x32>
 8000d7c:	42a2      	cmp	r2, r4
 8000d7e:	dc05      	bgt.n	8000d8c <__gesf2+0x7c>
 8000d80:	dbea      	blt.n	8000d58 <__gesf2+0x48>
 8000d82:	42b5      	cmp	r5, r6
 8000d84:	d802      	bhi.n	8000d8c <__gesf2+0x7c>
 8000d86:	d3e7      	bcc.n	8000d58 <__gesf2+0x48>
 8000d88:	2000      	movs	r0, #0
 8000d8a:	e7de      	b.n	8000d4a <__gesf2+0x3a>
 8000d8c:	4243      	negs	r3, r0
 8000d8e:	4158      	adcs	r0, r3
 8000d90:	0040      	lsls	r0, r0, #1
 8000d92:	3801      	subs	r0, #1
 8000d94:	e7d9      	b.n	8000d4a <__gesf2+0x3a>
 8000d96:	2002      	movs	r0, #2
 8000d98:	4240      	negs	r0, r0
 8000d9a:	e7d6      	b.n	8000d4a <__gesf2+0x3a>

08000d9c <__lesf2>:
 8000d9c:	b570      	push	{r4, r5, r6, lr}
 8000d9e:	0042      	lsls	r2, r0, #1
 8000da0:	0245      	lsls	r5, r0, #9
 8000da2:	024e      	lsls	r6, r1, #9
 8000da4:	004c      	lsls	r4, r1, #1
 8000da6:	0fc3      	lsrs	r3, r0, #31
 8000da8:	0a6d      	lsrs	r5, r5, #9
 8000daa:	0e12      	lsrs	r2, r2, #24
 8000dac:	0a76      	lsrs	r6, r6, #9
 8000dae:	0e24      	lsrs	r4, r4, #24
 8000db0:	0fc8      	lsrs	r0, r1, #31
 8000db2:	2aff      	cmp	r2, #255	; 0xff
 8000db4:	d00b      	beq.n	8000dce <__lesf2+0x32>
 8000db6:	2cff      	cmp	r4, #255	; 0xff
 8000db8:	d00d      	beq.n	8000dd6 <__lesf2+0x3a>
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	d11f      	bne.n	8000dfe <__lesf2+0x62>
 8000dbe:	2c00      	cmp	r4, #0
 8000dc0:	d116      	bne.n	8000df0 <__lesf2+0x54>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d114      	bne.n	8000df0 <__lesf2+0x54>
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	2d00      	cmp	r5, #0
 8000dca:	d010      	beq.n	8000dee <__lesf2+0x52>
 8000dcc:	e009      	b.n	8000de2 <__lesf2+0x46>
 8000dce:	2d00      	cmp	r5, #0
 8000dd0:	d10c      	bne.n	8000dec <__lesf2+0x50>
 8000dd2:	2cff      	cmp	r4, #255	; 0xff
 8000dd4:	d113      	bne.n	8000dfe <__lesf2+0x62>
 8000dd6:	2e00      	cmp	r6, #0
 8000dd8:	d108      	bne.n	8000dec <__lesf2+0x50>
 8000dda:	2a00      	cmp	r2, #0
 8000ddc:	d008      	beq.n	8000df0 <__lesf2+0x54>
 8000dde:	4283      	cmp	r3, r0
 8000de0:	d012      	beq.n	8000e08 <__lesf2+0x6c>
 8000de2:	2102      	movs	r1, #2
 8000de4:	1e58      	subs	r0, r3, #1
 8000de6:	4008      	ands	r0, r1
 8000de8:	3801      	subs	r0, #1
 8000dea:	e000      	b.n	8000dee <__lesf2+0x52>
 8000dec:	2002      	movs	r0, #2
 8000dee:	bd70      	pop	{r4, r5, r6, pc}
 8000df0:	2d00      	cmp	r5, #0
 8000df2:	d1f4      	bne.n	8000dde <__lesf2+0x42>
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d1fa      	bne.n	8000dee <__lesf2+0x52>
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4240      	negs	r0, r0
 8000dfc:	e7f7      	b.n	8000dee <__lesf2+0x52>
 8000dfe:	2c00      	cmp	r4, #0
 8000e00:	d1ed      	bne.n	8000dde <__lesf2+0x42>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	d1eb      	bne.n	8000dde <__lesf2+0x42>
 8000e06:	e7ec      	b.n	8000de2 <__lesf2+0x46>
 8000e08:	42a2      	cmp	r2, r4
 8000e0a:	dc05      	bgt.n	8000e18 <__lesf2+0x7c>
 8000e0c:	dbf2      	blt.n	8000df4 <__lesf2+0x58>
 8000e0e:	42b5      	cmp	r5, r6
 8000e10:	d802      	bhi.n	8000e18 <__lesf2+0x7c>
 8000e12:	d3ef      	bcc.n	8000df4 <__lesf2+0x58>
 8000e14:	2000      	movs	r0, #0
 8000e16:	e7ea      	b.n	8000dee <__lesf2+0x52>
 8000e18:	4243      	negs	r3, r0
 8000e1a:	4158      	adcs	r0, r3
 8000e1c:	0040      	lsls	r0, r0, #1
 8000e1e:	3801      	subs	r0, #1
 8000e20:	e7e5      	b.n	8000dee <__lesf2+0x52>
 8000e22:	46c0      	nop			; (mov r8, r8)

08000e24 <__aeabi_fmul>:
 8000e24:	0243      	lsls	r3, r0, #9
 8000e26:	0a5b      	lsrs	r3, r3, #9
 8000e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e2a:	464f      	mov	r7, r9
 8000e2c:	4646      	mov	r6, r8
 8000e2e:	4699      	mov	r9, r3
 8000e30:	46d6      	mov	lr, sl
 8000e32:	0fc3      	lsrs	r3, r0, #31
 8000e34:	0045      	lsls	r5, r0, #1
 8000e36:	4698      	mov	r8, r3
 8000e38:	b5c0      	push	{r6, r7, lr}
 8000e3a:	464b      	mov	r3, r9
 8000e3c:	1c0f      	adds	r7, r1, #0
 8000e3e:	0e2d      	lsrs	r5, r5, #24
 8000e40:	d100      	bne.n	8000e44 <__aeabi_fmul+0x20>
 8000e42:	e0cb      	b.n	8000fdc <__aeabi_fmul+0x1b8>
 8000e44:	2dff      	cmp	r5, #255	; 0xff
 8000e46:	d100      	bne.n	8000e4a <__aeabi_fmul+0x26>
 8000e48:	e0cf      	b.n	8000fea <__aeabi_fmul+0x1c6>
 8000e4a:	2280      	movs	r2, #128	; 0x80
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	04d2      	lsls	r2, r2, #19
 8000e50:	431a      	orrs	r2, r3
 8000e52:	2300      	movs	r3, #0
 8000e54:	4691      	mov	r9, r2
 8000e56:	2600      	movs	r6, #0
 8000e58:	469a      	mov	sl, r3
 8000e5a:	3d7f      	subs	r5, #127	; 0x7f
 8000e5c:	027c      	lsls	r4, r7, #9
 8000e5e:	007b      	lsls	r3, r7, #1
 8000e60:	0a64      	lsrs	r4, r4, #9
 8000e62:	0e1b      	lsrs	r3, r3, #24
 8000e64:	0fff      	lsrs	r7, r7, #31
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d100      	bne.n	8000e6c <__aeabi_fmul+0x48>
 8000e6a:	e0a9      	b.n	8000fc0 <__aeabi_fmul+0x19c>
 8000e6c:	2bff      	cmp	r3, #255	; 0xff
 8000e6e:	d011      	beq.n	8000e94 <__aeabi_fmul+0x70>
 8000e70:	2280      	movs	r2, #128	; 0x80
 8000e72:	00e4      	lsls	r4, r4, #3
 8000e74:	04d2      	lsls	r2, r2, #19
 8000e76:	4314      	orrs	r4, r2
 8000e78:	4642      	mov	r2, r8
 8000e7a:	3b7f      	subs	r3, #127	; 0x7f
 8000e7c:	195b      	adds	r3, r3, r5
 8000e7e:	407a      	eors	r2, r7
 8000e80:	2000      	movs	r0, #0
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	1c5d      	adds	r5, r3, #1
 8000e86:	2e0a      	cmp	r6, #10
 8000e88:	dd13      	ble.n	8000eb2 <__aeabi_fmul+0x8e>
 8000e8a:	003a      	movs	r2, r7
 8000e8c:	2e0b      	cmp	r6, #11
 8000e8e:	d047      	beq.n	8000f20 <__aeabi_fmul+0xfc>
 8000e90:	4647      	mov	r7, r8
 8000e92:	e03f      	b.n	8000f14 <__aeabi_fmul+0xf0>
 8000e94:	002b      	movs	r3, r5
 8000e96:	33ff      	adds	r3, #255	; 0xff
 8000e98:	2c00      	cmp	r4, #0
 8000e9a:	d11e      	bne.n	8000eda <__aeabi_fmul+0xb6>
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	4316      	orrs	r6, r2
 8000ea0:	4642      	mov	r2, r8
 8000ea2:	3501      	adds	r5, #1
 8000ea4:	407a      	eors	r2, r7
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	35ff      	adds	r5, #255	; 0xff
 8000eaa:	2e0a      	cmp	r6, #10
 8000eac:	dd00      	ble.n	8000eb0 <__aeabi_fmul+0x8c>
 8000eae:	e0e4      	b.n	800107a <__aeabi_fmul+0x256>
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	2e02      	cmp	r6, #2
 8000eb4:	dc1c      	bgt.n	8000ef0 <__aeabi_fmul+0xcc>
 8000eb6:	3e01      	subs	r6, #1
 8000eb8:	2e01      	cmp	r6, #1
 8000eba:	d842      	bhi.n	8000f42 <__aeabi_fmul+0x11e>
 8000ebc:	2802      	cmp	r0, #2
 8000ebe:	d03d      	beq.n	8000f3c <__aeabi_fmul+0x118>
 8000ec0:	2801      	cmp	r0, #1
 8000ec2:	d166      	bne.n	8000f92 <__aeabi_fmul+0x16e>
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	05c0      	lsls	r0, r0, #23
 8000eca:	4308      	orrs	r0, r1
 8000ecc:	07d2      	lsls	r2, r2, #31
 8000ece:	4310      	orrs	r0, r2
 8000ed0:	bce0      	pop	{r5, r6, r7}
 8000ed2:	46ba      	mov	sl, r7
 8000ed4:	46b1      	mov	r9, r6
 8000ed6:	46a8      	mov	r8, r5
 8000ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eda:	2203      	movs	r2, #3
 8000edc:	4316      	orrs	r6, r2
 8000ede:	4642      	mov	r2, r8
 8000ee0:	3501      	adds	r5, #1
 8000ee2:	407a      	eors	r2, r7
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	35ff      	adds	r5, #255	; 0xff
 8000ee8:	2e0a      	cmp	r6, #10
 8000eea:	dd00      	ble.n	8000eee <__aeabi_fmul+0xca>
 8000eec:	e0e4      	b.n	80010b8 <__aeabi_fmul+0x294>
 8000eee:	2003      	movs	r0, #3
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	40b1      	lsls	r1, r6
 8000ef4:	26a6      	movs	r6, #166	; 0xa6
 8000ef6:	00f6      	lsls	r6, r6, #3
 8000ef8:	4231      	tst	r1, r6
 8000efa:	d10a      	bne.n	8000f12 <__aeabi_fmul+0xee>
 8000efc:	2690      	movs	r6, #144	; 0x90
 8000efe:	00b6      	lsls	r6, r6, #2
 8000f00:	4231      	tst	r1, r6
 8000f02:	d116      	bne.n	8000f32 <__aeabi_fmul+0x10e>
 8000f04:	3eb9      	subs	r6, #185	; 0xb9
 8000f06:	3eff      	subs	r6, #255	; 0xff
 8000f08:	420e      	tst	r6, r1
 8000f0a:	d01a      	beq.n	8000f42 <__aeabi_fmul+0x11e>
 8000f0c:	46a1      	mov	r9, r4
 8000f0e:	4682      	mov	sl, r0
 8000f10:	e000      	b.n	8000f14 <__aeabi_fmul+0xf0>
 8000f12:	0017      	movs	r7, r2
 8000f14:	4653      	mov	r3, sl
 8000f16:	003a      	movs	r2, r7
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d00f      	beq.n	8000f3c <__aeabi_fmul+0x118>
 8000f1c:	464c      	mov	r4, r9
 8000f1e:	4650      	mov	r0, sl
 8000f20:	2803      	cmp	r0, #3
 8000f22:	d1cd      	bne.n	8000ec0 <__aeabi_fmul+0x9c>
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	03c9      	lsls	r1, r1, #15
 8000f28:	4321      	orrs	r1, r4
 8000f2a:	0249      	lsls	r1, r1, #9
 8000f2c:	20ff      	movs	r0, #255	; 0xff
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	e7ca      	b.n	8000ec8 <__aeabi_fmul+0xa4>
 8000f32:	2180      	movs	r1, #128	; 0x80
 8000f34:	2200      	movs	r2, #0
 8000f36:	20ff      	movs	r0, #255	; 0xff
 8000f38:	03c9      	lsls	r1, r1, #15
 8000f3a:	e7c5      	b.n	8000ec8 <__aeabi_fmul+0xa4>
 8000f3c:	20ff      	movs	r0, #255	; 0xff
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e7c2      	b.n	8000ec8 <__aeabi_fmul+0xa4>
 8000f42:	0c20      	lsrs	r0, r4, #16
 8000f44:	4649      	mov	r1, r9
 8000f46:	0424      	lsls	r4, r4, #16
 8000f48:	0c24      	lsrs	r4, r4, #16
 8000f4a:	0027      	movs	r7, r4
 8000f4c:	0c0e      	lsrs	r6, r1, #16
 8000f4e:	0409      	lsls	r1, r1, #16
 8000f50:	0c09      	lsrs	r1, r1, #16
 8000f52:	4374      	muls	r4, r6
 8000f54:	434f      	muls	r7, r1
 8000f56:	4346      	muls	r6, r0
 8000f58:	4348      	muls	r0, r1
 8000f5a:	0c39      	lsrs	r1, r7, #16
 8000f5c:	1900      	adds	r0, r0, r4
 8000f5e:	1809      	adds	r1, r1, r0
 8000f60:	428c      	cmp	r4, r1
 8000f62:	d903      	bls.n	8000f6c <__aeabi_fmul+0x148>
 8000f64:	2080      	movs	r0, #128	; 0x80
 8000f66:	0240      	lsls	r0, r0, #9
 8000f68:	4684      	mov	ip, r0
 8000f6a:	4466      	add	r6, ip
 8000f6c:	043f      	lsls	r7, r7, #16
 8000f6e:	0408      	lsls	r0, r1, #16
 8000f70:	0c3f      	lsrs	r7, r7, #16
 8000f72:	19c0      	adds	r0, r0, r7
 8000f74:	0184      	lsls	r4, r0, #6
 8000f76:	1e67      	subs	r7, r4, #1
 8000f78:	41bc      	sbcs	r4, r7
 8000f7a:	0c09      	lsrs	r1, r1, #16
 8000f7c:	0e80      	lsrs	r0, r0, #26
 8000f7e:	1989      	adds	r1, r1, r6
 8000f80:	4304      	orrs	r4, r0
 8000f82:	0189      	lsls	r1, r1, #6
 8000f84:	430c      	orrs	r4, r1
 8000f86:	0109      	lsls	r1, r1, #4
 8000f88:	d571      	bpl.n	800106e <__aeabi_fmul+0x24a>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	0861      	lsrs	r1, r4, #1
 8000f8e:	401c      	ands	r4, r3
 8000f90:	430c      	orrs	r4, r1
 8000f92:	002b      	movs	r3, r5
 8000f94:	337f      	adds	r3, #127	; 0x7f
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	dd51      	ble.n	800103e <__aeabi_fmul+0x21a>
 8000f9a:	0761      	lsls	r1, r4, #29
 8000f9c:	d004      	beq.n	8000fa8 <__aeabi_fmul+0x184>
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	4021      	ands	r1, r4
 8000fa2:	2904      	cmp	r1, #4
 8000fa4:	d000      	beq.n	8000fa8 <__aeabi_fmul+0x184>
 8000fa6:	3404      	adds	r4, #4
 8000fa8:	0121      	lsls	r1, r4, #4
 8000faa:	d503      	bpl.n	8000fb4 <__aeabi_fmul+0x190>
 8000fac:	4b43      	ldr	r3, [pc, #268]	; (80010bc <__aeabi_fmul+0x298>)
 8000fae:	401c      	ands	r4, r3
 8000fb0:	002b      	movs	r3, r5
 8000fb2:	3380      	adds	r3, #128	; 0x80
 8000fb4:	2bfe      	cmp	r3, #254	; 0xfe
 8000fb6:	dcc1      	bgt.n	8000f3c <__aeabi_fmul+0x118>
 8000fb8:	01a1      	lsls	r1, r4, #6
 8000fba:	0a49      	lsrs	r1, r1, #9
 8000fbc:	b2d8      	uxtb	r0, r3
 8000fbe:	e783      	b.n	8000ec8 <__aeabi_fmul+0xa4>
 8000fc0:	2c00      	cmp	r4, #0
 8000fc2:	d12c      	bne.n	800101e <__aeabi_fmul+0x1fa>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	4642      	mov	r2, r8
 8000fc8:	431e      	orrs	r6, r3
 8000fca:	002b      	movs	r3, r5
 8000fcc:	407a      	eors	r2, r7
 8000fce:	2001      	movs	r0, #1
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	1c5d      	adds	r5, r3, #1
 8000fd4:	2e0a      	cmp	r6, #10
 8000fd6:	dd00      	ble.n	8000fda <__aeabi_fmul+0x1b6>
 8000fd8:	e757      	b.n	8000e8a <__aeabi_fmul+0x66>
 8000fda:	e76a      	b.n	8000eb2 <__aeabi_fmul+0x8e>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d110      	bne.n	8001002 <__aeabi_fmul+0x1de>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	2604      	movs	r6, #4
 8000fe4:	2500      	movs	r5, #0
 8000fe6:	469a      	mov	sl, r3
 8000fe8:	e738      	b.n	8000e5c <__aeabi_fmul+0x38>
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d104      	bne.n	8000ff8 <__aeabi_fmul+0x1d4>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	2608      	movs	r6, #8
 8000ff2:	25ff      	movs	r5, #255	; 0xff
 8000ff4:	469a      	mov	sl, r3
 8000ff6:	e731      	b.n	8000e5c <__aeabi_fmul+0x38>
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	260c      	movs	r6, #12
 8000ffc:	25ff      	movs	r5, #255	; 0xff
 8000ffe:	469a      	mov	sl, r3
 8001000:	e72c      	b.n	8000e5c <__aeabi_fmul+0x38>
 8001002:	4648      	mov	r0, r9
 8001004:	f001 ffc4 	bl	8002f90 <__clzsi2>
 8001008:	464a      	mov	r2, r9
 800100a:	1f43      	subs	r3, r0, #5
 800100c:	2576      	movs	r5, #118	; 0x76
 800100e:	409a      	lsls	r2, r3
 8001010:	2300      	movs	r3, #0
 8001012:	426d      	negs	r5, r5
 8001014:	4691      	mov	r9, r2
 8001016:	2600      	movs	r6, #0
 8001018:	469a      	mov	sl, r3
 800101a:	1a2d      	subs	r5, r5, r0
 800101c:	e71e      	b.n	8000e5c <__aeabi_fmul+0x38>
 800101e:	0020      	movs	r0, r4
 8001020:	f001 ffb6 	bl	8002f90 <__clzsi2>
 8001024:	4642      	mov	r2, r8
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	409c      	lsls	r4, r3
 800102a:	1a2b      	subs	r3, r5, r0
 800102c:	3b76      	subs	r3, #118	; 0x76
 800102e:	407a      	eors	r2, r7
 8001030:	2000      	movs	r0, #0
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	1c5d      	adds	r5, r3, #1
 8001036:	2e0a      	cmp	r6, #10
 8001038:	dd00      	ble.n	800103c <__aeabi_fmul+0x218>
 800103a:	e726      	b.n	8000e8a <__aeabi_fmul+0x66>
 800103c:	e739      	b.n	8000eb2 <__aeabi_fmul+0x8e>
 800103e:	2101      	movs	r1, #1
 8001040:	1acb      	subs	r3, r1, r3
 8001042:	2b1b      	cmp	r3, #27
 8001044:	dd00      	ble.n	8001048 <__aeabi_fmul+0x224>
 8001046:	e73d      	b.n	8000ec4 <__aeabi_fmul+0xa0>
 8001048:	359e      	adds	r5, #158	; 0x9e
 800104a:	0021      	movs	r1, r4
 800104c:	40ac      	lsls	r4, r5
 800104e:	40d9      	lsrs	r1, r3
 8001050:	1e63      	subs	r3, r4, #1
 8001052:	419c      	sbcs	r4, r3
 8001054:	4321      	orrs	r1, r4
 8001056:	074b      	lsls	r3, r1, #29
 8001058:	d004      	beq.n	8001064 <__aeabi_fmul+0x240>
 800105a:	230f      	movs	r3, #15
 800105c:	400b      	ands	r3, r1
 800105e:	2b04      	cmp	r3, #4
 8001060:	d000      	beq.n	8001064 <__aeabi_fmul+0x240>
 8001062:	3104      	adds	r1, #4
 8001064:	014b      	lsls	r3, r1, #5
 8001066:	d504      	bpl.n	8001072 <__aeabi_fmul+0x24e>
 8001068:	2001      	movs	r0, #1
 800106a:	2100      	movs	r1, #0
 800106c:	e72c      	b.n	8000ec8 <__aeabi_fmul+0xa4>
 800106e:	001d      	movs	r5, r3
 8001070:	e78f      	b.n	8000f92 <__aeabi_fmul+0x16e>
 8001072:	0189      	lsls	r1, r1, #6
 8001074:	2000      	movs	r0, #0
 8001076:	0a49      	lsrs	r1, r1, #9
 8001078:	e726      	b.n	8000ec8 <__aeabi_fmul+0xa4>
 800107a:	2302      	movs	r3, #2
 800107c:	2e0f      	cmp	r6, #15
 800107e:	d10c      	bne.n	800109a <__aeabi_fmul+0x276>
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	464b      	mov	r3, r9
 8001084:	03c9      	lsls	r1, r1, #15
 8001086:	420b      	tst	r3, r1
 8001088:	d00d      	beq.n	80010a6 <__aeabi_fmul+0x282>
 800108a:	420c      	tst	r4, r1
 800108c:	d10b      	bne.n	80010a6 <__aeabi_fmul+0x282>
 800108e:	4321      	orrs	r1, r4
 8001090:	0249      	lsls	r1, r1, #9
 8001092:	003a      	movs	r2, r7
 8001094:	20ff      	movs	r0, #255	; 0xff
 8001096:	0a49      	lsrs	r1, r1, #9
 8001098:	e716      	b.n	8000ec8 <__aeabi_fmul+0xa4>
 800109a:	2e0b      	cmp	r6, #11
 800109c:	d000      	beq.n	80010a0 <__aeabi_fmul+0x27c>
 800109e:	e6f7      	b.n	8000e90 <__aeabi_fmul+0x6c>
 80010a0:	46a1      	mov	r9, r4
 80010a2:	469a      	mov	sl, r3
 80010a4:	e736      	b.n	8000f14 <__aeabi_fmul+0xf0>
 80010a6:	2180      	movs	r1, #128	; 0x80
 80010a8:	464b      	mov	r3, r9
 80010aa:	03c9      	lsls	r1, r1, #15
 80010ac:	4319      	orrs	r1, r3
 80010ae:	0249      	lsls	r1, r1, #9
 80010b0:	4642      	mov	r2, r8
 80010b2:	20ff      	movs	r0, #255	; 0xff
 80010b4:	0a49      	lsrs	r1, r1, #9
 80010b6:	e707      	b.n	8000ec8 <__aeabi_fmul+0xa4>
 80010b8:	2303      	movs	r3, #3
 80010ba:	e7df      	b.n	800107c <__aeabi_fmul+0x258>
 80010bc:	f7ffffff 	.word	0xf7ffffff

080010c0 <__aeabi_i2f>:
 80010c0:	b570      	push	{r4, r5, r6, lr}
 80010c2:	2800      	cmp	r0, #0
 80010c4:	d013      	beq.n	80010ee <__aeabi_i2f+0x2e>
 80010c6:	17c3      	asrs	r3, r0, #31
 80010c8:	18c5      	adds	r5, r0, r3
 80010ca:	405d      	eors	r5, r3
 80010cc:	0fc4      	lsrs	r4, r0, #31
 80010ce:	0028      	movs	r0, r5
 80010d0:	f001 ff5e 	bl	8002f90 <__clzsi2>
 80010d4:	239e      	movs	r3, #158	; 0x9e
 80010d6:	0001      	movs	r1, r0
 80010d8:	1a1b      	subs	r3, r3, r0
 80010da:	2b96      	cmp	r3, #150	; 0x96
 80010dc:	dc0f      	bgt.n	80010fe <__aeabi_i2f+0x3e>
 80010de:	2808      	cmp	r0, #8
 80010e0:	d031      	beq.n	8001146 <__aeabi_i2f+0x86>
 80010e2:	3908      	subs	r1, #8
 80010e4:	408d      	lsls	r5, r1
 80010e6:	026d      	lsls	r5, r5, #9
 80010e8:	0a6d      	lsrs	r5, r5, #9
 80010ea:	b2d8      	uxtb	r0, r3
 80010ec:	e002      	b.n	80010f4 <__aeabi_i2f+0x34>
 80010ee:	2400      	movs	r4, #0
 80010f0:	2000      	movs	r0, #0
 80010f2:	2500      	movs	r5, #0
 80010f4:	05c0      	lsls	r0, r0, #23
 80010f6:	4328      	orrs	r0, r5
 80010f8:	07e4      	lsls	r4, r4, #31
 80010fa:	4320      	orrs	r0, r4
 80010fc:	bd70      	pop	{r4, r5, r6, pc}
 80010fe:	2b99      	cmp	r3, #153	; 0x99
 8001100:	dd0c      	ble.n	800111c <__aeabi_i2f+0x5c>
 8001102:	2205      	movs	r2, #5
 8001104:	1a12      	subs	r2, r2, r0
 8001106:	0028      	movs	r0, r5
 8001108:	40d0      	lsrs	r0, r2
 800110a:	0002      	movs	r2, r0
 800110c:	0008      	movs	r0, r1
 800110e:	301b      	adds	r0, #27
 8001110:	4085      	lsls	r5, r0
 8001112:	0028      	movs	r0, r5
 8001114:	1e45      	subs	r5, r0, #1
 8001116:	41a8      	sbcs	r0, r5
 8001118:	4302      	orrs	r2, r0
 800111a:	0015      	movs	r5, r2
 800111c:	2905      	cmp	r1, #5
 800111e:	dc16      	bgt.n	800114e <__aeabi_i2f+0x8e>
 8001120:	002a      	movs	r2, r5
 8001122:	480f      	ldr	r0, [pc, #60]	; (8001160 <__aeabi_i2f+0xa0>)
 8001124:	4002      	ands	r2, r0
 8001126:	076e      	lsls	r6, r5, #29
 8001128:	d009      	beq.n	800113e <__aeabi_i2f+0x7e>
 800112a:	260f      	movs	r6, #15
 800112c:	4035      	ands	r5, r6
 800112e:	2d04      	cmp	r5, #4
 8001130:	d005      	beq.n	800113e <__aeabi_i2f+0x7e>
 8001132:	3204      	adds	r2, #4
 8001134:	0155      	lsls	r5, r2, #5
 8001136:	d502      	bpl.n	800113e <__aeabi_i2f+0x7e>
 8001138:	239f      	movs	r3, #159	; 0x9f
 800113a:	4002      	ands	r2, r0
 800113c:	1a5b      	subs	r3, r3, r1
 800113e:	0192      	lsls	r2, r2, #6
 8001140:	0a55      	lsrs	r5, r2, #9
 8001142:	b2d8      	uxtb	r0, r3
 8001144:	e7d6      	b.n	80010f4 <__aeabi_i2f+0x34>
 8001146:	026d      	lsls	r5, r5, #9
 8001148:	2096      	movs	r0, #150	; 0x96
 800114a:	0a6d      	lsrs	r5, r5, #9
 800114c:	e7d2      	b.n	80010f4 <__aeabi_i2f+0x34>
 800114e:	1f4a      	subs	r2, r1, #5
 8001150:	4095      	lsls	r5, r2
 8001152:	002a      	movs	r2, r5
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <__aeabi_i2f+0xa0>)
 8001156:	4002      	ands	r2, r0
 8001158:	076e      	lsls	r6, r5, #29
 800115a:	d0f0      	beq.n	800113e <__aeabi_i2f+0x7e>
 800115c:	e7e5      	b.n	800112a <__aeabi_i2f+0x6a>
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	fbffffff 	.word	0xfbffffff

08001164 <__aeabi_dadd>:
 8001164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001166:	464f      	mov	r7, r9
 8001168:	4646      	mov	r6, r8
 800116a:	46d6      	mov	lr, sl
 800116c:	0004      	movs	r4, r0
 800116e:	b5c0      	push	{r6, r7, lr}
 8001170:	001f      	movs	r7, r3
 8001172:	030b      	lsls	r3, r1, #12
 8001174:	0010      	movs	r0, r2
 8001176:	004e      	lsls	r6, r1, #1
 8001178:	0a5b      	lsrs	r3, r3, #9
 800117a:	0fcd      	lsrs	r5, r1, #31
 800117c:	0f61      	lsrs	r1, r4, #29
 800117e:	007a      	lsls	r2, r7, #1
 8001180:	4319      	orrs	r1, r3
 8001182:	00e3      	lsls	r3, r4, #3
 8001184:	033c      	lsls	r4, r7, #12
 8001186:	0fff      	lsrs	r7, r7, #31
 8001188:	46bc      	mov	ip, r7
 800118a:	0a64      	lsrs	r4, r4, #9
 800118c:	0f47      	lsrs	r7, r0, #29
 800118e:	4327      	orrs	r7, r4
 8001190:	0d76      	lsrs	r6, r6, #21
 8001192:	0d52      	lsrs	r2, r2, #21
 8001194:	00c0      	lsls	r0, r0, #3
 8001196:	46b9      	mov	r9, r7
 8001198:	4680      	mov	r8, r0
 800119a:	1ab7      	subs	r7, r6, r2
 800119c:	4565      	cmp	r5, ip
 800119e:	d100      	bne.n	80011a2 <__aeabi_dadd+0x3e>
 80011a0:	e09b      	b.n	80012da <__aeabi_dadd+0x176>
 80011a2:	2f00      	cmp	r7, #0
 80011a4:	dc00      	bgt.n	80011a8 <__aeabi_dadd+0x44>
 80011a6:	e084      	b.n	80012b2 <__aeabi_dadd+0x14e>
 80011a8:	2a00      	cmp	r2, #0
 80011aa:	d100      	bne.n	80011ae <__aeabi_dadd+0x4a>
 80011ac:	e0be      	b.n	800132c <__aeabi_dadd+0x1c8>
 80011ae:	4ac8      	ldr	r2, [pc, #800]	; (80014d0 <__aeabi_dadd+0x36c>)
 80011b0:	4296      	cmp	r6, r2
 80011b2:	d100      	bne.n	80011b6 <__aeabi_dadd+0x52>
 80011b4:	e124      	b.n	8001400 <__aeabi_dadd+0x29c>
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	464c      	mov	r4, r9
 80011ba:	0412      	lsls	r2, r2, #16
 80011bc:	4314      	orrs	r4, r2
 80011be:	46a1      	mov	r9, r4
 80011c0:	2f38      	cmp	r7, #56	; 0x38
 80011c2:	dd00      	ble.n	80011c6 <__aeabi_dadd+0x62>
 80011c4:	e167      	b.n	8001496 <__aeabi_dadd+0x332>
 80011c6:	2f1f      	cmp	r7, #31
 80011c8:	dd00      	ble.n	80011cc <__aeabi_dadd+0x68>
 80011ca:	e1d6      	b.n	800157a <__aeabi_dadd+0x416>
 80011cc:	2220      	movs	r2, #32
 80011ce:	464c      	mov	r4, r9
 80011d0:	1bd2      	subs	r2, r2, r7
 80011d2:	4094      	lsls	r4, r2
 80011d4:	46a2      	mov	sl, r4
 80011d6:	4644      	mov	r4, r8
 80011d8:	40fc      	lsrs	r4, r7
 80011da:	0020      	movs	r0, r4
 80011dc:	4654      	mov	r4, sl
 80011de:	4304      	orrs	r4, r0
 80011e0:	4640      	mov	r0, r8
 80011e2:	4090      	lsls	r0, r2
 80011e4:	1e42      	subs	r2, r0, #1
 80011e6:	4190      	sbcs	r0, r2
 80011e8:	464a      	mov	r2, r9
 80011ea:	40fa      	lsrs	r2, r7
 80011ec:	4304      	orrs	r4, r0
 80011ee:	1a89      	subs	r1, r1, r2
 80011f0:	1b1c      	subs	r4, r3, r4
 80011f2:	42a3      	cmp	r3, r4
 80011f4:	4192      	sbcs	r2, r2
 80011f6:	4252      	negs	r2, r2
 80011f8:	1a8b      	subs	r3, r1, r2
 80011fa:	469a      	mov	sl, r3
 80011fc:	4653      	mov	r3, sl
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	d400      	bmi.n	8001204 <__aeabi_dadd+0xa0>
 8001202:	e0d4      	b.n	80013ae <__aeabi_dadd+0x24a>
 8001204:	4653      	mov	r3, sl
 8001206:	025a      	lsls	r2, r3, #9
 8001208:	0a53      	lsrs	r3, r2, #9
 800120a:	469a      	mov	sl, r3
 800120c:	4653      	mov	r3, sl
 800120e:	2b00      	cmp	r3, #0
 8001210:	d100      	bne.n	8001214 <__aeabi_dadd+0xb0>
 8001212:	e104      	b.n	800141e <__aeabi_dadd+0x2ba>
 8001214:	4650      	mov	r0, sl
 8001216:	f001 febb 	bl	8002f90 <__clzsi2>
 800121a:	0003      	movs	r3, r0
 800121c:	3b08      	subs	r3, #8
 800121e:	2220      	movs	r2, #32
 8001220:	0020      	movs	r0, r4
 8001222:	1ad2      	subs	r2, r2, r3
 8001224:	4651      	mov	r1, sl
 8001226:	40d0      	lsrs	r0, r2
 8001228:	4099      	lsls	r1, r3
 800122a:	0002      	movs	r2, r0
 800122c:	409c      	lsls	r4, r3
 800122e:	430a      	orrs	r2, r1
 8001230:	42b3      	cmp	r3, r6
 8001232:	da00      	bge.n	8001236 <__aeabi_dadd+0xd2>
 8001234:	e102      	b.n	800143c <__aeabi_dadd+0x2d8>
 8001236:	1b9b      	subs	r3, r3, r6
 8001238:	1c59      	adds	r1, r3, #1
 800123a:	291f      	cmp	r1, #31
 800123c:	dd00      	ble.n	8001240 <__aeabi_dadd+0xdc>
 800123e:	e0a7      	b.n	8001390 <__aeabi_dadd+0x22c>
 8001240:	2320      	movs	r3, #32
 8001242:	0010      	movs	r0, r2
 8001244:	0026      	movs	r6, r4
 8001246:	1a5b      	subs	r3, r3, r1
 8001248:	409c      	lsls	r4, r3
 800124a:	4098      	lsls	r0, r3
 800124c:	40ce      	lsrs	r6, r1
 800124e:	40ca      	lsrs	r2, r1
 8001250:	1e63      	subs	r3, r4, #1
 8001252:	419c      	sbcs	r4, r3
 8001254:	4330      	orrs	r0, r6
 8001256:	4692      	mov	sl, r2
 8001258:	2600      	movs	r6, #0
 800125a:	4304      	orrs	r4, r0
 800125c:	0763      	lsls	r3, r4, #29
 800125e:	d009      	beq.n	8001274 <__aeabi_dadd+0x110>
 8001260:	230f      	movs	r3, #15
 8001262:	4023      	ands	r3, r4
 8001264:	2b04      	cmp	r3, #4
 8001266:	d005      	beq.n	8001274 <__aeabi_dadd+0x110>
 8001268:	1d23      	adds	r3, r4, #4
 800126a:	42a3      	cmp	r3, r4
 800126c:	41a4      	sbcs	r4, r4
 800126e:	4264      	negs	r4, r4
 8001270:	44a2      	add	sl, r4
 8001272:	001c      	movs	r4, r3
 8001274:	4653      	mov	r3, sl
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	d400      	bmi.n	800127c <__aeabi_dadd+0x118>
 800127a:	e09b      	b.n	80013b4 <__aeabi_dadd+0x250>
 800127c:	4b94      	ldr	r3, [pc, #592]	; (80014d0 <__aeabi_dadd+0x36c>)
 800127e:	3601      	adds	r6, #1
 8001280:	429e      	cmp	r6, r3
 8001282:	d100      	bne.n	8001286 <__aeabi_dadd+0x122>
 8001284:	e0b8      	b.n	80013f8 <__aeabi_dadd+0x294>
 8001286:	4653      	mov	r3, sl
 8001288:	4992      	ldr	r1, [pc, #584]	; (80014d4 <__aeabi_dadd+0x370>)
 800128a:	08e4      	lsrs	r4, r4, #3
 800128c:	400b      	ands	r3, r1
 800128e:	0019      	movs	r1, r3
 8001290:	075b      	lsls	r3, r3, #29
 8001292:	4323      	orrs	r3, r4
 8001294:	0572      	lsls	r2, r6, #21
 8001296:	024c      	lsls	r4, r1, #9
 8001298:	0b24      	lsrs	r4, r4, #12
 800129a:	0d52      	lsrs	r2, r2, #21
 800129c:	0512      	lsls	r2, r2, #20
 800129e:	07ed      	lsls	r5, r5, #31
 80012a0:	4322      	orrs	r2, r4
 80012a2:	432a      	orrs	r2, r5
 80012a4:	0018      	movs	r0, r3
 80012a6:	0011      	movs	r1, r2
 80012a8:	bce0      	pop	{r5, r6, r7}
 80012aa:	46ba      	mov	sl, r7
 80012ac:	46b1      	mov	r9, r6
 80012ae:	46a8      	mov	r8, r5
 80012b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012b2:	2f00      	cmp	r7, #0
 80012b4:	d048      	beq.n	8001348 <__aeabi_dadd+0x1e4>
 80012b6:	1b97      	subs	r7, r2, r6
 80012b8:	2e00      	cmp	r6, #0
 80012ba:	d000      	beq.n	80012be <__aeabi_dadd+0x15a>
 80012bc:	e10e      	b.n	80014dc <__aeabi_dadd+0x378>
 80012be:	000c      	movs	r4, r1
 80012c0:	431c      	orrs	r4, r3
 80012c2:	d100      	bne.n	80012c6 <__aeabi_dadd+0x162>
 80012c4:	e1b7      	b.n	8001636 <__aeabi_dadd+0x4d2>
 80012c6:	1e7c      	subs	r4, r7, #1
 80012c8:	2f01      	cmp	r7, #1
 80012ca:	d100      	bne.n	80012ce <__aeabi_dadd+0x16a>
 80012cc:	e226      	b.n	800171c <__aeabi_dadd+0x5b8>
 80012ce:	4d80      	ldr	r5, [pc, #512]	; (80014d0 <__aeabi_dadd+0x36c>)
 80012d0:	42af      	cmp	r7, r5
 80012d2:	d100      	bne.n	80012d6 <__aeabi_dadd+0x172>
 80012d4:	e1d5      	b.n	8001682 <__aeabi_dadd+0x51e>
 80012d6:	0027      	movs	r7, r4
 80012d8:	e107      	b.n	80014ea <__aeabi_dadd+0x386>
 80012da:	2f00      	cmp	r7, #0
 80012dc:	dc00      	bgt.n	80012e0 <__aeabi_dadd+0x17c>
 80012de:	e0b2      	b.n	8001446 <__aeabi_dadd+0x2e2>
 80012e0:	2a00      	cmp	r2, #0
 80012e2:	d047      	beq.n	8001374 <__aeabi_dadd+0x210>
 80012e4:	4a7a      	ldr	r2, [pc, #488]	; (80014d0 <__aeabi_dadd+0x36c>)
 80012e6:	4296      	cmp	r6, r2
 80012e8:	d100      	bne.n	80012ec <__aeabi_dadd+0x188>
 80012ea:	e089      	b.n	8001400 <__aeabi_dadd+0x29c>
 80012ec:	2280      	movs	r2, #128	; 0x80
 80012ee:	464c      	mov	r4, r9
 80012f0:	0412      	lsls	r2, r2, #16
 80012f2:	4314      	orrs	r4, r2
 80012f4:	46a1      	mov	r9, r4
 80012f6:	2f38      	cmp	r7, #56	; 0x38
 80012f8:	dc6b      	bgt.n	80013d2 <__aeabi_dadd+0x26e>
 80012fa:	2f1f      	cmp	r7, #31
 80012fc:	dc00      	bgt.n	8001300 <__aeabi_dadd+0x19c>
 80012fe:	e16e      	b.n	80015de <__aeabi_dadd+0x47a>
 8001300:	003a      	movs	r2, r7
 8001302:	4648      	mov	r0, r9
 8001304:	3a20      	subs	r2, #32
 8001306:	40d0      	lsrs	r0, r2
 8001308:	4684      	mov	ip, r0
 800130a:	2f20      	cmp	r7, #32
 800130c:	d007      	beq.n	800131e <__aeabi_dadd+0x1ba>
 800130e:	2240      	movs	r2, #64	; 0x40
 8001310:	4648      	mov	r0, r9
 8001312:	1bd2      	subs	r2, r2, r7
 8001314:	4090      	lsls	r0, r2
 8001316:	0002      	movs	r2, r0
 8001318:	4640      	mov	r0, r8
 800131a:	4310      	orrs	r0, r2
 800131c:	4680      	mov	r8, r0
 800131e:	4640      	mov	r0, r8
 8001320:	1e42      	subs	r2, r0, #1
 8001322:	4190      	sbcs	r0, r2
 8001324:	4662      	mov	r2, ip
 8001326:	0004      	movs	r4, r0
 8001328:	4314      	orrs	r4, r2
 800132a:	e057      	b.n	80013dc <__aeabi_dadd+0x278>
 800132c:	464a      	mov	r2, r9
 800132e:	4302      	orrs	r2, r0
 8001330:	d100      	bne.n	8001334 <__aeabi_dadd+0x1d0>
 8001332:	e103      	b.n	800153c <__aeabi_dadd+0x3d8>
 8001334:	1e7a      	subs	r2, r7, #1
 8001336:	2f01      	cmp	r7, #1
 8001338:	d100      	bne.n	800133c <__aeabi_dadd+0x1d8>
 800133a:	e193      	b.n	8001664 <__aeabi_dadd+0x500>
 800133c:	4c64      	ldr	r4, [pc, #400]	; (80014d0 <__aeabi_dadd+0x36c>)
 800133e:	42a7      	cmp	r7, r4
 8001340:	d100      	bne.n	8001344 <__aeabi_dadd+0x1e0>
 8001342:	e18a      	b.n	800165a <__aeabi_dadd+0x4f6>
 8001344:	0017      	movs	r7, r2
 8001346:	e73b      	b.n	80011c0 <__aeabi_dadd+0x5c>
 8001348:	4c63      	ldr	r4, [pc, #396]	; (80014d8 <__aeabi_dadd+0x374>)
 800134a:	1c72      	adds	r2, r6, #1
 800134c:	4222      	tst	r2, r4
 800134e:	d000      	beq.n	8001352 <__aeabi_dadd+0x1ee>
 8001350:	e0e0      	b.n	8001514 <__aeabi_dadd+0x3b0>
 8001352:	000a      	movs	r2, r1
 8001354:	431a      	orrs	r2, r3
 8001356:	2e00      	cmp	r6, #0
 8001358:	d000      	beq.n	800135c <__aeabi_dadd+0x1f8>
 800135a:	e174      	b.n	8001646 <__aeabi_dadd+0x4e2>
 800135c:	2a00      	cmp	r2, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_dadd+0x1fe>
 8001360:	e1d0      	b.n	8001704 <__aeabi_dadd+0x5a0>
 8001362:	464a      	mov	r2, r9
 8001364:	4302      	orrs	r2, r0
 8001366:	d000      	beq.n	800136a <__aeabi_dadd+0x206>
 8001368:	e1e3      	b.n	8001732 <__aeabi_dadd+0x5ce>
 800136a:	074a      	lsls	r2, r1, #29
 800136c:	08db      	lsrs	r3, r3, #3
 800136e:	4313      	orrs	r3, r2
 8001370:	08c9      	lsrs	r1, r1, #3
 8001372:	e029      	b.n	80013c8 <__aeabi_dadd+0x264>
 8001374:	464a      	mov	r2, r9
 8001376:	4302      	orrs	r2, r0
 8001378:	d100      	bne.n	800137c <__aeabi_dadd+0x218>
 800137a:	e17d      	b.n	8001678 <__aeabi_dadd+0x514>
 800137c:	1e7a      	subs	r2, r7, #1
 800137e:	2f01      	cmp	r7, #1
 8001380:	d100      	bne.n	8001384 <__aeabi_dadd+0x220>
 8001382:	e0e0      	b.n	8001546 <__aeabi_dadd+0x3e2>
 8001384:	4c52      	ldr	r4, [pc, #328]	; (80014d0 <__aeabi_dadd+0x36c>)
 8001386:	42a7      	cmp	r7, r4
 8001388:	d100      	bne.n	800138c <__aeabi_dadd+0x228>
 800138a:	e166      	b.n	800165a <__aeabi_dadd+0x4f6>
 800138c:	0017      	movs	r7, r2
 800138e:	e7b2      	b.n	80012f6 <__aeabi_dadd+0x192>
 8001390:	0010      	movs	r0, r2
 8001392:	3b1f      	subs	r3, #31
 8001394:	40d8      	lsrs	r0, r3
 8001396:	2920      	cmp	r1, #32
 8001398:	d003      	beq.n	80013a2 <__aeabi_dadd+0x23e>
 800139a:	2340      	movs	r3, #64	; 0x40
 800139c:	1a5b      	subs	r3, r3, r1
 800139e:	409a      	lsls	r2, r3
 80013a0:	4314      	orrs	r4, r2
 80013a2:	1e63      	subs	r3, r4, #1
 80013a4:	419c      	sbcs	r4, r3
 80013a6:	2300      	movs	r3, #0
 80013a8:	2600      	movs	r6, #0
 80013aa:	469a      	mov	sl, r3
 80013ac:	4304      	orrs	r4, r0
 80013ae:	0763      	lsls	r3, r4, #29
 80013b0:	d000      	beq.n	80013b4 <__aeabi_dadd+0x250>
 80013b2:	e755      	b.n	8001260 <__aeabi_dadd+0xfc>
 80013b4:	4652      	mov	r2, sl
 80013b6:	08e3      	lsrs	r3, r4, #3
 80013b8:	0752      	lsls	r2, r2, #29
 80013ba:	4313      	orrs	r3, r2
 80013bc:	4652      	mov	r2, sl
 80013be:	0037      	movs	r7, r6
 80013c0:	08d1      	lsrs	r1, r2, #3
 80013c2:	4a43      	ldr	r2, [pc, #268]	; (80014d0 <__aeabi_dadd+0x36c>)
 80013c4:	4297      	cmp	r7, r2
 80013c6:	d01f      	beq.n	8001408 <__aeabi_dadd+0x2a4>
 80013c8:	0309      	lsls	r1, r1, #12
 80013ca:	057a      	lsls	r2, r7, #21
 80013cc:	0b0c      	lsrs	r4, r1, #12
 80013ce:	0d52      	lsrs	r2, r2, #21
 80013d0:	e764      	b.n	800129c <__aeabi_dadd+0x138>
 80013d2:	4642      	mov	r2, r8
 80013d4:	464c      	mov	r4, r9
 80013d6:	4314      	orrs	r4, r2
 80013d8:	1e62      	subs	r2, r4, #1
 80013da:	4194      	sbcs	r4, r2
 80013dc:	18e4      	adds	r4, r4, r3
 80013de:	429c      	cmp	r4, r3
 80013e0:	4192      	sbcs	r2, r2
 80013e2:	4252      	negs	r2, r2
 80013e4:	4692      	mov	sl, r2
 80013e6:	448a      	add	sl, r1
 80013e8:	4653      	mov	r3, sl
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	d5df      	bpl.n	80013ae <__aeabi_dadd+0x24a>
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <__aeabi_dadd+0x36c>)
 80013f0:	3601      	adds	r6, #1
 80013f2:	429e      	cmp	r6, r3
 80013f4:	d000      	beq.n	80013f8 <__aeabi_dadd+0x294>
 80013f6:	e0b3      	b.n	8001560 <__aeabi_dadd+0x3fc>
 80013f8:	0032      	movs	r2, r6
 80013fa:	2400      	movs	r4, #0
 80013fc:	2300      	movs	r3, #0
 80013fe:	e74d      	b.n	800129c <__aeabi_dadd+0x138>
 8001400:	074a      	lsls	r2, r1, #29
 8001402:	08db      	lsrs	r3, r3, #3
 8001404:	4313      	orrs	r3, r2
 8001406:	08c9      	lsrs	r1, r1, #3
 8001408:	001a      	movs	r2, r3
 800140a:	430a      	orrs	r2, r1
 800140c:	d100      	bne.n	8001410 <__aeabi_dadd+0x2ac>
 800140e:	e200      	b.n	8001812 <__aeabi_dadd+0x6ae>
 8001410:	2480      	movs	r4, #128	; 0x80
 8001412:	0324      	lsls	r4, r4, #12
 8001414:	430c      	orrs	r4, r1
 8001416:	0324      	lsls	r4, r4, #12
 8001418:	4a2d      	ldr	r2, [pc, #180]	; (80014d0 <__aeabi_dadd+0x36c>)
 800141a:	0b24      	lsrs	r4, r4, #12
 800141c:	e73e      	b.n	800129c <__aeabi_dadd+0x138>
 800141e:	0020      	movs	r0, r4
 8001420:	f001 fdb6 	bl	8002f90 <__clzsi2>
 8001424:	0003      	movs	r3, r0
 8001426:	3318      	adds	r3, #24
 8001428:	2b1f      	cmp	r3, #31
 800142a:	dc00      	bgt.n	800142e <__aeabi_dadd+0x2ca>
 800142c:	e6f7      	b.n	800121e <__aeabi_dadd+0xba>
 800142e:	0022      	movs	r2, r4
 8001430:	3808      	subs	r0, #8
 8001432:	4082      	lsls	r2, r0
 8001434:	2400      	movs	r4, #0
 8001436:	42b3      	cmp	r3, r6
 8001438:	db00      	blt.n	800143c <__aeabi_dadd+0x2d8>
 800143a:	e6fc      	b.n	8001236 <__aeabi_dadd+0xd2>
 800143c:	1af6      	subs	r6, r6, r3
 800143e:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <__aeabi_dadd+0x370>)
 8001440:	401a      	ands	r2, r3
 8001442:	4692      	mov	sl, r2
 8001444:	e70a      	b.n	800125c <__aeabi_dadd+0xf8>
 8001446:	2f00      	cmp	r7, #0
 8001448:	d02b      	beq.n	80014a2 <__aeabi_dadd+0x33e>
 800144a:	1b97      	subs	r7, r2, r6
 800144c:	2e00      	cmp	r6, #0
 800144e:	d100      	bne.n	8001452 <__aeabi_dadd+0x2ee>
 8001450:	e0b8      	b.n	80015c4 <__aeabi_dadd+0x460>
 8001452:	4c1f      	ldr	r4, [pc, #124]	; (80014d0 <__aeabi_dadd+0x36c>)
 8001454:	42a2      	cmp	r2, r4
 8001456:	d100      	bne.n	800145a <__aeabi_dadd+0x2f6>
 8001458:	e11c      	b.n	8001694 <__aeabi_dadd+0x530>
 800145a:	2480      	movs	r4, #128	; 0x80
 800145c:	0424      	lsls	r4, r4, #16
 800145e:	4321      	orrs	r1, r4
 8001460:	2f38      	cmp	r7, #56	; 0x38
 8001462:	dd00      	ble.n	8001466 <__aeabi_dadd+0x302>
 8001464:	e11e      	b.n	80016a4 <__aeabi_dadd+0x540>
 8001466:	2f1f      	cmp	r7, #31
 8001468:	dd00      	ble.n	800146c <__aeabi_dadd+0x308>
 800146a:	e19e      	b.n	80017aa <__aeabi_dadd+0x646>
 800146c:	2620      	movs	r6, #32
 800146e:	000c      	movs	r4, r1
 8001470:	1bf6      	subs	r6, r6, r7
 8001472:	0018      	movs	r0, r3
 8001474:	40b3      	lsls	r3, r6
 8001476:	40b4      	lsls	r4, r6
 8001478:	40f8      	lsrs	r0, r7
 800147a:	1e5e      	subs	r6, r3, #1
 800147c:	41b3      	sbcs	r3, r6
 800147e:	40f9      	lsrs	r1, r7
 8001480:	4304      	orrs	r4, r0
 8001482:	431c      	orrs	r4, r3
 8001484:	4489      	add	r9, r1
 8001486:	4444      	add	r4, r8
 8001488:	4544      	cmp	r4, r8
 800148a:	419b      	sbcs	r3, r3
 800148c:	425b      	negs	r3, r3
 800148e:	444b      	add	r3, r9
 8001490:	469a      	mov	sl, r3
 8001492:	0016      	movs	r6, r2
 8001494:	e7a8      	b.n	80013e8 <__aeabi_dadd+0x284>
 8001496:	4642      	mov	r2, r8
 8001498:	464c      	mov	r4, r9
 800149a:	4314      	orrs	r4, r2
 800149c:	1e62      	subs	r2, r4, #1
 800149e:	4194      	sbcs	r4, r2
 80014a0:	e6a6      	b.n	80011f0 <__aeabi_dadd+0x8c>
 80014a2:	4c0d      	ldr	r4, [pc, #52]	; (80014d8 <__aeabi_dadd+0x374>)
 80014a4:	1c72      	adds	r2, r6, #1
 80014a6:	4222      	tst	r2, r4
 80014a8:	d000      	beq.n	80014ac <__aeabi_dadd+0x348>
 80014aa:	e0a8      	b.n	80015fe <__aeabi_dadd+0x49a>
 80014ac:	000a      	movs	r2, r1
 80014ae:	431a      	orrs	r2, r3
 80014b0:	2e00      	cmp	r6, #0
 80014b2:	d000      	beq.n	80014b6 <__aeabi_dadd+0x352>
 80014b4:	e10a      	b.n	80016cc <__aeabi_dadd+0x568>
 80014b6:	2a00      	cmp	r2, #0
 80014b8:	d100      	bne.n	80014bc <__aeabi_dadd+0x358>
 80014ba:	e15e      	b.n	800177a <__aeabi_dadd+0x616>
 80014bc:	464a      	mov	r2, r9
 80014be:	4302      	orrs	r2, r0
 80014c0:	d000      	beq.n	80014c4 <__aeabi_dadd+0x360>
 80014c2:	e161      	b.n	8001788 <__aeabi_dadd+0x624>
 80014c4:	074a      	lsls	r2, r1, #29
 80014c6:	08db      	lsrs	r3, r3, #3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	08c9      	lsrs	r1, r1, #3
 80014cc:	e77c      	b.n	80013c8 <__aeabi_dadd+0x264>
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	000007ff 	.word	0x000007ff
 80014d4:	ff7fffff 	.word	0xff7fffff
 80014d8:	000007fe 	.word	0x000007fe
 80014dc:	4ccf      	ldr	r4, [pc, #828]	; (800181c <__aeabi_dadd+0x6b8>)
 80014de:	42a2      	cmp	r2, r4
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dadd+0x380>
 80014e2:	e0ce      	b.n	8001682 <__aeabi_dadd+0x51e>
 80014e4:	2480      	movs	r4, #128	; 0x80
 80014e6:	0424      	lsls	r4, r4, #16
 80014e8:	4321      	orrs	r1, r4
 80014ea:	2f38      	cmp	r7, #56	; 0x38
 80014ec:	dc5b      	bgt.n	80015a6 <__aeabi_dadd+0x442>
 80014ee:	2f1f      	cmp	r7, #31
 80014f0:	dd00      	ble.n	80014f4 <__aeabi_dadd+0x390>
 80014f2:	e0dc      	b.n	80016ae <__aeabi_dadd+0x54a>
 80014f4:	2520      	movs	r5, #32
 80014f6:	000c      	movs	r4, r1
 80014f8:	1bed      	subs	r5, r5, r7
 80014fa:	001e      	movs	r6, r3
 80014fc:	40ab      	lsls	r3, r5
 80014fe:	40ac      	lsls	r4, r5
 8001500:	40fe      	lsrs	r6, r7
 8001502:	1e5d      	subs	r5, r3, #1
 8001504:	41ab      	sbcs	r3, r5
 8001506:	4334      	orrs	r4, r6
 8001508:	40f9      	lsrs	r1, r7
 800150a:	431c      	orrs	r4, r3
 800150c:	464b      	mov	r3, r9
 800150e:	1a5b      	subs	r3, r3, r1
 8001510:	4699      	mov	r9, r3
 8001512:	e04c      	b.n	80015ae <__aeabi_dadd+0x44a>
 8001514:	464a      	mov	r2, r9
 8001516:	1a1c      	subs	r4, r3, r0
 8001518:	1a88      	subs	r0, r1, r2
 800151a:	42a3      	cmp	r3, r4
 800151c:	4192      	sbcs	r2, r2
 800151e:	4252      	negs	r2, r2
 8001520:	4692      	mov	sl, r2
 8001522:	0002      	movs	r2, r0
 8001524:	4650      	mov	r0, sl
 8001526:	1a12      	subs	r2, r2, r0
 8001528:	4692      	mov	sl, r2
 800152a:	0212      	lsls	r2, r2, #8
 800152c:	d478      	bmi.n	8001620 <__aeabi_dadd+0x4bc>
 800152e:	4653      	mov	r3, sl
 8001530:	4323      	orrs	r3, r4
 8001532:	d000      	beq.n	8001536 <__aeabi_dadd+0x3d2>
 8001534:	e66a      	b.n	800120c <__aeabi_dadd+0xa8>
 8001536:	2100      	movs	r1, #0
 8001538:	2500      	movs	r5, #0
 800153a:	e745      	b.n	80013c8 <__aeabi_dadd+0x264>
 800153c:	074a      	lsls	r2, r1, #29
 800153e:	08db      	lsrs	r3, r3, #3
 8001540:	4313      	orrs	r3, r2
 8001542:	08c9      	lsrs	r1, r1, #3
 8001544:	e73d      	b.n	80013c2 <__aeabi_dadd+0x25e>
 8001546:	181c      	adds	r4, r3, r0
 8001548:	429c      	cmp	r4, r3
 800154a:	419b      	sbcs	r3, r3
 800154c:	4449      	add	r1, r9
 800154e:	468a      	mov	sl, r1
 8001550:	425b      	negs	r3, r3
 8001552:	449a      	add	sl, r3
 8001554:	4653      	mov	r3, sl
 8001556:	2601      	movs	r6, #1
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	d400      	bmi.n	800155e <__aeabi_dadd+0x3fa>
 800155c:	e727      	b.n	80013ae <__aeabi_dadd+0x24a>
 800155e:	2602      	movs	r6, #2
 8001560:	4652      	mov	r2, sl
 8001562:	4baf      	ldr	r3, [pc, #700]	; (8001820 <__aeabi_dadd+0x6bc>)
 8001564:	2101      	movs	r1, #1
 8001566:	401a      	ands	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	4021      	ands	r1, r4
 800156c:	0862      	lsrs	r2, r4, #1
 800156e:	430a      	orrs	r2, r1
 8001570:	07dc      	lsls	r4, r3, #31
 8001572:	085b      	lsrs	r3, r3, #1
 8001574:	469a      	mov	sl, r3
 8001576:	4314      	orrs	r4, r2
 8001578:	e670      	b.n	800125c <__aeabi_dadd+0xf8>
 800157a:	003a      	movs	r2, r7
 800157c:	464c      	mov	r4, r9
 800157e:	3a20      	subs	r2, #32
 8001580:	40d4      	lsrs	r4, r2
 8001582:	46a4      	mov	ip, r4
 8001584:	2f20      	cmp	r7, #32
 8001586:	d007      	beq.n	8001598 <__aeabi_dadd+0x434>
 8001588:	2240      	movs	r2, #64	; 0x40
 800158a:	4648      	mov	r0, r9
 800158c:	1bd2      	subs	r2, r2, r7
 800158e:	4090      	lsls	r0, r2
 8001590:	0002      	movs	r2, r0
 8001592:	4640      	mov	r0, r8
 8001594:	4310      	orrs	r0, r2
 8001596:	4680      	mov	r8, r0
 8001598:	4640      	mov	r0, r8
 800159a:	1e42      	subs	r2, r0, #1
 800159c:	4190      	sbcs	r0, r2
 800159e:	4662      	mov	r2, ip
 80015a0:	0004      	movs	r4, r0
 80015a2:	4314      	orrs	r4, r2
 80015a4:	e624      	b.n	80011f0 <__aeabi_dadd+0x8c>
 80015a6:	4319      	orrs	r1, r3
 80015a8:	000c      	movs	r4, r1
 80015aa:	1e63      	subs	r3, r4, #1
 80015ac:	419c      	sbcs	r4, r3
 80015ae:	4643      	mov	r3, r8
 80015b0:	1b1c      	subs	r4, r3, r4
 80015b2:	45a0      	cmp	r8, r4
 80015b4:	419b      	sbcs	r3, r3
 80015b6:	4649      	mov	r1, r9
 80015b8:	425b      	negs	r3, r3
 80015ba:	1acb      	subs	r3, r1, r3
 80015bc:	469a      	mov	sl, r3
 80015be:	4665      	mov	r5, ip
 80015c0:	0016      	movs	r6, r2
 80015c2:	e61b      	b.n	80011fc <__aeabi_dadd+0x98>
 80015c4:	000c      	movs	r4, r1
 80015c6:	431c      	orrs	r4, r3
 80015c8:	d100      	bne.n	80015cc <__aeabi_dadd+0x468>
 80015ca:	e0c7      	b.n	800175c <__aeabi_dadd+0x5f8>
 80015cc:	1e7c      	subs	r4, r7, #1
 80015ce:	2f01      	cmp	r7, #1
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dadd+0x470>
 80015d2:	e0f9      	b.n	80017c8 <__aeabi_dadd+0x664>
 80015d4:	4e91      	ldr	r6, [pc, #580]	; (800181c <__aeabi_dadd+0x6b8>)
 80015d6:	42b7      	cmp	r7, r6
 80015d8:	d05c      	beq.n	8001694 <__aeabi_dadd+0x530>
 80015da:	0027      	movs	r7, r4
 80015dc:	e740      	b.n	8001460 <__aeabi_dadd+0x2fc>
 80015de:	2220      	movs	r2, #32
 80015e0:	464c      	mov	r4, r9
 80015e2:	4640      	mov	r0, r8
 80015e4:	1bd2      	subs	r2, r2, r7
 80015e6:	4094      	lsls	r4, r2
 80015e8:	40f8      	lsrs	r0, r7
 80015ea:	4304      	orrs	r4, r0
 80015ec:	4640      	mov	r0, r8
 80015ee:	4090      	lsls	r0, r2
 80015f0:	1e42      	subs	r2, r0, #1
 80015f2:	4190      	sbcs	r0, r2
 80015f4:	464a      	mov	r2, r9
 80015f6:	40fa      	lsrs	r2, r7
 80015f8:	4304      	orrs	r4, r0
 80015fa:	1889      	adds	r1, r1, r2
 80015fc:	e6ee      	b.n	80013dc <__aeabi_dadd+0x278>
 80015fe:	4c87      	ldr	r4, [pc, #540]	; (800181c <__aeabi_dadd+0x6b8>)
 8001600:	42a2      	cmp	r2, r4
 8001602:	d100      	bne.n	8001606 <__aeabi_dadd+0x4a2>
 8001604:	e6f9      	b.n	80013fa <__aeabi_dadd+0x296>
 8001606:	1818      	adds	r0, r3, r0
 8001608:	4298      	cmp	r0, r3
 800160a:	419b      	sbcs	r3, r3
 800160c:	4449      	add	r1, r9
 800160e:	425b      	negs	r3, r3
 8001610:	18cb      	adds	r3, r1, r3
 8001612:	07dc      	lsls	r4, r3, #31
 8001614:	0840      	lsrs	r0, r0, #1
 8001616:	085b      	lsrs	r3, r3, #1
 8001618:	469a      	mov	sl, r3
 800161a:	0016      	movs	r6, r2
 800161c:	4304      	orrs	r4, r0
 800161e:	e6c6      	b.n	80013ae <__aeabi_dadd+0x24a>
 8001620:	4642      	mov	r2, r8
 8001622:	1ad4      	subs	r4, r2, r3
 8001624:	45a0      	cmp	r8, r4
 8001626:	4180      	sbcs	r0, r0
 8001628:	464b      	mov	r3, r9
 800162a:	4240      	negs	r0, r0
 800162c:	1a59      	subs	r1, r3, r1
 800162e:	1a0b      	subs	r3, r1, r0
 8001630:	469a      	mov	sl, r3
 8001632:	4665      	mov	r5, ip
 8001634:	e5ea      	b.n	800120c <__aeabi_dadd+0xa8>
 8001636:	464b      	mov	r3, r9
 8001638:	464a      	mov	r2, r9
 800163a:	08c0      	lsrs	r0, r0, #3
 800163c:	075b      	lsls	r3, r3, #29
 800163e:	4665      	mov	r5, ip
 8001640:	4303      	orrs	r3, r0
 8001642:	08d1      	lsrs	r1, r2, #3
 8001644:	e6bd      	b.n	80013c2 <__aeabi_dadd+0x25e>
 8001646:	2a00      	cmp	r2, #0
 8001648:	d000      	beq.n	800164c <__aeabi_dadd+0x4e8>
 800164a:	e08e      	b.n	800176a <__aeabi_dadd+0x606>
 800164c:	464b      	mov	r3, r9
 800164e:	4303      	orrs	r3, r0
 8001650:	d117      	bne.n	8001682 <__aeabi_dadd+0x51e>
 8001652:	2180      	movs	r1, #128	; 0x80
 8001654:	2500      	movs	r5, #0
 8001656:	0309      	lsls	r1, r1, #12
 8001658:	e6da      	b.n	8001410 <__aeabi_dadd+0x2ac>
 800165a:	074a      	lsls	r2, r1, #29
 800165c:	08db      	lsrs	r3, r3, #3
 800165e:	4313      	orrs	r3, r2
 8001660:	08c9      	lsrs	r1, r1, #3
 8001662:	e6d1      	b.n	8001408 <__aeabi_dadd+0x2a4>
 8001664:	1a1c      	subs	r4, r3, r0
 8001666:	464a      	mov	r2, r9
 8001668:	42a3      	cmp	r3, r4
 800166a:	419b      	sbcs	r3, r3
 800166c:	1a89      	subs	r1, r1, r2
 800166e:	425b      	negs	r3, r3
 8001670:	1acb      	subs	r3, r1, r3
 8001672:	469a      	mov	sl, r3
 8001674:	2601      	movs	r6, #1
 8001676:	e5c1      	b.n	80011fc <__aeabi_dadd+0x98>
 8001678:	074a      	lsls	r2, r1, #29
 800167a:	08db      	lsrs	r3, r3, #3
 800167c:	4313      	orrs	r3, r2
 800167e:	08c9      	lsrs	r1, r1, #3
 8001680:	e69f      	b.n	80013c2 <__aeabi_dadd+0x25e>
 8001682:	4643      	mov	r3, r8
 8001684:	08d8      	lsrs	r0, r3, #3
 8001686:	464b      	mov	r3, r9
 8001688:	464a      	mov	r2, r9
 800168a:	075b      	lsls	r3, r3, #29
 800168c:	4665      	mov	r5, ip
 800168e:	4303      	orrs	r3, r0
 8001690:	08d1      	lsrs	r1, r2, #3
 8001692:	e6b9      	b.n	8001408 <__aeabi_dadd+0x2a4>
 8001694:	4643      	mov	r3, r8
 8001696:	08d8      	lsrs	r0, r3, #3
 8001698:	464b      	mov	r3, r9
 800169a:	464a      	mov	r2, r9
 800169c:	075b      	lsls	r3, r3, #29
 800169e:	4303      	orrs	r3, r0
 80016a0:	08d1      	lsrs	r1, r2, #3
 80016a2:	e6b1      	b.n	8001408 <__aeabi_dadd+0x2a4>
 80016a4:	4319      	orrs	r1, r3
 80016a6:	000c      	movs	r4, r1
 80016a8:	1e63      	subs	r3, r4, #1
 80016aa:	419c      	sbcs	r4, r3
 80016ac:	e6eb      	b.n	8001486 <__aeabi_dadd+0x322>
 80016ae:	003c      	movs	r4, r7
 80016b0:	000d      	movs	r5, r1
 80016b2:	3c20      	subs	r4, #32
 80016b4:	40e5      	lsrs	r5, r4
 80016b6:	2f20      	cmp	r7, #32
 80016b8:	d003      	beq.n	80016c2 <__aeabi_dadd+0x55e>
 80016ba:	2440      	movs	r4, #64	; 0x40
 80016bc:	1be4      	subs	r4, r4, r7
 80016be:	40a1      	lsls	r1, r4
 80016c0:	430b      	orrs	r3, r1
 80016c2:	001c      	movs	r4, r3
 80016c4:	1e63      	subs	r3, r4, #1
 80016c6:	419c      	sbcs	r4, r3
 80016c8:	432c      	orrs	r4, r5
 80016ca:	e770      	b.n	80015ae <__aeabi_dadd+0x44a>
 80016cc:	2a00      	cmp	r2, #0
 80016ce:	d0e1      	beq.n	8001694 <__aeabi_dadd+0x530>
 80016d0:	464a      	mov	r2, r9
 80016d2:	4302      	orrs	r2, r0
 80016d4:	d0c1      	beq.n	800165a <__aeabi_dadd+0x4f6>
 80016d6:	074a      	lsls	r2, r1, #29
 80016d8:	08db      	lsrs	r3, r3, #3
 80016da:	4313      	orrs	r3, r2
 80016dc:	2280      	movs	r2, #128	; 0x80
 80016de:	08c9      	lsrs	r1, r1, #3
 80016e0:	0312      	lsls	r2, r2, #12
 80016e2:	4211      	tst	r1, r2
 80016e4:	d008      	beq.n	80016f8 <__aeabi_dadd+0x594>
 80016e6:	4648      	mov	r0, r9
 80016e8:	08c4      	lsrs	r4, r0, #3
 80016ea:	4214      	tst	r4, r2
 80016ec:	d104      	bne.n	80016f8 <__aeabi_dadd+0x594>
 80016ee:	4643      	mov	r3, r8
 80016f0:	0021      	movs	r1, r4
 80016f2:	08db      	lsrs	r3, r3, #3
 80016f4:	0742      	lsls	r2, r0, #29
 80016f6:	4313      	orrs	r3, r2
 80016f8:	0f5a      	lsrs	r2, r3, #29
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	0752      	lsls	r2, r2, #29
 80016fe:	08db      	lsrs	r3, r3, #3
 8001700:	4313      	orrs	r3, r2
 8001702:	e681      	b.n	8001408 <__aeabi_dadd+0x2a4>
 8001704:	464b      	mov	r3, r9
 8001706:	4303      	orrs	r3, r0
 8001708:	d100      	bne.n	800170c <__aeabi_dadd+0x5a8>
 800170a:	e714      	b.n	8001536 <__aeabi_dadd+0x3d2>
 800170c:	464b      	mov	r3, r9
 800170e:	464a      	mov	r2, r9
 8001710:	08c0      	lsrs	r0, r0, #3
 8001712:	075b      	lsls	r3, r3, #29
 8001714:	4665      	mov	r5, ip
 8001716:	4303      	orrs	r3, r0
 8001718:	08d1      	lsrs	r1, r2, #3
 800171a:	e655      	b.n	80013c8 <__aeabi_dadd+0x264>
 800171c:	1ac4      	subs	r4, r0, r3
 800171e:	45a0      	cmp	r8, r4
 8001720:	4180      	sbcs	r0, r0
 8001722:	464b      	mov	r3, r9
 8001724:	4240      	negs	r0, r0
 8001726:	1a59      	subs	r1, r3, r1
 8001728:	1a0b      	subs	r3, r1, r0
 800172a:	469a      	mov	sl, r3
 800172c:	4665      	mov	r5, ip
 800172e:	2601      	movs	r6, #1
 8001730:	e564      	b.n	80011fc <__aeabi_dadd+0x98>
 8001732:	1a1c      	subs	r4, r3, r0
 8001734:	464a      	mov	r2, r9
 8001736:	42a3      	cmp	r3, r4
 8001738:	4180      	sbcs	r0, r0
 800173a:	1a8a      	subs	r2, r1, r2
 800173c:	4240      	negs	r0, r0
 800173e:	1a12      	subs	r2, r2, r0
 8001740:	4692      	mov	sl, r2
 8001742:	0212      	lsls	r2, r2, #8
 8001744:	d549      	bpl.n	80017da <__aeabi_dadd+0x676>
 8001746:	4642      	mov	r2, r8
 8001748:	1ad4      	subs	r4, r2, r3
 800174a:	45a0      	cmp	r8, r4
 800174c:	4180      	sbcs	r0, r0
 800174e:	464b      	mov	r3, r9
 8001750:	4240      	negs	r0, r0
 8001752:	1a59      	subs	r1, r3, r1
 8001754:	1a0b      	subs	r3, r1, r0
 8001756:	469a      	mov	sl, r3
 8001758:	4665      	mov	r5, ip
 800175a:	e57f      	b.n	800125c <__aeabi_dadd+0xf8>
 800175c:	464b      	mov	r3, r9
 800175e:	464a      	mov	r2, r9
 8001760:	08c0      	lsrs	r0, r0, #3
 8001762:	075b      	lsls	r3, r3, #29
 8001764:	4303      	orrs	r3, r0
 8001766:	08d1      	lsrs	r1, r2, #3
 8001768:	e62b      	b.n	80013c2 <__aeabi_dadd+0x25e>
 800176a:	464a      	mov	r2, r9
 800176c:	08db      	lsrs	r3, r3, #3
 800176e:	4302      	orrs	r2, r0
 8001770:	d138      	bne.n	80017e4 <__aeabi_dadd+0x680>
 8001772:	074a      	lsls	r2, r1, #29
 8001774:	4313      	orrs	r3, r2
 8001776:	08c9      	lsrs	r1, r1, #3
 8001778:	e646      	b.n	8001408 <__aeabi_dadd+0x2a4>
 800177a:	464b      	mov	r3, r9
 800177c:	464a      	mov	r2, r9
 800177e:	08c0      	lsrs	r0, r0, #3
 8001780:	075b      	lsls	r3, r3, #29
 8001782:	4303      	orrs	r3, r0
 8001784:	08d1      	lsrs	r1, r2, #3
 8001786:	e61f      	b.n	80013c8 <__aeabi_dadd+0x264>
 8001788:	181c      	adds	r4, r3, r0
 800178a:	429c      	cmp	r4, r3
 800178c:	419b      	sbcs	r3, r3
 800178e:	4449      	add	r1, r9
 8001790:	468a      	mov	sl, r1
 8001792:	425b      	negs	r3, r3
 8001794:	449a      	add	sl, r3
 8001796:	4653      	mov	r3, sl
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	d400      	bmi.n	800179e <__aeabi_dadd+0x63a>
 800179c:	e607      	b.n	80013ae <__aeabi_dadd+0x24a>
 800179e:	4652      	mov	r2, sl
 80017a0:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <__aeabi_dadd+0x6bc>)
 80017a2:	2601      	movs	r6, #1
 80017a4:	401a      	ands	r2, r3
 80017a6:	4692      	mov	sl, r2
 80017a8:	e601      	b.n	80013ae <__aeabi_dadd+0x24a>
 80017aa:	003c      	movs	r4, r7
 80017ac:	000e      	movs	r6, r1
 80017ae:	3c20      	subs	r4, #32
 80017b0:	40e6      	lsrs	r6, r4
 80017b2:	2f20      	cmp	r7, #32
 80017b4:	d003      	beq.n	80017be <__aeabi_dadd+0x65a>
 80017b6:	2440      	movs	r4, #64	; 0x40
 80017b8:	1be4      	subs	r4, r4, r7
 80017ba:	40a1      	lsls	r1, r4
 80017bc:	430b      	orrs	r3, r1
 80017be:	001c      	movs	r4, r3
 80017c0:	1e63      	subs	r3, r4, #1
 80017c2:	419c      	sbcs	r4, r3
 80017c4:	4334      	orrs	r4, r6
 80017c6:	e65e      	b.n	8001486 <__aeabi_dadd+0x322>
 80017c8:	4443      	add	r3, r8
 80017ca:	4283      	cmp	r3, r0
 80017cc:	4180      	sbcs	r0, r0
 80017ce:	4449      	add	r1, r9
 80017d0:	468a      	mov	sl, r1
 80017d2:	4240      	negs	r0, r0
 80017d4:	001c      	movs	r4, r3
 80017d6:	4482      	add	sl, r0
 80017d8:	e6bc      	b.n	8001554 <__aeabi_dadd+0x3f0>
 80017da:	4653      	mov	r3, sl
 80017dc:	4323      	orrs	r3, r4
 80017de:	d100      	bne.n	80017e2 <__aeabi_dadd+0x67e>
 80017e0:	e6a9      	b.n	8001536 <__aeabi_dadd+0x3d2>
 80017e2:	e5e4      	b.n	80013ae <__aeabi_dadd+0x24a>
 80017e4:	074a      	lsls	r2, r1, #29
 80017e6:	4313      	orrs	r3, r2
 80017e8:	2280      	movs	r2, #128	; 0x80
 80017ea:	08c9      	lsrs	r1, r1, #3
 80017ec:	0312      	lsls	r2, r2, #12
 80017ee:	4211      	tst	r1, r2
 80017f0:	d009      	beq.n	8001806 <__aeabi_dadd+0x6a2>
 80017f2:	4648      	mov	r0, r9
 80017f4:	08c4      	lsrs	r4, r0, #3
 80017f6:	4214      	tst	r4, r2
 80017f8:	d105      	bne.n	8001806 <__aeabi_dadd+0x6a2>
 80017fa:	4643      	mov	r3, r8
 80017fc:	4665      	mov	r5, ip
 80017fe:	0021      	movs	r1, r4
 8001800:	08db      	lsrs	r3, r3, #3
 8001802:	0742      	lsls	r2, r0, #29
 8001804:	4313      	orrs	r3, r2
 8001806:	0f5a      	lsrs	r2, r3, #29
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	08db      	lsrs	r3, r3, #3
 800180c:	0752      	lsls	r2, r2, #29
 800180e:	4313      	orrs	r3, r2
 8001810:	e5fa      	b.n	8001408 <__aeabi_dadd+0x2a4>
 8001812:	2300      	movs	r3, #0
 8001814:	4a01      	ldr	r2, [pc, #4]	; (800181c <__aeabi_dadd+0x6b8>)
 8001816:	001c      	movs	r4, r3
 8001818:	e540      	b.n	800129c <__aeabi_dadd+0x138>
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	000007ff 	.word	0x000007ff
 8001820:	ff7fffff 	.word	0xff7fffff

08001824 <__aeabi_ddiv>:
 8001824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001826:	4657      	mov	r7, sl
 8001828:	464e      	mov	r6, r9
 800182a:	4645      	mov	r5, r8
 800182c:	46de      	mov	lr, fp
 800182e:	b5e0      	push	{r5, r6, r7, lr}
 8001830:	030c      	lsls	r4, r1, #12
 8001832:	001f      	movs	r7, r3
 8001834:	004b      	lsls	r3, r1, #1
 8001836:	4681      	mov	r9, r0
 8001838:	4692      	mov	sl, r2
 800183a:	0005      	movs	r5, r0
 800183c:	b085      	sub	sp, #20
 800183e:	0b24      	lsrs	r4, r4, #12
 8001840:	0d5b      	lsrs	r3, r3, #21
 8001842:	0fce      	lsrs	r6, r1, #31
 8001844:	2b00      	cmp	r3, #0
 8001846:	d100      	bne.n	800184a <__aeabi_ddiv+0x26>
 8001848:	e152      	b.n	8001af0 <__aeabi_ddiv+0x2cc>
 800184a:	4ad2      	ldr	r2, [pc, #840]	; (8001b94 <__aeabi_ddiv+0x370>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d100      	bne.n	8001852 <__aeabi_ddiv+0x2e>
 8001850:	e16e      	b.n	8001b30 <__aeabi_ddiv+0x30c>
 8001852:	0f42      	lsrs	r2, r0, #29
 8001854:	00e4      	lsls	r4, r4, #3
 8001856:	4314      	orrs	r4, r2
 8001858:	2280      	movs	r2, #128	; 0x80
 800185a:	0412      	lsls	r2, r2, #16
 800185c:	4322      	orrs	r2, r4
 800185e:	4690      	mov	r8, r2
 8001860:	4acd      	ldr	r2, [pc, #820]	; (8001b98 <__aeabi_ddiv+0x374>)
 8001862:	00c5      	lsls	r5, r0, #3
 8001864:	4693      	mov	fp, r2
 8001866:	449b      	add	fp, r3
 8001868:	2300      	movs	r3, #0
 800186a:	4699      	mov	r9, r3
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	033c      	lsls	r4, r7, #12
 8001870:	007b      	lsls	r3, r7, #1
 8001872:	4650      	mov	r0, sl
 8001874:	0b24      	lsrs	r4, r4, #12
 8001876:	0d5b      	lsrs	r3, r3, #21
 8001878:	0fff      	lsrs	r7, r7, #31
 800187a:	2b00      	cmp	r3, #0
 800187c:	d100      	bne.n	8001880 <__aeabi_ddiv+0x5c>
 800187e:	e11a      	b.n	8001ab6 <__aeabi_ddiv+0x292>
 8001880:	4ac4      	ldr	r2, [pc, #784]	; (8001b94 <__aeabi_ddiv+0x370>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d100      	bne.n	8001888 <__aeabi_ddiv+0x64>
 8001886:	e15e      	b.n	8001b46 <__aeabi_ddiv+0x322>
 8001888:	0f42      	lsrs	r2, r0, #29
 800188a:	00e4      	lsls	r4, r4, #3
 800188c:	4322      	orrs	r2, r4
 800188e:	2480      	movs	r4, #128	; 0x80
 8001890:	0424      	lsls	r4, r4, #16
 8001892:	4314      	orrs	r4, r2
 8001894:	4ac0      	ldr	r2, [pc, #768]	; (8001b98 <__aeabi_ddiv+0x374>)
 8001896:	00c1      	lsls	r1, r0, #3
 8001898:	4694      	mov	ip, r2
 800189a:	465a      	mov	r2, fp
 800189c:	4463      	add	r3, ip
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	469b      	mov	fp, r3
 80018a2:	2000      	movs	r0, #0
 80018a4:	0033      	movs	r3, r6
 80018a6:	407b      	eors	r3, r7
 80018a8:	469a      	mov	sl, r3
 80018aa:	464b      	mov	r3, r9
 80018ac:	2b0f      	cmp	r3, #15
 80018ae:	d827      	bhi.n	8001900 <__aeabi_ddiv+0xdc>
 80018b0:	4aba      	ldr	r2, [pc, #744]	; (8001b9c <__aeabi_ddiv+0x378>)
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	58d3      	ldr	r3, [r2, r3]
 80018b6:	469f      	mov	pc, r3
 80018b8:	46b2      	mov	sl, r6
 80018ba:	9b00      	ldr	r3, [sp, #0]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d016      	beq.n	80018ee <__aeabi_ddiv+0xca>
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d100      	bne.n	80018c6 <__aeabi_ddiv+0xa2>
 80018c4:	e287      	b.n	8001dd6 <__aeabi_ddiv+0x5b2>
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d000      	beq.n	80018cc <__aeabi_ddiv+0xa8>
 80018ca:	e0d5      	b.n	8001a78 <__aeabi_ddiv+0x254>
 80018cc:	2300      	movs	r3, #0
 80018ce:	2200      	movs	r2, #0
 80018d0:	2500      	movs	r5, #0
 80018d2:	051b      	lsls	r3, r3, #20
 80018d4:	4313      	orrs	r3, r2
 80018d6:	4652      	mov	r2, sl
 80018d8:	07d2      	lsls	r2, r2, #31
 80018da:	4313      	orrs	r3, r2
 80018dc:	0028      	movs	r0, r5
 80018de:	0019      	movs	r1, r3
 80018e0:	b005      	add	sp, #20
 80018e2:	bcf0      	pop	{r4, r5, r6, r7}
 80018e4:	46bb      	mov	fp, r7
 80018e6:	46b2      	mov	sl, r6
 80018e8:	46a9      	mov	r9, r5
 80018ea:	46a0      	mov	r8, r4
 80018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ee:	2200      	movs	r2, #0
 80018f0:	2500      	movs	r5, #0
 80018f2:	4ba8      	ldr	r3, [pc, #672]	; (8001b94 <__aeabi_ddiv+0x370>)
 80018f4:	e7ed      	b.n	80018d2 <__aeabi_ddiv+0xae>
 80018f6:	46ba      	mov	sl, r7
 80018f8:	46a0      	mov	r8, r4
 80018fa:	000d      	movs	r5, r1
 80018fc:	9000      	str	r0, [sp, #0]
 80018fe:	e7dc      	b.n	80018ba <__aeabi_ddiv+0x96>
 8001900:	4544      	cmp	r4, r8
 8001902:	d200      	bcs.n	8001906 <__aeabi_ddiv+0xe2>
 8001904:	e1c4      	b.n	8001c90 <__aeabi_ddiv+0x46c>
 8001906:	d100      	bne.n	800190a <__aeabi_ddiv+0xe6>
 8001908:	e1bf      	b.n	8001c8a <__aeabi_ddiv+0x466>
 800190a:	2301      	movs	r3, #1
 800190c:	425b      	negs	r3, r3
 800190e:	469c      	mov	ip, r3
 8001910:	002e      	movs	r6, r5
 8001912:	4640      	mov	r0, r8
 8001914:	2500      	movs	r5, #0
 8001916:	44e3      	add	fp, ip
 8001918:	0223      	lsls	r3, r4, #8
 800191a:	0e0c      	lsrs	r4, r1, #24
 800191c:	431c      	orrs	r4, r3
 800191e:	0c1b      	lsrs	r3, r3, #16
 8001920:	4699      	mov	r9, r3
 8001922:	0423      	lsls	r3, r4, #16
 8001924:	020a      	lsls	r2, r1, #8
 8001926:	0c1f      	lsrs	r7, r3, #16
 8001928:	4649      	mov	r1, r9
 800192a:	9200      	str	r2, [sp, #0]
 800192c:	9701      	str	r7, [sp, #4]
 800192e:	f7fe fc8d 	bl	800024c <__aeabi_uidivmod>
 8001932:	0002      	movs	r2, r0
 8001934:	437a      	muls	r2, r7
 8001936:	040b      	lsls	r3, r1, #16
 8001938:	0c31      	lsrs	r1, r6, #16
 800193a:	4680      	mov	r8, r0
 800193c:	4319      	orrs	r1, r3
 800193e:	428a      	cmp	r2, r1
 8001940:	d907      	bls.n	8001952 <__aeabi_ddiv+0x12e>
 8001942:	2301      	movs	r3, #1
 8001944:	425b      	negs	r3, r3
 8001946:	469c      	mov	ip, r3
 8001948:	1909      	adds	r1, r1, r4
 800194a:	44e0      	add	r8, ip
 800194c:	428c      	cmp	r4, r1
 800194e:	d800      	bhi.n	8001952 <__aeabi_ddiv+0x12e>
 8001950:	e201      	b.n	8001d56 <__aeabi_ddiv+0x532>
 8001952:	1a88      	subs	r0, r1, r2
 8001954:	4649      	mov	r1, r9
 8001956:	f7fe fc79 	bl	800024c <__aeabi_uidivmod>
 800195a:	9a01      	ldr	r2, [sp, #4]
 800195c:	0436      	lsls	r6, r6, #16
 800195e:	4342      	muls	r2, r0
 8001960:	0409      	lsls	r1, r1, #16
 8001962:	0c36      	lsrs	r6, r6, #16
 8001964:	0003      	movs	r3, r0
 8001966:	430e      	orrs	r6, r1
 8001968:	42b2      	cmp	r2, r6
 800196a:	d904      	bls.n	8001976 <__aeabi_ddiv+0x152>
 800196c:	1936      	adds	r6, r6, r4
 800196e:	3b01      	subs	r3, #1
 8001970:	42b4      	cmp	r4, r6
 8001972:	d800      	bhi.n	8001976 <__aeabi_ddiv+0x152>
 8001974:	e1e9      	b.n	8001d4a <__aeabi_ddiv+0x526>
 8001976:	1ab0      	subs	r0, r6, r2
 8001978:	4642      	mov	r2, r8
 800197a:	9e00      	ldr	r6, [sp, #0]
 800197c:	0412      	lsls	r2, r2, #16
 800197e:	431a      	orrs	r2, r3
 8001980:	0c33      	lsrs	r3, r6, #16
 8001982:	001f      	movs	r7, r3
 8001984:	0c11      	lsrs	r1, r2, #16
 8001986:	4690      	mov	r8, r2
 8001988:	9302      	str	r3, [sp, #8]
 800198a:	0413      	lsls	r3, r2, #16
 800198c:	0432      	lsls	r2, r6, #16
 800198e:	0c16      	lsrs	r6, r2, #16
 8001990:	0032      	movs	r2, r6
 8001992:	0c1b      	lsrs	r3, r3, #16
 8001994:	435a      	muls	r2, r3
 8001996:	9603      	str	r6, [sp, #12]
 8001998:	437b      	muls	r3, r7
 800199a:	434e      	muls	r6, r1
 800199c:	4379      	muls	r1, r7
 800199e:	0c17      	lsrs	r7, r2, #16
 80019a0:	46bc      	mov	ip, r7
 80019a2:	199b      	adds	r3, r3, r6
 80019a4:	4463      	add	r3, ip
 80019a6:	429e      	cmp	r6, r3
 80019a8:	d903      	bls.n	80019b2 <__aeabi_ddiv+0x18e>
 80019aa:	2680      	movs	r6, #128	; 0x80
 80019ac:	0276      	lsls	r6, r6, #9
 80019ae:	46b4      	mov	ip, r6
 80019b0:	4461      	add	r1, ip
 80019b2:	0c1e      	lsrs	r6, r3, #16
 80019b4:	1871      	adds	r1, r6, r1
 80019b6:	0416      	lsls	r6, r2, #16
 80019b8:	041b      	lsls	r3, r3, #16
 80019ba:	0c36      	lsrs	r6, r6, #16
 80019bc:	199e      	adds	r6, r3, r6
 80019be:	4288      	cmp	r0, r1
 80019c0:	d302      	bcc.n	80019c8 <__aeabi_ddiv+0x1a4>
 80019c2:	d112      	bne.n	80019ea <__aeabi_ddiv+0x1c6>
 80019c4:	42b5      	cmp	r5, r6
 80019c6:	d210      	bcs.n	80019ea <__aeabi_ddiv+0x1c6>
 80019c8:	4643      	mov	r3, r8
 80019ca:	1e5a      	subs	r2, r3, #1
 80019cc:	9b00      	ldr	r3, [sp, #0]
 80019ce:	469c      	mov	ip, r3
 80019d0:	4465      	add	r5, ip
 80019d2:	001f      	movs	r7, r3
 80019d4:	429d      	cmp	r5, r3
 80019d6:	419b      	sbcs	r3, r3
 80019d8:	425b      	negs	r3, r3
 80019da:	191b      	adds	r3, r3, r4
 80019dc:	18c0      	adds	r0, r0, r3
 80019de:	4284      	cmp	r4, r0
 80019e0:	d200      	bcs.n	80019e4 <__aeabi_ddiv+0x1c0>
 80019e2:	e19e      	b.n	8001d22 <__aeabi_ddiv+0x4fe>
 80019e4:	d100      	bne.n	80019e8 <__aeabi_ddiv+0x1c4>
 80019e6:	e199      	b.n	8001d1c <__aeabi_ddiv+0x4f8>
 80019e8:	4690      	mov	r8, r2
 80019ea:	1bae      	subs	r6, r5, r6
 80019ec:	42b5      	cmp	r5, r6
 80019ee:	41ad      	sbcs	r5, r5
 80019f0:	1a40      	subs	r0, r0, r1
 80019f2:	426d      	negs	r5, r5
 80019f4:	1b40      	subs	r0, r0, r5
 80019f6:	4284      	cmp	r4, r0
 80019f8:	d100      	bne.n	80019fc <__aeabi_ddiv+0x1d8>
 80019fa:	e1d2      	b.n	8001da2 <__aeabi_ddiv+0x57e>
 80019fc:	4649      	mov	r1, r9
 80019fe:	f7fe fc25 	bl	800024c <__aeabi_uidivmod>
 8001a02:	9a01      	ldr	r2, [sp, #4]
 8001a04:	040b      	lsls	r3, r1, #16
 8001a06:	4342      	muls	r2, r0
 8001a08:	0c31      	lsrs	r1, r6, #16
 8001a0a:	0005      	movs	r5, r0
 8001a0c:	4319      	orrs	r1, r3
 8001a0e:	428a      	cmp	r2, r1
 8001a10:	d900      	bls.n	8001a14 <__aeabi_ddiv+0x1f0>
 8001a12:	e16c      	b.n	8001cee <__aeabi_ddiv+0x4ca>
 8001a14:	1a88      	subs	r0, r1, r2
 8001a16:	4649      	mov	r1, r9
 8001a18:	f7fe fc18 	bl	800024c <__aeabi_uidivmod>
 8001a1c:	9a01      	ldr	r2, [sp, #4]
 8001a1e:	0436      	lsls	r6, r6, #16
 8001a20:	4342      	muls	r2, r0
 8001a22:	0409      	lsls	r1, r1, #16
 8001a24:	0c36      	lsrs	r6, r6, #16
 8001a26:	0003      	movs	r3, r0
 8001a28:	430e      	orrs	r6, r1
 8001a2a:	42b2      	cmp	r2, r6
 8001a2c:	d900      	bls.n	8001a30 <__aeabi_ddiv+0x20c>
 8001a2e:	e153      	b.n	8001cd8 <__aeabi_ddiv+0x4b4>
 8001a30:	9803      	ldr	r0, [sp, #12]
 8001a32:	1ab6      	subs	r6, r6, r2
 8001a34:	0002      	movs	r2, r0
 8001a36:	042d      	lsls	r5, r5, #16
 8001a38:	431d      	orrs	r5, r3
 8001a3a:	9f02      	ldr	r7, [sp, #8]
 8001a3c:	042b      	lsls	r3, r5, #16
 8001a3e:	0c1b      	lsrs	r3, r3, #16
 8001a40:	435a      	muls	r2, r3
 8001a42:	437b      	muls	r3, r7
 8001a44:	469c      	mov	ip, r3
 8001a46:	0c29      	lsrs	r1, r5, #16
 8001a48:	4348      	muls	r0, r1
 8001a4a:	0c13      	lsrs	r3, r2, #16
 8001a4c:	4484      	add	ip, r0
 8001a4e:	4463      	add	r3, ip
 8001a50:	4379      	muls	r1, r7
 8001a52:	4298      	cmp	r0, r3
 8001a54:	d903      	bls.n	8001a5e <__aeabi_ddiv+0x23a>
 8001a56:	2080      	movs	r0, #128	; 0x80
 8001a58:	0240      	lsls	r0, r0, #9
 8001a5a:	4684      	mov	ip, r0
 8001a5c:	4461      	add	r1, ip
 8001a5e:	0c18      	lsrs	r0, r3, #16
 8001a60:	0412      	lsls	r2, r2, #16
 8001a62:	041b      	lsls	r3, r3, #16
 8001a64:	0c12      	lsrs	r2, r2, #16
 8001a66:	1840      	adds	r0, r0, r1
 8001a68:	189b      	adds	r3, r3, r2
 8001a6a:	4286      	cmp	r6, r0
 8001a6c:	d200      	bcs.n	8001a70 <__aeabi_ddiv+0x24c>
 8001a6e:	e100      	b.n	8001c72 <__aeabi_ddiv+0x44e>
 8001a70:	d100      	bne.n	8001a74 <__aeabi_ddiv+0x250>
 8001a72:	e0fb      	b.n	8001c6c <__aeabi_ddiv+0x448>
 8001a74:	2301      	movs	r3, #1
 8001a76:	431d      	orrs	r5, r3
 8001a78:	4b49      	ldr	r3, [pc, #292]	; (8001ba0 <__aeabi_ddiv+0x37c>)
 8001a7a:	445b      	add	r3, fp
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	dc00      	bgt.n	8001a82 <__aeabi_ddiv+0x25e>
 8001a80:	e0aa      	b.n	8001bd8 <__aeabi_ddiv+0x3b4>
 8001a82:	076a      	lsls	r2, r5, #29
 8001a84:	d000      	beq.n	8001a88 <__aeabi_ddiv+0x264>
 8001a86:	e13d      	b.n	8001d04 <__aeabi_ddiv+0x4e0>
 8001a88:	08e9      	lsrs	r1, r5, #3
 8001a8a:	4642      	mov	r2, r8
 8001a8c:	01d2      	lsls	r2, r2, #7
 8001a8e:	d506      	bpl.n	8001a9e <__aeabi_ddiv+0x27a>
 8001a90:	4642      	mov	r2, r8
 8001a92:	4b44      	ldr	r3, [pc, #272]	; (8001ba4 <__aeabi_ddiv+0x380>)
 8001a94:	401a      	ands	r2, r3
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	4690      	mov	r8, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	445b      	add	r3, fp
 8001a9e:	4a42      	ldr	r2, [pc, #264]	; (8001ba8 <__aeabi_ddiv+0x384>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_ddiv+0x282>
 8001aa4:	e723      	b.n	80018ee <__aeabi_ddiv+0xca>
 8001aa6:	4642      	mov	r2, r8
 8001aa8:	055b      	lsls	r3, r3, #21
 8001aaa:	0755      	lsls	r5, r2, #29
 8001aac:	0252      	lsls	r2, r2, #9
 8001aae:	430d      	orrs	r5, r1
 8001ab0:	0b12      	lsrs	r2, r2, #12
 8001ab2:	0d5b      	lsrs	r3, r3, #21
 8001ab4:	e70d      	b.n	80018d2 <__aeabi_ddiv+0xae>
 8001ab6:	4651      	mov	r1, sl
 8001ab8:	4321      	orrs	r1, r4
 8001aba:	d100      	bne.n	8001abe <__aeabi_ddiv+0x29a>
 8001abc:	e07c      	b.n	8001bb8 <__aeabi_ddiv+0x394>
 8001abe:	2c00      	cmp	r4, #0
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_ddiv+0x2a0>
 8001ac2:	e0fb      	b.n	8001cbc <__aeabi_ddiv+0x498>
 8001ac4:	0020      	movs	r0, r4
 8001ac6:	f001 fa63 	bl	8002f90 <__clzsi2>
 8001aca:	0002      	movs	r2, r0
 8001acc:	3a0b      	subs	r2, #11
 8001ace:	231d      	movs	r3, #29
 8001ad0:	1a9b      	subs	r3, r3, r2
 8001ad2:	4652      	mov	r2, sl
 8001ad4:	0001      	movs	r1, r0
 8001ad6:	40da      	lsrs	r2, r3
 8001ad8:	4653      	mov	r3, sl
 8001ada:	3908      	subs	r1, #8
 8001adc:	408b      	lsls	r3, r1
 8001ade:	408c      	lsls	r4, r1
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	4314      	orrs	r4, r2
 8001ae4:	4b31      	ldr	r3, [pc, #196]	; (8001bac <__aeabi_ddiv+0x388>)
 8001ae6:	4458      	add	r0, fp
 8001ae8:	469b      	mov	fp, r3
 8001aea:	4483      	add	fp, r0
 8001aec:	2000      	movs	r0, #0
 8001aee:	e6d9      	b.n	80018a4 <__aeabi_ddiv+0x80>
 8001af0:	0003      	movs	r3, r0
 8001af2:	4323      	orrs	r3, r4
 8001af4:	4698      	mov	r8, r3
 8001af6:	d044      	beq.n	8001b82 <__aeabi_ddiv+0x35e>
 8001af8:	2c00      	cmp	r4, #0
 8001afa:	d100      	bne.n	8001afe <__aeabi_ddiv+0x2da>
 8001afc:	e0cf      	b.n	8001c9e <__aeabi_ddiv+0x47a>
 8001afe:	0020      	movs	r0, r4
 8001b00:	f001 fa46 	bl	8002f90 <__clzsi2>
 8001b04:	0001      	movs	r1, r0
 8001b06:	0002      	movs	r2, r0
 8001b08:	390b      	subs	r1, #11
 8001b0a:	231d      	movs	r3, #29
 8001b0c:	1a5b      	subs	r3, r3, r1
 8001b0e:	4649      	mov	r1, r9
 8001b10:	0010      	movs	r0, r2
 8001b12:	40d9      	lsrs	r1, r3
 8001b14:	3808      	subs	r0, #8
 8001b16:	4084      	lsls	r4, r0
 8001b18:	000b      	movs	r3, r1
 8001b1a:	464d      	mov	r5, r9
 8001b1c:	4323      	orrs	r3, r4
 8001b1e:	4698      	mov	r8, r3
 8001b20:	4085      	lsls	r5, r0
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <__aeabi_ddiv+0x38c>)
 8001b24:	1a9b      	subs	r3, r3, r2
 8001b26:	469b      	mov	fp, r3
 8001b28:	2300      	movs	r3, #0
 8001b2a:	4699      	mov	r9, r3
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	e69e      	b.n	800186e <__aeabi_ddiv+0x4a>
 8001b30:	0002      	movs	r2, r0
 8001b32:	4322      	orrs	r2, r4
 8001b34:	4690      	mov	r8, r2
 8001b36:	d11d      	bne.n	8001b74 <__aeabi_ddiv+0x350>
 8001b38:	2208      	movs	r2, #8
 8001b3a:	469b      	mov	fp, r3
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	2500      	movs	r5, #0
 8001b40:	4691      	mov	r9, r2
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	e693      	b.n	800186e <__aeabi_ddiv+0x4a>
 8001b46:	4651      	mov	r1, sl
 8001b48:	4321      	orrs	r1, r4
 8001b4a:	d109      	bne.n	8001b60 <__aeabi_ddiv+0x33c>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	464a      	mov	r2, r9
 8001b50:	431a      	orrs	r2, r3
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <__aeabi_ddiv+0x390>)
 8001b54:	4691      	mov	r9, r2
 8001b56:	469c      	mov	ip, r3
 8001b58:	2400      	movs	r4, #0
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	44e3      	add	fp, ip
 8001b5e:	e6a1      	b.n	80018a4 <__aeabi_ddiv+0x80>
 8001b60:	2303      	movs	r3, #3
 8001b62:	464a      	mov	r2, r9
 8001b64:	431a      	orrs	r2, r3
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <__aeabi_ddiv+0x390>)
 8001b68:	4691      	mov	r9, r2
 8001b6a:	469c      	mov	ip, r3
 8001b6c:	4651      	mov	r1, sl
 8001b6e:	2003      	movs	r0, #3
 8001b70:	44e3      	add	fp, ip
 8001b72:	e697      	b.n	80018a4 <__aeabi_ddiv+0x80>
 8001b74:	220c      	movs	r2, #12
 8001b76:	469b      	mov	fp, r3
 8001b78:	2303      	movs	r3, #3
 8001b7a:	46a0      	mov	r8, r4
 8001b7c:	4691      	mov	r9, r2
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	e675      	b.n	800186e <__aeabi_ddiv+0x4a>
 8001b82:	2304      	movs	r3, #4
 8001b84:	4699      	mov	r9, r3
 8001b86:	2300      	movs	r3, #0
 8001b88:	469b      	mov	fp, r3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	2500      	movs	r5, #0
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	e66d      	b.n	800186e <__aeabi_ddiv+0x4a>
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	000007ff 	.word	0x000007ff
 8001b98:	fffffc01 	.word	0xfffffc01
 8001b9c:	0800c560 	.word	0x0800c560
 8001ba0:	000003ff 	.word	0x000003ff
 8001ba4:	feffffff 	.word	0xfeffffff
 8001ba8:	000007fe 	.word	0x000007fe
 8001bac:	000003f3 	.word	0x000003f3
 8001bb0:	fffffc0d 	.word	0xfffffc0d
 8001bb4:	fffff801 	.word	0xfffff801
 8001bb8:	464a      	mov	r2, r9
 8001bba:	2301      	movs	r3, #1
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	4691      	mov	r9, r2
 8001bc0:	2400      	movs	r4, #0
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	e66e      	b.n	80018a4 <__aeabi_ddiv+0x80>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	469a      	mov	sl, r3
 8001bcc:	2500      	movs	r5, #0
 8001bce:	4b88      	ldr	r3, [pc, #544]	; (8001df0 <__aeabi_ddiv+0x5cc>)
 8001bd0:	0312      	lsls	r2, r2, #12
 8001bd2:	e67e      	b.n	80018d2 <__aeabi_ddiv+0xae>
 8001bd4:	2501      	movs	r5, #1
 8001bd6:	426d      	negs	r5, r5
 8001bd8:	2201      	movs	r2, #1
 8001bda:	1ad2      	subs	r2, r2, r3
 8001bdc:	2a38      	cmp	r2, #56	; 0x38
 8001bde:	dd00      	ble.n	8001be2 <__aeabi_ddiv+0x3be>
 8001be0:	e674      	b.n	80018cc <__aeabi_ddiv+0xa8>
 8001be2:	2a1f      	cmp	r2, #31
 8001be4:	dc00      	bgt.n	8001be8 <__aeabi_ddiv+0x3c4>
 8001be6:	e0bd      	b.n	8001d64 <__aeabi_ddiv+0x540>
 8001be8:	211f      	movs	r1, #31
 8001bea:	4249      	negs	r1, r1
 8001bec:	1acb      	subs	r3, r1, r3
 8001bee:	4641      	mov	r1, r8
 8001bf0:	40d9      	lsrs	r1, r3
 8001bf2:	000b      	movs	r3, r1
 8001bf4:	2a20      	cmp	r2, #32
 8001bf6:	d004      	beq.n	8001c02 <__aeabi_ddiv+0x3de>
 8001bf8:	4641      	mov	r1, r8
 8001bfa:	4a7e      	ldr	r2, [pc, #504]	; (8001df4 <__aeabi_ddiv+0x5d0>)
 8001bfc:	445a      	add	r2, fp
 8001bfe:	4091      	lsls	r1, r2
 8001c00:	430d      	orrs	r5, r1
 8001c02:	0029      	movs	r1, r5
 8001c04:	1e4a      	subs	r2, r1, #1
 8001c06:	4191      	sbcs	r1, r2
 8001c08:	4319      	orrs	r1, r3
 8001c0a:	2307      	movs	r3, #7
 8001c0c:	001d      	movs	r5, r3
 8001c0e:	2200      	movs	r2, #0
 8001c10:	400d      	ands	r5, r1
 8001c12:	420b      	tst	r3, r1
 8001c14:	d100      	bne.n	8001c18 <__aeabi_ddiv+0x3f4>
 8001c16:	e0d0      	b.n	8001dba <__aeabi_ddiv+0x596>
 8001c18:	220f      	movs	r2, #15
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	2a04      	cmp	r2, #4
 8001c20:	d100      	bne.n	8001c24 <__aeabi_ddiv+0x400>
 8001c22:	e0c7      	b.n	8001db4 <__aeabi_ddiv+0x590>
 8001c24:	1d0a      	adds	r2, r1, #4
 8001c26:	428a      	cmp	r2, r1
 8001c28:	4189      	sbcs	r1, r1
 8001c2a:	4249      	negs	r1, r1
 8001c2c:	185b      	adds	r3, r3, r1
 8001c2e:	0011      	movs	r1, r2
 8001c30:	021a      	lsls	r2, r3, #8
 8001c32:	d400      	bmi.n	8001c36 <__aeabi_ddiv+0x412>
 8001c34:	e0be      	b.n	8001db4 <__aeabi_ddiv+0x590>
 8001c36:	2301      	movs	r3, #1
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2500      	movs	r5, #0
 8001c3c:	e649      	b.n	80018d2 <__aeabi_ddiv+0xae>
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	4643      	mov	r3, r8
 8001c42:	0312      	lsls	r2, r2, #12
 8001c44:	4213      	tst	r3, r2
 8001c46:	d008      	beq.n	8001c5a <__aeabi_ddiv+0x436>
 8001c48:	4214      	tst	r4, r2
 8001c4a:	d106      	bne.n	8001c5a <__aeabi_ddiv+0x436>
 8001c4c:	4322      	orrs	r2, r4
 8001c4e:	0312      	lsls	r2, r2, #12
 8001c50:	46ba      	mov	sl, r7
 8001c52:	000d      	movs	r5, r1
 8001c54:	4b66      	ldr	r3, [pc, #408]	; (8001df0 <__aeabi_ddiv+0x5cc>)
 8001c56:	0b12      	lsrs	r2, r2, #12
 8001c58:	e63b      	b.n	80018d2 <__aeabi_ddiv+0xae>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	4643      	mov	r3, r8
 8001c5e:	0312      	lsls	r2, r2, #12
 8001c60:	431a      	orrs	r2, r3
 8001c62:	0312      	lsls	r2, r2, #12
 8001c64:	46b2      	mov	sl, r6
 8001c66:	4b62      	ldr	r3, [pc, #392]	; (8001df0 <__aeabi_ddiv+0x5cc>)
 8001c68:	0b12      	lsrs	r2, r2, #12
 8001c6a:	e632      	b.n	80018d2 <__aeabi_ddiv+0xae>
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d100      	bne.n	8001c72 <__aeabi_ddiv+0x44e>
 8001c70:	e702      	b.n	8001a78 <__aeabi_ddiv+0x254>
 8001c72:	19a6      	adds	r6, r4, r6
 8001c74:	1e6a      	subs	r2, r5, #1
 8001c76:	42a6      	cmp	r6, r4
 8001c78:	d200      	bcs.n	8001c7c <__aeabi_ddiv+0x458>
 8001c7a:	e089      	b.n	8001d90 <__aeabi_ddiv+0x56c>
 8001c7c:	4286      	cmp	r6, r0
 8001c7e:	d200      	bcs.n	8001c82 <__aeabi_ddiv+0x45e>
 8001c80:	e09f      	b.n	8001dc2 <__aeabi_ddiv+0x59e>
 8001c82:	d100      	bne.n	8001c86 <__aeabi_ddiv+0x462>
 8001c84:	e0af      	b.n	8001de6 <__aeabi_ddiv+0x5c2>
 8001c86:	0015      	movs	r5, r2
 8001c88:	e6f4      	b.n	8001a74 <__aeabi_ddiv+0x250>
 8001c8a:	42a9      	cmp	r1, r5
 8001c8c:	d900      	bls.n	8001c90 <__aeabi_ddiv+0x46c>
 8001c8e:	e63c      	b.n	800190a <__aeabi_ddiv+0xe6>
 8001c90:	4643      	mov	r3, r8
 8001c92:	07de      	lsls	r6, r3, #31
 8001c94:	0858      	lsrs	r0, r3, #1
 8001c96:	086b      	lsrs	r3, r5, #1
 8001c98:	431e      	orrs	r6, r3
 8001c9a:	07ed      	lsls	r5, r5, #31
 8001c9c:	e63c      	b.n	8001918 <__aeabi_ddiv+0xf4>
 8001c9e:	f001 f977 	bl	8002f90 <__clzsi2>
 8001ca2:	0001      	movs	r1, r0
 8001ca4:	0002      	movs	r2, r0
 8001ca6:	3115      	adds	r1, #21
 8001ca8:	3220      	adds	r2, #32
 8001caa:	291c      	cmp	r1, #28
 8001cac:	dc00      	bgt.n	8001cb0 <__aeabi_ddiv+0x48c>
 8001cae:	e72c      	b.n	8001b0a <__aeabi_ddiv+0x2e6>
 8001cb0:	464b      	mov	r3, r9
 8001cb2:	3808      	subs	r0, #8
 8001cb4:	4083      	lsls	r3, r0
 8001cb6:	2500      	movs	r5, #0
 8001cb8:	4698      	mov	r8, r3
 8001cba:	e732      	b.n	8001b22 <__aeabi_ddiv+0x2fe>
 8001cbc:	f001 f968 	bl	8002f90 <__clzsi2>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	001a      	movs	r2, r3
 8001cc4:	3215      	adds	r2, #21
 8001cc6:	3020      	adds	r0, #32
 8001cc8:	2a1c      	cmp	r2, #28
 8001cca:	dc00      	bgt.n	8001cce <__aeabi_ddiv+0x4aa>
 8001ccc:	e6ff      	b.n	8001ace <__aeabi_ddiv+0x2aa>
 8001cce:	4654      	mov	r4, sl
 8001cd0:	3b08      	subs	r3, #8
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	e705      	b.n	8001ae4 <__aeabi_ddiv+0x2c0>
 8001cd8:	1936      	adds	r6, r6, r4
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	42b4      	cmp	r4, r6
 8001cde:	d900      	bls.n	8001ce2 <__aeabi_ddiv+0x4be>
 8001ce0:	e6a6      	b.n	8001a30 <__aeabi_ddiv+0x20c>
 8001ce2:	42b2      	cmp	r2, r6
 8001ce4:	d800      	bhi.n	8001ce8 <__aeabi_ddiv+0x4c4>
 8001ce6:	e6a3      	b.n	8001a30 <__aeabi_ddiv+0x20c>
 8001ce8:	1e83      	subs	r3, r0, #2
 8001cea:	1936      	adds	r6, r6, r4
 8001cec:	e6a0      	b.n	8001a30 <__aeabi_ddiv+0x20c>
 8001cee:	1909      	adds	r1, r1, r4
 8001cf0:	3d01      	subs	r5, #1
 8001cf2:	428c      	cmp	r4, r1
 8001cf4:	d900      	bls.n	8001cf8 <__aeabi_ddiv+0x4d4>
 8001cf6:	e68d      	b.n	8001a14 <__aeabi_ddiv+0x1f0>
 8001cf8:	428a      	cmp	r2, r1
 8001cfa:	d800      	bhi.n	8001cfe <__aeabi_ddiv+0x4da>
 8001cfc:	e68a      	b.n	8001a14 <__aeabi_ddiv+0x1f0>
 8001cfe:	1e85      	subs	r5, r0, #2
 8001d00:	1909      	adds	r1, r1, r4
 8001d02:	e687      	b.n	8001a14 <__aeabi_ddiv+0x1f0>
 8001d04:	220f      	movs	r2, #15
 8001d06:	402a      	ands	r2, r5
 8001d08:	2a04      	cmp	r2, #4
 8001d0a:	d100      	bne.n	8001d0e <__aeabi_ddiv+0x4ea>
 8001d0c:	e6bc      	b.n	8001a88 <__aeabi_ddiv+0x264>
 8001d0e:	1d29      	adds	r1, r5, #4
 8001d10:	42a9      	cmp	r1, r5
 8001d12:	41ad      	sbcs	r5, r5
 8001d14:	426d      	negs	r5, r5
 8001d16:	08c9      	lsrs	r1, r1, #3
 8001d18:	44a8      	add	r8, r5
 8001d1a:	e6b6      	b.n	8001a8a <__aeabi_ddiv+0x266>
 8001d1c:	42af      	cmp	r7, r5
 8001d1e:	d900      	bls.n	8001d22 <__aeabi_ddiv+0x4fe>
 8001d20:	e662      	b.n	80019e8 <__aeabi_ddiv+0x1c4>
 8001d22:	4281      	cmp	r1, r0
 8001d24:	d804      	bhi.n	8001d30 <__aeabi_ddiv+0x50c>
 8001d26:	d000      	beq.n	8001d2a <__aeabi_ddiv+0x506>
 8001d28:	e65e      	b.n	80019e8 <__aeabi_ddiv+0x1c4>
 8001d2a:	42ae      	cmp	r6, r5
 8001d2c:	d800      	bhi.n	8001d30 <__aeabi_ddiv+0x50c>
 8001d2e:	e65b      	b.n	80019e8 <__aeabi_ddiv+0x1c4>
 8001d30:	2302      	movs	r3, #2
 8001d32:	425b      	negs	r3, r3
 8001d34:	469c      	mov	ip, r3
 8001d36:	9b00      	ldr	r3, [sp, #0]
 8001d38:	44e0      	add	r8, ip
 8001d3a:	469c      	mov	ip, r3
 8001d3c:	4465      	add	r5, ip
 8001d3e:	429d      	cmp	r5, r3
 8001d40:	419b      	sbcs	r3, r3
 8001d42:	425b      	negs	r3, r3
 8001d44:	191b      	adds	r3, r3, r4
 8001d46:	18c0      	adds	r0, r0, r3
 8001d48:	e64f      	b.n	80019ea <__aeabi_ddiv+0x1c6>
 8001d4a:	42b2      	cmp	r2, r6
 8001d4c:	d800      	bhi.n	8001d50 <__aeabi_ddiv+0x52c>
 8001d4e:	e612      	b.n	8001976 <__aeabi_ddiv+0x152>
 8001d50:	1e83      	subs	r3, r0, #2
 8001d52:	1936      	adds	r6, r6, r4
 8001d54:	e60f      	b.n	8001976 <__aeabi_ddiv+0x152>
 8001d56:	428a      	cmp	r2, r1
 8001d58:	d800      	bhi.n	8001d5c <__aeabi_ddiv+0x538>
 8001d5a:	e5fa      	b.n	8001952 <__aeabi_ddiv+0x12e>
 8001d5c:	1e83      	subs	r3, r0, #2
 8001d5e:	4698      	mov	r8, r3
 8001d60:	1909      	adds	r1, r1, r4
 8001d62:	e5f6      	b.n	8001952 <__aeabi_ddiv+0x12e>
 8001d64:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <__aeabi_ddiv+0x5d4>)
 8001d66:	0028      	movs	r0, r5
 8001d68:	445b      	add	r3, fp
 8001d6a:	4641      	mov	r1, r8
 8001d6c:	409d      	lsls	r5, r3
 8001d6e:	4099      	lsls	r1, r3
 8001d70:	40d0      	lsrs	r0, r2
 8001d72:	1e6b      	subs	r3, r5, #1
 8001d74:	419d      	sbcs	r5, r3
 8001d76:	4643      	mov	r3, r8
 8001d78:	4301      	orrs	r1, r0
 8001d7a:	4329      	orrs	r1, r5
 8001d7c:	40d3      	lsrs	r3, r2
 8001d7e:	074a      	lsls	r2, r1, #29
 8001d80:	d100      	bne.n	8001d84 <__aeabi_ddiv+0x560>
 8001d82:	e755      	b.n	8001c30 <__aeabi_ddiv+0x40c>
 8001d84:	220f      	movs	r2, #15
 8001d86:	400a      	ands	r2, r1
 8001d88:	2a04      	cmp	r2, #4
 8001d8a:	d000      	beq.n	8001d8e <__aeabi_ddiv+0x56a>
 8001d8c:	e74a      	b.n	8001c24 <__aeabi_ddiv+0x400>
 8001d8e:	e74f      	b.n	8001c30 <__aeabi_ddiv+0x40c>
 8001d90:	0015      	movs	r5, r2
 8001d92:	4286      	cmp	r6, r0
 8001d94:	d000      	beq.n	8001d98 <__aeabi_ddiv+0x574>
 8001d96:	e66d      	b.n	8001a74 <__aeabi_ddiv+0x250>
 8001d98:	9a00      	ldr	r2, [sp, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d000      	beq.n	8001da0 <__aeabi_ddiv+0x57c>
 8001d9e:	e669      	b.n	8001a74 <__aeabi_ddiv+0x250>
 8001da0:	e66a      	b.n	8001a78 <__aeabi_ddiv+0x254>
 8001da2:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <__aeabi_ddiv+0x5d8>)
 8001da4:	445b      	add	r3, fp
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	dc00      	bgt.n	8001dac <__aeabi_ddiv+0x588>
 8001daa:	e713      	b.n	8001bd4 <__aeabi_ddiv+0x3b0>
 8001dac:	2501      	movs	r5, #1
 8001dae:	2100      	movs	r1, #0
 8001db0:	44a8      	add	r8, r5
 8001db2:	e66a      	b.n	8001a8a <__aeabi_ddiv+0x266>
 8001db4:	075d      	lsls	r5, r3, #29
 8001db6:	025b      	lsls	r3, r3, #9
 8001db8:	0b1a      	lsrs	r2, r3, #12
 8001dba:	08c9      	lsrs	r1, r1, #3
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	430d      	orrs	r5, r1
 8001dc0:	e587      	b.n	80018d2 <__aeabi_ddiv+0xae>
 8001dc2:	9900      	ldr	r1, [sp, #0]
 8001dc4:	3d02      	subs	r5, #2
 8001dc6:	004a      	lsls	r2, r1, #1
 8001dc8:	428a      	cmp	r2, r1
 8001dca:	41bf      	sbcs	r7, r7
 8001dcc:	427f      	negs	r7, r7
 8001dce:	193f      	adds	r7, r7, r4
 8001dd0:	19f6      	adds	r6, r6, r7
 8001dd2:	9200      	str	r2, [sp, #0]
 8001dd4:	e7dd      	b.n	8001d92 <__aeabi_ddiv+0x56e>
 8001dd6:	2280      	movs	r2, #128	; 0x80
 8001dd8:	4643      	mov	r3, r8
 8001dda:	0312      	lsls	r2, r2, #12
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	0312      	lsls	r2, r2, #12
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <__aeabi_ddiv+0x5cc>)
 8001de2:	0b12      	lsrs	r2, r2, #12
 8001de4:	e575      	b.n	80018d2 <__aeabi_ddiv+0xae>
 8001de6:	9900      	ldr	r1, [sp, #0]
 8001de8:	4299      	cmp	r1, r3
 8001dea:	d3ea      	bcc.n	8001dc2 <__aeabi_ddiv+0x59e>
 8001dec:	0015      	movs	r5, r2
 8001dee:	e7d3      	b.n	8001d98 <__aeabi_ddiv+0x574>
 8001df0:	000007ff 	.word	0x000007ff
 8001df4:	0000043e 	.word	0x0000043e
 8001df8:	0000041e 	.word	0x0000041e
 8001dfc:	000003ff 	.word	0x000003ff

08001e00 <__eqdf2>:
 8001e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e02:	464e      	mov	r6, r9
 8001e04:	4645      	mov	r5, r8
 8001e06:	46de      	mov	lr, fp
 8001e08:	4657      	mov	r7, sl
 8001e0a:	4690      	mov	r8, r2
 8001e0c:	b5e0      	push	{r5, r6, r7, lr}
 8001e0e:	0017      	movs	r7, r2
 8001e10:	031a      	lsls	r2, r3, #12
 8001e12:	0b12      	lsrs	r2, r2, #12
 8001e14:	0005      	movs	r5, r0
 8001e16:	4684      	mov	ip, r0
 8001e18:	4819      	ldr	r0, [pc, #100]	; (8001e80 <__eqdf2+0x80>)
 8001e1a:	030e      	lsls	r6, r1, #12
 8001e1c:	004c      	lsls	r4, r1, #1
 8001e1e:	4691      	mov	r9, r2
 8001e20:	005a      	lsls	r2, r3, #1
 8001e22:	0fdb      	lsrs	r3, r3, #31
 8001e24:	469b      	mov	fp, r3
 8001e26:	0b36      	lsrs	r6, r6, #12
 8001e28:	0d64      	lsrs	r4, r4, #21
 8001e2a:	0fc9      	lsrs	r1, r1, #31
 8001e2c:	0d52      	lsrs	r2, r2, #21
 8001e2e:	4284      	cmp	r4, r0
 8001e30:	d019      	beq.n	8001e66 <__eqdf2+0x66>
 8001e32:	4282      	cmp	r2, r0
 8001e34:	d010      	beq.n	8001e58 <__eqdf2+0x58>
 8001e36:	2001      	movs	r0, #1
 8001e38:	4294      	cmp	r4, r2
 8001e3a:	d10e      	bne.n	8001e5a <__eqdf2+0x5a>
 8001e3c:	454e      	cmp	r6, r9
 8001e3e:	d10c      	bne.n	8001e5a <__eqdf2+0x5a>
 8001e40:	2001      	movs	r0, #1
 8001e42:	45c4      	cmp	ip, r8
 8001e44:	d109      	bne.n	8001e5a <__eqdf2+0x5a>
 8001e46:	4559      	cmp	r1, fp
 8001e48:	d017      	beq.n	8001e7a <__eqdf2+0x7a>
 8001e4a:	2c00      	cmp	r4, #0
 8001e4c:	d105      	bne.n	8001e5a <__eqdf2+0x5a>
 8001e4e:	0030      	movs	r0, r6
 8001e50:	4328      	orrs	r0, r5
 8001e52:	1e43      	subs	r3, r0, #1
 8001e54:	4198      	sbcs	r0, r3
 8001e56:	e000      	b.n	8001e5a <__eqdf2+0x5a>
 8001e58:	2001      	movs	r0, #1
 8001e5a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e5c:	46bb      	mov	fp, r7
 8001e5e:	46b2      	mov	sl, r6
 8001e60:	46a9      	mov	r9, r5
 8001e62:	46a0      	mov	r8, r4
 8001e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e66:	0033      	movs	r3, r6
 8001e68:	2001      	movs	r0, #1
 8001e6a:	432b      	orrs	r3, r5
 8001e6c:	d1f5      	bne.n	8001e5a <__eqdf2+0x5a>
 8001e6e:	42a2      	cmp	r2, r4
 8001e70:	d1f3      	bne.n	8001e5a <__eqdf2+0x5a>
 8001e72:	464b      	mov	r3, r9
 8001e74:	433b      	orrs	r3, r7
 8001e76:	d1f0      	bne.n	8001e5a <__eqdf2+0x5a>
 8001e78:	e7e2      	b.n	8001e40 <__eqdf2+0x40>
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	e7ed      	b.n	8001e5a <__eqdf2+0x5a>
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	000007ff 	.word	0x000007ff

08001e84 <__gedf2>:
 8001e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e86:	4647      	mov	r7, r8
 8001e88:	46ce      	mov	lr, r9
 8001e8a:	0004      	movs	r4, r0
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	0016      	movs	r6, r2
 8001e90:	031b      	lsls	r3, r3, #12
 8001e92:	0b1b      	lsrs	r3, r3, #12
 8001e94:	4d2d      	ldr	r5, [pc, #180]	; (8001f4c <__gedf2+0xc8>)
 8001e96:	004a      	lsls	r2, r1, #1
 8001e98:	4699      	mov	r9, r3
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	0043      	lsls	r3, r0, #1
 8001e9e:	030f      	lsls	r7, r1, #12
 8001ea0:	46a4      	mov	ip, r4
 8001ea2:	46b0      	mov	r8, r6
 8001ea4:	0b3f      	lsrs	r7, r7, #12
 8001ea6:	0d52      	lsrs	r2, r2, #21
 8001ea8:	0fc9      	lsrs	r1, r1, #31
 8001eaa:	0d5b      	lsrs	r3, r3, #21
 8001eac:	0fc0      	lsrs	r0, r0, #31
 8001eae:	42aa      	cmp	r2, r5
 8001eb0:	d021      	beq.n	8001ef6 <__gedf2+0x72>
 8001eb2:	42ab      	cmp	r3, r5
 8001eb4:	d013      	beq.n	8001ede <__gedf2+0x5a>
 8001eb6:	2a00      	cmp	r2, #0
 8001eb8:	d122      	bne.n	8001f00 <__gedf2+0x7c>
 8001eba:	433c      	orrs	r4, r7
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <__gedf2+0x42>
 8001ec0:	464d      	mov	r5, r9
 8001ec2:	432e      	orrs	r6, r5
 8001ec4:	d022      	beq.n	8001f0c <__gedf2+0x88>
 8001ec6:	2c00      	cmp	r4, #0
 8001ec8:	d010      	beq.n	8001eec <__gedf2+0x68>
 8001eca:	4281      	cmp	r1, r0
 8001ecc:	d022      	beq.n	8001f14 <__gedf2+0x90>
 8001ece:	2002      	movs	r0, #2
 8001ed0:	3901      	subs	r1, #1
 8001ed2:	4008      	ands	r0, r1
 8001ed4:	3801      	subs	r0, #1
 8001ed6:	bcc0      	pop	{r6, r7}
 8001ed8:	46b9      	mov	r9, r7
 8001eda:	46b0      	mov	r8, r6
 8001edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ede:	464d      	mov	r5, r9
 8001ee0:	432e      	orrs	r6, r5
 8001ee2:	d129      	bne.n	8001f38 <__gedf2+0xb4>
 8001ee4:	2a00      	cmp	r2, #0
 8001ee6:	d1f0      	bne.n	8001eca <__gedf2+0x46>
 8001ee8:	433c      	orrs	r4, r7
 8001eea:	d1ee      	bne.n	8001eca <__gedf2+0x46>
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d1f2      	bne.n	8001ed6 <__gedf2+0x52>
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	4240      	negs	r0, r0
 8001ef4:	e7ef      	b.n	8001ed6 <__gedf2+0x52>
 8001ef6:	003d      	movs	r5, r7
 8001ef8:	4325      	orrs	r5, r4
 8001efa:	d11d      	bne.n	8001f38 <__gedf2+0xb4>
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d0ee      	beq.n	8001ede <__gedf2+0x5a>
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1e2      	bne.n	8001eca <__gedf2+0x46>
 8001f04:	464c      	mov	r4, r9
 8001f06:	4326      	orrs	r6, r4
 8001f08:	d1df      	bne.n	8001eca <__gedf2+0x46>
 8001f0a:	e7e0      	b.n	8001ece <__gedf2+0x4a>
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	2c00      	cmp	r4, #0
 8001f10:	d0e1      	beq.n	8001ed6 <__gedf2+0x52>
 8001f12:	e7dc      	b.n	8001ece <__gedf2+0x4a>
 8001f14:	429a      	cmp	r2, r3
 8001f16:	dc0a      	bgt.n	8001f2e <__gedf2+0xaa>
 8001f18:	dbe8      	blt.n	8001eec <__gedf2+0x68>
 8001f1a:	454f      	cmp	r7, r9
 8001f1c:	d8d7      	bhi.n	8001ece <__gedf2+0x4a>
 8001f1e:	d00e      	beq.n	8001f3e <__gedf2+0xba>
 8001f20:	2000      	movs	r0, #0
 8001f22:	454f      	cmp	r7, r9
 8001f24:	d2d7      	bcs.n	8001ed6 <__gedf2+0x52>
 8001f26:	2900      	cmp	r1, #0
 8001f28:	d0e2      	beq.n	8001ef0 <__gedf2+0x6c>
 8001f2a:	0008      	movs	r0, r1
 8001f2c:	e7d3      	b.n	8001ed6 <__gedf2+0x52>
 8001f2e:	4243      	negs	r3, r0
 8001f30:	4158      	adcs	r0, r3
 8001f32:	0040      	lsls	r0, r0, #1
 8001f34:	3801      	subs	r0, #1
 8001f36:	e7ce      	b.n	8001ed6 <__gedf2+0x52>
 8001f38:	2002      	movs	r0, #2
 8001f3a:	4240      	negs	r0, r0
 8001f3c:	e7cb      	b.n	8001ed6 <__gedf2+0x52>
 8001f3e:	45c4      	cmp	ip, r8
 8001f40:	d8c5      	bhi.n	8001ece <__gedf2+0x4a>
 8001f42:	2000      	movs	r0, #0
 8001f44:	45c4      	cmp	ip, r8
 8001f46:	d2c6      	bcs.n	8001ed6 <__gedf2+0x52>
 8001f48:	e7ed      	b.n	8001f26 <__gedf2+0xa2>
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	000007ff 	.word	0x000007ff

08001f50 <__ledf2>:
 8001f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f52:	4647      	mov	r7, r8
 8001f54:	46ce      	mov	lr, r9
 8001f56:	0004      	movs	r4, r0
 8001f58:	0018      	movs	r0, r3
 8001f5a:	0016      	movs	r6, r2
 8001f5c:	031b      	lsls	r3, r3, #12
 8001f5e:	0b1b      	lsrs	r3, r3, #12
 8001f60:	4d2c      	ldr	r5, [pc, #176]	; (8002014 <__ledf2+0xc4>)
 8001f62:	004a      	lsls	r2, r1, #1
 8001f64:	4699      	mov	r9, r3
 8001f66:	b580      	push	{r7, lr}
 8001f68:	0043      	lsls	r3, r0, #1
 8001f6a:	030f      	lsls	r7, r1, #12
 8001f6c:	46a4      	mov	ip, r4
 8001f6e:	46b0      	mov	r8, r6
 8001f70:	0b3f      	lsrs	r7, r7, #12
 8001f72:	0d52      	lsrs	r2, r2, #21
 8001f74:	0fc9      	lsrs	r1, r1, #31
 8001f76:	0d5b      	lsrs	r3, r3, #21
 8001f78:	0fc0      	lsrs	r0, r0, #31
 8001f7a:	42aa      	cmp	r2, r5
 8001f7c:	d00d      	beq.n	8001f9a <__ledf2+0x4a>
 8001f7e:	42ab      	cmp	r3, r5
 8001f80:	d010      	beq.n	8001fa4 <__ledf2+0x54>
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	d127      	bne.n	8001fd6 <__ledf2+0x86>
 8001f86:	433c      	orrs	r4, r7
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d111      	bne.n	8001fb0 <__ledf2+0x60>
 8001f8c:	464d      	mov	r5, r9
 8001f8e:	432e      	orrs	r6, r5
 8001f90:	d10e      	bne.n	8001fb0 <__ledf2+0x60>
 8001f92:	2000      	movs	r0, #0
 8001f94:	2c00      	cmp	r4, #0
 8001f96:	d015      	beq.n	8001fc4 <__ledf2+0x74>
 8001f98:	e00e      	b.n	8001fb8 <__ledf2+0x68>
 8001f9a:	003d      	movs	r5, r7
 8001f9c:	4325      	orrs	r5, r4
 8001f9e:	d110      	bne.n	8001fc2 <__ledf2+0x72>
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d118      	bne.n	8001fd6 <__ledf2+0x86>
 8001fa4:	464d      	mov	r5, r9
 8001fa6:	432e      	orrs	r6, r5
 8001fa8:	d10b      	bne.n	8001fc2 <__ledf2+0x72>
 8001faa:	2a00      	cmp	r2, #0
 8001fac:	d102      	bne.n	8001fb4 <__ledf2+0x64>
 8001fae:	433c      	orrs	r4, r7
 8001fb0:	2c00      	cmp	r4, #0
 8001fb2:	d00b      	beq.n	8001fcc <__ledf2+0x7c>
 8001fb4:	4281      	cmp	r1, r0
 8001fb6:	d014      	beq.n	8001fe2 <__ledf2+0x92>
 8001fb8:	2002      	movs	r0, #2
 8001fba:	3901      	subs	r1, #1
 8001fbc:	4008      	ands	r0, r1
 8001fbe:	3801      	subs	r0, #1
 8001fc0:	e000      	b.n	8001fc4 <__ledf2+0x74>
 8001fc2:	2002      	movs	r0, #2
 8001fc4:	bcc0      	pop	{r6, r7}
 8001fc6:	46b9      	mov	r9, r7
 8001fc8:	46b0      	mov	r8, r6
 8001fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	d1f9      	bne.n	8001fc4 <__ledf2+0x74>
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	4240      	negs	r0, r0
 8001fd4:	e7f6      	b.n	8001fc4 <__ledf2+0x74>
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1ec      	bne.n	8001fb4 <__ledf2+0x64>
 8001fda:	464c      	mov	r4, r9
 8001fdc:	4326      	orrs	r6, r4
 8001fde:	d1e9      	bne.n	8001fb4 <__ledf2+0x64>
 8001fe0:	e7ea      	b.n	8001fb8 <__ledf2+0x68>
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	dd04      	ble.n	8001ff0 <__ledf2+0xa0>
 8001fe6:	4243      	negs	r3, r0
 8001fe8:	4158      	adcs	r0, r3
 8001fea:	0040      	lsls	r0, r0, #1
 8001fec:	3801      	subs	r0, #1
 8001fee:	e7e9      	b.n	8001fc4 <__ledf2+0x74>
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	dbeb      	blt.n	8001fcc <__ledf2+0x7c>
 8001ff4:	454f      	cmp	r7, r9
 8001ff6:	d8df      	bhi.n	8001fb8 <__ledf2+0x68>
 8001ff8:	d006      	beq.n	8002008 <__ledf2+0xb8>
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	454f      	cmp	r7, r9
 8001ffe:	d2e1      	bcs.n	8001fc4 <__ledf2+0x74>
 8002000:	2900      	cmp	r1, #0
 8002002:	d0e5      	beq.n	8001fd0 <__ledf2+0x80>
 8002004:	0008      	movs	r0, r1
 8002006:	e7dd      	b.n	8001fc4 <__ledf2+0x74>
 8002008:	45c4      	cmp	ip, r8
 800200a:	d8d5      	bhi.n	8001fb8 <__ledf2+0x68>
 800200c:	2000      	movs	r0, #0
 800200e:	45c4      	cmp	ip, r8
 8002010:	d2d8      	bcs.n	8001fc4 <__ledf2+0x74>
 8002012:	e7f5      	b.n	8002000 <__ledf2+0xb0>
 8002014:	000007ff 	.word	0x000007ff

08002018 <__aeabi_dmul>:
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	4645      	mov	r5, r8
 800201c:	46de      	mov	lr, fp
 800201e:	4657      	mov	r7, sl
 8002020:	464e      	mov	r6, r9
 8002022:	b5e0      	push	{r5, r6, r7, lr}
 8002024:	001f      	movs	r7, r3
 8002026:	030b      	lsls	r3, r1, #12
 8002028:	0b1b      	lsrs	r3, r3, #12
 800202a:	469b      	mov	fp, r3
 800202c:	004d      	lsls	r5, r1, #1
 800202e:	0fcb      	lsrs	r3, r1, #31
 8002030:	0004      	movs	r4, r0
 8002032:	4691      	mov	r9, r2
 8002034:	4698      	mov	r8, r3
 8002036:	b087      	sub	sp, #28
 8002038:	0d6d      	lsrs	r5, r5, #21
 800203a:	d100      	bne.n	800203e <__aeabi_dmul+0x26>
 800203c:	e1cd      	b.n	80023da <__aeabi_dmul+0x3c2>
 800203e:	4bce      	ldr	r3, [pc, #824]	; (8002378 <__aeabi_dmul+0x360>)
 8002040:	429d      	cmp	r5, r3
 8002042:	d100      	bne.n	8002046 <__aeabi_dmul+0x2e>
 8002044:	e1e9      	b.n	800241a <__aeabi_dmul+0x402>
 8002046:	465a      	mov	r2, fp
 8002048:	0f43      	lsrs	r3, r0, #29
 800204a:	00d2      	lsls	r2, r2, #3
 800204c:	4313      	orrs	r3, r2
 800204e:	2280      	movs	r2, #128	; 0x80
 8002050:	0412      	lsls	r2, r2, #16
 8002052:	431a      	orrs	r2, r3
 8002054:	00c3      	lsls	r3, r0, #3
 8002056:	469a      	mov	sl, r3
 8002058:	4bc8      	ldr	r3, [pc, #800]	; (800237c <__aeabi_dmul+0x364>)
 800205a:	4693      	mov	fp, r2
 800205c:	469c      	mov	ip, r3
 800205e:	2300      	movs	r3, #0
 8002060:	2600      	movs	r6, #0
 8002062:	4465      	add	r5, ip
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	033c      	lsls	r4, r7, #12
 8002068:	007b      	lsls	r3, r7, #1
 800206a:	4648      	mov	r0, r9
 800206c:	0b24      	lsrs	r4, r4, #12
 800206e:	0d5b      	lsrs	r3, r3, #21
 8002070:	0fff      	lsrs	r7, r7, #31
 8002072:	2b00      	cmp	r3, #0
 8002074:	d100      	bne.n	8002078 <__aeabi_dmul+0x60>
 8002076:	e189      	b.n	800238c <__aeabi_dmul+0x374>
 8002078:	4abf      	ldr	r2, [pc, #764]	; (8002378 <__aeabi_dmul+0x360>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d019      	beq.n	80020b2 <__aeabi_dmul+0x9a>
 800207e:	0f42      	lsrs	r2, r0, #29
 8002080:	00e4      	lsls	r4, r4, #3
 8002082:	4322      	orrs	r2, r4
 8002084:	2480      	movs	r4, #128	; 0x80
 8002086:	0424      	lsls	r4, r4, #16
 8002088:	4314      	orrs	r4, r2
 800208a:	4abc      	ldr	r2, [pc, #752]	; (800237c <__aeabi_dmul+0x364>)
 800208c:	2100      	movs	r1, #0
 800208e:	4694      	mov	ip, r2
 8002090:	4642      	mov	r2, r8
 8002092:	4463      	add	r3, ip
 8002094:	195b      	adds	r3, r3, r5
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	9b01      	ldr	r3, [sp, #4]
 800209a:	407a      	eors	r2, r7
 800209c:	3301      	adds	r3, #1
 800209e:	00c0      	lsls	r0, r0, #3
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	9302      	str	r3, [sp, #8]
 80020a4:	2e0a      	cmp	r6, #10
 80020a6:	dd1c      	ble.n	80020e2 <__aeabi_dmul+0xca>
 80020a8:	003a      	movs	r2, r7
 80020aa:	2e0b      	cmp	r6, #11
 80020ac:	d05e      	beq.n	800216c <__aeabi_dmul+0x154>
 80020ae:	4647      	mov	r7, r8
 80020b0:	e056      	b.n	8002160 <__aeabi_dmul+0x148>
 80020b2:	4649      	mov	r1, r9
 80020b4:	4bb0      	ldr	r3, [pc, #704]	; (8002378 <__aeabi_dmul+0x360>)
 80020b6:	4321      	orrs	r1, r4
 80020b8:	18eb      	adds	r3, r5, r3
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	2900      	cmp	r1, #0
 80020be:	d12a      	bne.n	8002116 <__aeabi_dmul+0xfe>
 80020c0:	2080      	movs	r0, #128	; 0x80
 80020c2:	2202      	movs	r2, #2
 80020c4:	0100      	lsls	r0, r0, #4
 80020c6:	002b      	movs	r3, r5
 80020c8:	4684      	mov	ip, r0
 80020ca:	4316      	orrs	r6, r2
 80020cc:	4642      	mov	r2, r8
 80020ce:	4463      	add	r3, ip
 80020d0:	407a      	eors	r2, r7
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	9302      	str	r3, [sp, #8]
 80020d6:	2e0a      	cmp	r6, #10
 80020d8:	dd00      	ble.n	80020dc <__aeabi_dmul+0xc4>
 80020da:	e231      	b.n	8002540 <__aeabi_dmul+0x528>
 80020dc:	2000      	movs	r0, #0
 80020de:	2400      	movs	r4, #0
 80020e0:	2102      	movs	r1, #2
 80020e2:	2e02      	cmp	r6, #2
 80020e4:	dc26      	bgt.n	8002134 <__aeabi_dmul+0x11c>
 80020e6:	3e01      	subs	r6, #1
 80020e8:	2e01      	cmp	r6, #1
 80020ea:	d852      	bhi.n	8002192 <__aeabi_dmul+0x17a>
 80020ec:	2902      	cmp	r1, #2
 80020ee:	d04c      	beq.n	800218a <__aeabi_dmul+0x172>
 80020f0:	2901      	cmp	r1, #1
 80020f2:	d000      	beq.n	80020f6 <__aeabi_dmul+0xde>
 80020f4:	e118      	b.n	8002328 <__aeabi_dmul+0x310>
 80020f6:	2300      	movs	r3, #0
 80020f8:	2400      	movs	r4, #0
 80020fa:	2500      	movs	r5, #0
 80020fc:	051b      	lsls	r3, r3, #20
 80020fe:	4323      	orrs	r3, r4
 8002100:	07d2      	lsls	r2, r2, #31
 8002102:	4313      	orrs	r3, r2
 8002104:	0028      	movs	r0, r5
 8002106:	0019      	movs	r1, r3
 8002108:	b007      	add	sp, #28
 800210a:	bcf0      	pop	{r4, r5, r6, r7}
 800210c:	46bb      	mov	fp, r7
 800210e:	46b2      	mov	sl, r6
 8002110:	46a9      	mov	r9, r5
 8002112:	46a0      	mov	r8, r4
 8002114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002116:	2180      	movs	r1, #128	; 0x80
 8002118:	2203      	movs	r2, #3
 800211a:	0109      	lsls	r1, r1, #4
 800211c:	002b      	movs	r3, r5
 800211e:	468c      	mov	ip, r1
 8002120:	4316      	orrs	r6, r2
 8002122:	4642      	mov	r2, r8
 8002124:	4463      	add	r3, ip
 8002126:	407a      	eors	r2, r7
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	9302      	str	r3, [sp, #8]
 800212c:	2e0a      	cmp	r6, #10
 800212e:	dd00      	ble.n	8002132 <__aeabi_dmul+0x11a>
 8002130:	e228      	b.n	8002584 <__aeabi_dmul+0x56c>
 8002132:	2103      	movs	r1, #3
 8002134:	2501      	movs	r5, #1
 8002136:	40b5      	lsls	r5, r6
 8002138:	46ac      	mov	ip, r5
 800213a:	26a6      	movs	r6, #166	; 0xa6
 800213c:	4663      	mov	r3, ip
 800213e:	00f6      	lsls	r6, r6, #3
 8002140:	4035      	ands	r5, r6
 8002142:	4233      	tst	r3, r6
 8002144:	d10b      	bne.n	800215e <__aeabi_dmul+0x146>
 8002146:	2690      	movs	r6, #144	; 0x90
 8002148:	00b6      	lsls	r6, r6, #2
 800214a:	4233      	tst	r3, r6
 800214c:	d118      	bne.n	8002180 <__aeabi_dmul+0x168>
 800214e:	3eb9      	subs	r6, #185	; 0xb9
 8002150:	3eff      	subs	r6, #255	; 0xff
 8002152:	421e      	tst	r6, r3
 8002154:	d01d      	beq.n	8002192 <__aeabi_dmul+0x17a>
 8002156:	46a3      	mov	fp, r4
 8002158:	4682      	mov	sl, r0
 800215a:	9100      	str	r1, [sp, #0]
 800215c:	e000      	b.n	8002160 <__aeabi_dmul+0x148>
 800215e:	0017      	movs	r7, r2
 8002160:	9900      	ldr	r1, [sp, #0]
 8002162:	003a      	movs	r2, r7
 8002164:	2902      	cmp	r1, #2
 8002166:	d010      	beq.n	800218a <__aeabi_dmul+0x172>
 8002168:	465c      	mov	r4, fp
 800216a:	4650      	mov	r0, sl
 800216c:	2903      	cmp	r1, #3
 800216e:	d1bf      	bne.n	80020f0 <__aeabi_dmul+0xd8>
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	031b      	lsls	r3, r3, #12
 8002174:	431c      	orrs	r4, r3
 8002176:	0324      	lsls	r4, r4, #12
 8002178:	0005      	movs	r5, r0
 800217a:	4b7f      	ldr	r3, [pc, #508]	; (8002378 <__aeabi_dmul+0x360>)
 800217c:	0b24      	lsrs	r4, r4, #12
 800217e:	e7bd      	b.n	80020fc <__aeabi_dmul+0xe4>
 8002180:	2480      	movs	r4, #128	; 0x80
 8002182:	2200      	movs	r2, #0
 8002184:	4b7c      	ldr	r3, [pc, #496]	; (8002378 <__aeabi_dmul+0x360>)
 8002186:	0324      	lsls	r4, r4, #12
 8002188:	e7b8      	b.n	80020fc <__aeabi_dmul+0xe4>
 800218a:	2400      	movs	r4, #0
 800218c:	2500      	movs	r5, #0
 800218e:	4b7a      	ldr	r3, [pc, #488]	; (8002378 <__aeabi_dmul+0x360>)
 8002190:	e7b4      	b.n	80020fc <__aeabi_dmul+0xe4>
 8002192:	4653      	mov	r3, sl
 8002194:	041e      	lsls	r6, r3, #16
 8002196:	0c36      	lsrs	r6, r6, #16
 8002198:	0c1f      	lsrs	r7, r3, #16
 800219a:	0033      	movs	r3, r6
 800219c:	0c01      	lsrs	r1, r0, #16
 800219e:	0400      	lsls	r0, r0, #16
 80021a0:	0c00      	lsrs	r0, r0, #16
 80021a2:	4343      	muls	r3, r0
 80021a4:	4698      	mov	r8, r3
 80021a6:	0003      	movs	r3, r0
 80021a8:	437b      	muls	r3, r7
 80021aa:	4699      	mov	r9, r3
 80021ac:	0033      	movs	r3, r6
 80021ae:	434b      	muls	r3, r1
 80021b0:	469c      	mov	ip, r3
 80021b2:	4643      	mov	r3, r8
 80021b4:	000d      	movs	r5, r1
 80021b6:	0c1b      	lsrs	r3, r3, #16
 80021b8:	469a      	mov	sl, r3
 80021ba:	437d      	muls	r5, r7
 80021bc:	44cc      	add	ip, r9
 80021be:	44d4      	add	ip, sl
 80021c0:	9500      	str	r5, [sp, #0]
 80021c2:	45e1      	cmp	r9, ip
 80021c4:	d904      	bls.n	80021d0 <__aeabi_dmul+0x1b8>
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	025b      	lsls	r3, r3, #9
 80021ca:	4699      	mov	r9, r3
 80021cc:	444d      	add	r5, r9
 80021ce:	9500      	str	r5, [sp, #0]
 80021d0:	4663      	mov	r3, ip
 80021d2:	0c1b      	lsrs	r3, r3, #16
 80021d4:	001d      	movs	r5, r3
 80021d6:	4663      	mov	r3, ip
 80021d8:	041b      	lsls	r3, r3, #16
 80021da:	469c      	mov	ip, r3
 80021dc:	4643      	mov	r3, r8
 80021de:	041b      	lsls	r3, r3, #16
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	4698      	mov	r8, r3
 80021e4:	4663      	mov	r3, ip
 80021e6:	4443      	add	r3, r8
 80021e8:	9303      	str	r3, [sp, #12]
 80021ea:	0c23      	lsrs	r3, r4, #16
 80021ec:	4698      	mov	r8, r3
 80021ee:	0033      	movs	r3, r6
 80021f0:	0424      	lsls	r4, r4, #16
 80021f2:	0c24      	lsrs	r4, r4, #16
 80021f4:	4363      	muls	r3, r4
 80021f6:	469c      	mov	ip, r3
 80021f8:	0023      	movs	r3, r4
 80021fa:	437b      	muls	r3, r7
 80021fc:	4699      	mov	r9, r3
 80021fe:	4643      	mov	r3, r8
 8002200:	435e      	muls	r6, r3
 8002202:	435f      	muls	r7, r3
 8002204:	444e      	add	r6, r9
 8002206:	4663      	mov	r3, ip
 8002208:	46b2      	mov	sl, r6
 800220a:	0c1e      	lsrs	r6, r3, #16
 800220c:	4456      	add	r6, sl
 800220e:	45b1      	cmp	r9, r6
 8002210:	d903      	bls.n	800221a <__aeabi_dmul+0x202>
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	025b      	lsls	r3, r3, #9
 8002216:	4699      	mov	r9, r3
 8002218:	444f      	add	r7, r9
 800221a:	0c33      	lsrs	r3, r6, #16
 800221c:	4699      	mov	r9, r3
 800221e:	003b      	movs	r3, r7
 8002220:	444b      	add	r3, r9
 8002222:	9305      	str	r3, [sp, #20]
 8002224:	4663      	mov	r3, ip
 8002226:	46ac      	mov	ip, r5
 8002228:	041f      	lsls	r7, r3, #16
 800222a:	0c3f      	lsrs	r7, r7, #16
 800222c:	0436      	lsls	r6, r6, #16
 800222e:	19f6      	adds	r6, r6, r7
 8002230:	44b4      	add	ip, r6
 8002232:	4663      	mov	r3, ip
 8002234:	9304      	str	r3, [sp, #16]
 8002236:	465b      	mov	r3, fp
 8002238:	0c1b      	lsrs	r3, r3, #16
 800223a:	469c      	mov	ip, r3
 800223c:	465b      	mov	r3, fp
 800223e:	041f      	lsls	r7, r3, #16
 8002240:	0c3f      	lsrs	r7, r7, #16
 8002242:	003b      	movs	r3, r7
 8002244:	4343      	muls	r3, r0
 8002246:	4699      	mov	r9, r3
 8002248:	4663      	mov	r3, ip
 800224a:	4343      	muls	r3, r0
 800224c:	469a      	mov	sl, r3
 800224e:	464b      	mov	r3, r9
 8002250:	4660      	mov	r0, ip
 8002252:	0c1b      	lsrs	r3, r3, #16
 8002254:	469b      	mov	fp, r3
 8002256:	4348      	muls	r0, r1
 8002258:	4379      	muls	r1, r7
 800225a:	4451      	add	r1, sl
 800225c:	4459      	add	r1, fp
 800225e:	458a      	cmp	sl, r1
 8002260:	d903      	bls.n	800226a <__aeabi_dmul+0x252>
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	025b      	lsls	r3, r3, #9
 8002266:	469a      	mov	sl, r3
 8002268:	4450      	add	r0, sl
 800226a:	0c0b      	lsrs	r3, r1, #16
 800226c:	469a      	mov	sl, r3
 800226e:	464b      	mov	r3, r9
 8002270:	041b      	lsls	r3, r3, #16
 8002272:	0c1b      	lsrs	r3, r3, #16
 8002274:	4699      	mov	r9, r3
 8002276:	003b      	movs	r3, r7
 8002278:	4363      	muls	r3, r4
 800227a:	0409      	lsls	r1, r1, #16
 800227c:	4645      	mov	r5, r8
 800227e:	4449      	add	r1, r9
 8002280:	4699      	mov	r9, r3
 8002282:	4663      	mov	r3, ip
 8002284:	435c      	muls	r4, r3
 8002286:	436b      	muls	r3, r5
 8002288:	469c      	mov	ip, r3
 800228a:	464b      	mov	r3, r9
 800228c:	0c1b      	lsrs	r3, r3, #16
 800228e:	4698      	mov	r8, r3
 8002290:	436f      	muls	r7, r5
 8002292:	193f      	adds	r7, r7, r4
 8002294:	4447      	add	r7, r8
 8002296:	4450      	add	r0, sl
 8002298:	42bc      	cmp	r4, r7
 800229a:	d903      	bls.n	80022a4 <__aeabi_dmul+0x28c>
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	025b      	lsls	r3, r3, #9
 80022a0:	4698      	mov	r8, r3
 80022a2:	44c4      	add	ip, r8
 80022a4:	9b04      	ldr	r3, [sp, #16]
 80022a6:	9d00      	ldr	r5, [sp, #0]
 80022a8:	4698      	mov	r8, r3
 80022aa:	4445      	add	r5, r8
 80022ac:	42b5      	cmp	r5, r6
 80022ae:	41b6      	sbcs	r6, r6
 80022b0:	4273      	negs	r3, r6
 80022b2:	4698      	mov	r8, r3
 80022b4:	464b      	mov	r3, r9
 80022b6:	041e      	lsls	r6, r3, #16
 80022b8:	9b05      	ldr	r3, [sp, #20]
 80022ba:	043c      	lsls	r4, r7, #16
 80022bc:	4699      	mov	r9, r3
 80022be:	0c36      	lsrs	r6, r6, #16
 80022c0:	19a4      	adds	r4, r4, r6
 80022c2:	444c      	add	r4, r9
 80022c4:	46a1      	mov	r9, r4
 80022c6:	4683      	mov	fp, r0
 80022c8:	186e      	adds	r6, r5, r1
 80022ca:	44c1      	add	r9, r8
 80022cc:	428e      	cmp	r6, r1
 80022ce:	4189      	sbcs	r1, r1
 80022d0:	44cb      	add	fp, r9
 80022d2:	465d      	mov	r5, fp
 80022d4:	4249      	negs	r1, r1
 80022d6:	186d      	adds	r5, r5, r1
 80022d8:	429c      	cmp	r4, r3
 80022da:	41a4      	sbcs	r4, r4
 80022dc:	45c1      	cmp	r9, r8
 80022de:	419b      	sbcs	r3, r3
 80022e0:	4583      	cmp	fp, r0
 80022e2:	4180      	sbcs	r0, r0
 80022e4:	428d      	cmp	r5, r1
 80022e6:	4189      	sbcs	r1, r1
 80022e8:	425b      	negs	r3, r3
 80022ea:	4264      	negs	r4, r4
 80022ec:	431c      	orrs	r4, r3
 80022ee:	4240      	negs	r0, r0
 80022f0:	9b03      	ldr	r3, [sp, #12]
 80022f2:	4249      	negs	r1, r1
 80022f4:	4301      	orrs	r1, r0
 80022f6:	0270      	lsls	r0, r6, #9
 80022f8:	0c3f      	lsrs	r7, r7, #16
 80022fa:	4318      	orrs	r0, r3
 80022fc:	19e4      	adds	r4, r4, r7
 80022fe:	1e47      	subs	r7, r0, #1
 8002300:	41b8      	sbcs	r0, r7
 8002302:	1864      	adds	r4, r4, r1
 8002304:	4464      	add	r4, ip
 8002306:	0df6      	lsrs	r6, r6, #23
 8002308:	0261      	lsls	r1, r4, #9
 800230a:	4330      	orrs	r0, r6
 800230c:	0dec      	lsrs	r4, r5, #23
 800230e:	026e      	lsls	r6, r5, #9
 8002310:	430c      	orrs	r4, r1
 8002312:	4330      	orrs	r0, r6
 8002314:	01c9      	lsls	r1, r1, #7
 8002316:	d400      	bmi.n	800231a <__aeabi_dmul+0x302>
 8002318:	e0f1      	b.n	80024fe <__aeabi_dmul+0x4e6>
 800231a:	2101      	movs	r1, #1
 800231c:	0843      	lsrs	r3, r0, #1
 800231e:	4001      	ands	r1, r0
 8002320:	430b      	orrs	r3, r1
 8002322:	07e0      	lsls	r0, r4, #31
 8002324:	4318      	orrs	r0, r3
 8002326:	0864      	lsrs	r4, r4, #1
 8002328:	4915      	ldr	r1, [pc, #84]	; (8002380 <__aeabi_dmul+0x368>)
 800232a:	9b02      	ldr	r3, [sp, #8]
 800232c:	468c      	mov	ip, r1
 800232e:	4463      	add	r3, ip
 8002330:	2b00      	cmp	r3, #0
 8002332:	dc00      	bgt.n	8002336 <__aeabi_dmul+0x31e>
 8002334:	e097      	b.n	8002466 <__aeabi_dmul+0x44e>
 8002336:	0741      	lsls	r1, r0, #29
 8002338:	d009      	beq.n	800234e <__aeabi_dmul+0x336>
 800233a:	210f      	movs	r1, #15
 800233c:	4001      	ands	r1, r0
 800233e:	2904      	cmp	r1, #4
 8002340:	d005      	beq.n	800234e <__aeabi_dmul+0x336>
 8002342:	1d01      	adds	r1, r0, #4
 8002344:	4281      	cmp	r1, r0
 8002346:	4180      	sbcs	r0, r0
 8002348:	4240      	negs	r0, r0
 800234a:	1824      	adds	r4, r4, r0
 800234c:	0008      	movs	r0, r1
 800234e:	01e1      	lsls	r1, r4, #7
 8002350:	d506      	bpl.n	8002360 <__aeabi_dmul+0x348>
 8002352:	2180      	movs	r1, #128	; 0x80
 8002354:	00c9      	lsls	r1, r1, #3
 8002356:	468c      	mov	ip, r1
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <__aeabi_dmul+0x36c>)
 800235a:	401c      	ands	r4, r3
 800235c:	9b02      	ldr	r3, [sp, #8]
 800235e:	4463      	add	r3, ip
 8002360:	4909      	ldr	r1, [pc, #36]	; (8002388 <__aeabi_dmul+0x370>)
 8002362:	428b      	cmp	r3, r1
 8002364:	dd00      	ble.n	8002368 <__aeabi_dmul+0x350>
 8002366:	e710      	b.n	800218a <__aeabi_dmul+0x172>
 8002368:	0761      	lsls	r1, r4, #29
 800236a:	08c5      	lsrs	r5, r0, #3
 800236c:	0264      	lsls	r4, r4, #9
 800236e:	055b      	lsls	r3, r3, #21
 8002370:	430d      	orrs	r5, r1
 8002372:	0b24      	lsrs	r4, r4, #12
 8002374:	0d5b      	lsrs	r3, r3, #21
 8002376:	e6c1      	b.n	80020fc <__aeabi_dmul+0xe4>
 8002378:	000007ff 	.word	0x000007ff
 800237c:	fffffc01 	.word	0xfffffc01
 8002380:	000003ff 	.word	0x000003ff
 8002384:	feffffff 	.word	0xfeffffff
 8002388:	000007fe 	.word	0x000007fe
 800238c:	464b      	mov	r3, r9
 800238e:	4323      	orrs	r3, r4
 8002390:	d059      	beq.n	8002446 <__aeabi_dmul+0x42e>
 8002392:	2c00      	cmp	r4, #0
 8002394:	d100      	bne.n	8002398 <__aeabi_dmul+0x380>
 8002396:	e0a3      	b.n	80024e0 <__aeabi_dmul+0x4c8>
 8002398:	0020      	movs	r0, r4
 800239a:	f000 fdf9 	bl	8002f90 <__clzsi2>
 800239e:	0001      	movs	r1, r0
 80023a0:	0003      	movs	r3, r0
 80023a2:	390b      	subs	r1, #11
 80023a4:	221d      	movs	r2, #29
 80023a6:	1a52      	subs	r2, r2, r1
 80023a8:	4649      	mov	r1, r9
 80023aa:	0018      	movs	r0, r3
 80023ac:	40d1      	lsrs	r1, r2
 80023ae:	464a      	mov	r2, r9
 80023b0:	3808      	subs	r0, #8
 80023b2:	4082      	lsls	r2, r0
 80023b4:	4084      	lsls	r4, r0
 80023b6:	0010      	movs	r0, r2
 80023b8:	430c      	orrs	r4, r1
 80023ba:	4a74      	ldr	r2, [pc, #464]	; (800258c <__aeabi_dmul+0x574>)
 80023bc:	1aeb      	subs	r3, r5, r3
 80023be:	4694      	mov	ip, r2
 80023c0:	4642      	mov	r2, r8
 80023c2:	4463      	add	r3, ip
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	9b01      	ldr	r3, [sp, #4]
 80023c8:	407a      	eors	r2, r7
 80023ca:	3301      	adds	r3, #1
 80023cc:	2100      	movs	r1, #0
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	9302      	str	r3, [sp, #8]
 80023d2:	2e0a      	cmp	r6, #10
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_dmul+0x3c0>
 80023d6:	e667      	b.n	80020a8 <__aeabi_dmul+0x90>
 80023d8:	e683      	b.n	80020e2 <__aeabi_dmul+0xca>
 80023da:	465b      	mov	r3, fp
 80023dc:	4303      	orrs	r3, r0
 80023de:	469a      	mov	sl, r3
 80023e0:	d02a      	beq.n	8002438 <__aeabi_dmul+0x420>
 80023e2:	465b      	mov	r3, fp
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d06d      	beq.n	80024c4 <__aeabi_dmul+0x4ac>
 80023e8:	4658      	mov	r0, fp
 80023ea:	f000 fdd1 	bl	8002f90 <__clzsi2>
 80023ee:	0001      	movs	r1, r0
 80023f0:	0003      	movs	r3, r0
 80023f2:	390b      	subs	r1, #11
 80023f4:	221d      	movs	r2, #29
 80023f6:	1a52      	subs	r2, r2, r1
 80023f8:	0021      	movs	r1, r4
 80023fa:	0018      	movs	r0, r3
 80023fc:	465d      	mov	r5, fp
 80023fe:	40d1      	lsrs	r1, r2
 8002400:	3808      	subs	r0, #8
 8002402:	4085      	lsls	r5, r0
 8002404:	000a      	movs	r2, r1
 8002406:	4084      	lsls	r4, r0
 8002408:	432a      	orrs	r2, r5
 800240a:	4693      	mov	fp, r2
 800240c:	46a2      	mov	sl, r4
 800240e:	4d5f      	ldr	r5, [pc, #380]	; (800258c <__aeabi_dmul+0x574>)
 8002410:	2600      	movs	r6, #0
 8002412:	1aed      	subs	r5, r5, r3
 8002414:	2300      	movs	r3, #0
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	e625      	b.n	8002066 <__aeabi_dmul+0x4e>
 800241a:	465b      	mov	r3, fp
 800241c:	4303      	orrs	r3, r0
 800241e:	469a      	mov	sl, r3
 8002420:	d105      	bne.n	800242e <__aeabi_dmul+0x416>
 8002422:	2300      	movs	r3, #0
 8002424:	469b      	mov	fp, r3
 8002426:	3302      	adds	r3, #2
 8002428:	2608      	movs	r6, #8
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	e61b      	b.n	8002066 <__aeabi_dmul+0x4e>
 800242e:	2303      	movs	r3, #3
 8002430:	4682      	mov	sl, r0
 8002432:	260c      	movs	r6, #12
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	e616      	b.n	8002066 <__aeabi_dmul+0x4e>
 8002438:	2300      	movs	r3, #0
 800243a:	469b      	mov	fp, r3
 800243c:	3301      	adds	r3, #1
 800243e:	2604      	movs	r6, #4
 8002440:	2500      	movs	r5, #0
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	e60f      	b.n	8002066 <__aeabi_dmul+0x4e>
 8002446:	4642      	mov	r2, r8
 8002448:	3301      	adds	r3, #1
 800244a:	9501      	str	r5, [sp, #4]
 800244c:	431e      	orrs	r6, r3
 800244e:	9b01      	ldr	r3, [sp, #4]
 8002450:	407a      	eors	r2, r7
 8002452:	3301      	adds	r3, #1
 8002454:	2400      	movs	r4, #0
 8002456:	2000      	movs	r0, #0
 8002458:	2101      	movs	r1, #1
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	9302      	str	r3, [sp, #8]
 800245e:	2e0a      	cmp	r6, #10
 8002460:	dd00      	ble.n	8002464 <__aeabi_dmul+0x44c>
 8002462:	e621      	b.n	80020a8 <__aeabi_dmul+0x90>
 8002464:	e63d      	b.n	80020e2 <__aeabi_dmul+0xca>
 8002466:	2101      	movs	r1, #1
 8002468:	1ac9      	subs	r1, r1, r3
 800246a:	2938      	cmp	r1, #56	; 0x38
 800246c:	dd00      	ble.n	8002470 <__aeabi_dmul+0x458>
 800246e:	e642      	b.n	80020f6 <__aeabi_dmul+0xde>
 8002470:	291f      	cmp	r1, #31
 8002472:	dd47      	ble.n	8002504 <__aeabi_dmul+0x4ec>
 8002474:	261f      	movs	r6, #31
 8002476:	0025      	movs	r5, r4
 8002478:	4276      	negs	r6, r6
 800247a:	1af3      	subs	r3, r6, r3
 800247c:	40dd      	lsrs	r5, r3
 800247e:	002b      	movs	r3, r5
 8002480:	2920      	cmp	r1, #32
 8002482:	d005      	beq.n	8002490 <__aeabi_dmul+0x478>
 8002484:	4942      	ldr	r1, [pc, #264]	; (8002590 <__aeabi_dmul+0x578>)
 8002486:	9d02      	ldr	r5, [sp, #8]
 8002488:	468c      	mov	ip, r1
 800248a:	4465      	add	r5, ip
 800248c:	40ac      	lsls	r4, r5
 800248e:	4320      	orrs	r0, r4
 8002490:	1e41      	subs	r1, r0, #1
 8002492:	4188      	sbcs	r0, r1
 8002494:	4318      	orrs	r0, r3
 8002496:	2307      	movs	r3, #7
 8002498:	001d      	movs	r5, r3
 800249a:	2400      	movs	r4, #0
 800249c:	4005      	ands	r5, r0
 800249e:	4203      	tst	r3, r0
 80024a0:	d04a      	beq.n	8002538 <__aeabi_dmul+0x520>
 80024a2:	230f      	movs	r3, #15
 80024a4:	2400      	movs	r4, #0
 80024a6:	4003      	ands	r3, r0
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d042      	beq.n	8002532 <__aeabi_dmul+0x51a>
 80024ac:	1d03      	adds	r3, r0, #4
 80024ae:	4283      	cmp	r3, r0
 80024b0:	4180      	sbcs	r0, r0
 80024b2:	4240      	negs	r0, r0
 80024b4:	1824      	adds	r4, r4, r0
 80024b6:	0018      	movs	r0, r3
 80024b8:	0223      	lsls	r3, r4, #8
 80024ba:	d53a      	bpl.n	8002532 <__aeabi_dmul+0x51a>
 80024bc:	2301      	movs	r3, #1
 80024be:	2400      	movs	r4, #0
 80024c0:	2500      	movs	r5, #0
 80024c2:	e61b      	b.n	80020fc <__aeabi_dmul+0xe4>
 80024c4:	f000 fd64 	bl	8002f90 <__clzsi2>
 80024c8:	0001      	movs	r1, r0
 80024ca:	0003      	movs	r3, r0
 80024cc:	3115      	adds	r1, #21
 80024ce:	3320      	adds	r3, #32
 80024d0:	291c      	cmp	r1, #28
 80024d2:	dd8f      	ble.n	80023f4 <__aeabi_dmul+0x3dc>
 80024d4:	3808      	subs	r0, #8
 80024d6:	2200      	movs	r2, #0
 80024d8:	4084      	lsls	r4, r0
 80024da:	4692      	mov	sl, r2
 80024dc:	46a3      	mov	fp, r4
 80024de:	e796      	b.n	800240e <__aeabi_dmul+0x3f6>
 80024e0:	f000 fd56 	bl	8002f90 <__clzsi2>
 80024e4:	0001      	movs	r1, r0
 80024e6:	0003      	movs	r3, r0
 80024e8:	3115      	adds	r1, #21
 80024ea:	3320      	adds	r3, #32
 80024ec:	291c      	cmp	r1, #28
 80024ee:	dc00      	bgt.n	80024f2 <__aeabi_dmul+0x4da>
 80024f0:	e758      	b.n	80023a4 <__aeabi_dmul+0x38c>
 80024f2:	0002      	movs	r2, r0
 80024f4:	464c      	mov	r4, r9
 80024f6:	3a08      	subs	r2, #8
 80024f8:	2000      	movs	r0, #0
 80024fa:	4094      	lsls	r4, r2
 80024fc:	e75d      	b.n	80023ba <__aeabi_dmul+0x3a2>
 80024fe:	9b01      	ldr	r3, [sp, #4]
 8002500:	9302      	str	r3, [sp, #8]
 8002502:	e711      	b.n	8002328 <__aeabi_dmul+0x310>
 8002504:	4b23      	ldr	r3, [pc, #140]	; (8002594 <__aeabi_dmul+0x57c>)
 8002506:	0026      	movs	r6, r4
 8002508:	469c      	mov	ip, r3
 800250a:	0003      	movs	r3, r0
 800250c:	9d02      	ldr	r5, [sp, #8]
 800250e:	40cb      	lsrs	r3, r1
 8002510:	4465      	add	r5, ip
 8002512:	40ae      	lsls	r6, r5
 8002514:	431e      	orrs	r6, r3
 8002516:	0003      	movs	r3, r0
 8002518:	40ab      	lsls	r3, r5
 800251a:	1e58      	subs	r0, r3, #1
 800251c:	4183      	sbcs	r3, r0
 800251e:	0030      	movs	r0, r6
 8002520:	4318      	orrs	r0, r3
 8002522:	40cc      	lsrs	r4, r1
 8002524:	0743      	lsls	r3, r0, #29
 8002526:	d0c7      	beq.n	80024b8 <__aeabi_dmul+0x4a0>
 8002528:	230f      	movs	r3, #15
 800252a:	4003      	ands	r3, r0
 800252c:	2b04      	cmp	r3, #4
 800252e:	d1bd      	bne.n	80024ac <__aeabi_dmul+0x494>
 8002530:	e7c2      	b.n	80024b8 <__aeabi_dmul+0x4a0>
 8002532:	0765      	lsls	r5, r4, #29
 8002534:	0264      	lsls	r4, r4, #9
 8002536:	0b24      	lsrs	r4, r4, #12
 8002538:	08c0      	lsrs	r0, r0, #3
 800253a:	2300      	movs	r3, #0
 800253c:	4305      	orrs	r5, r0
 800253e:	e5dd      	b.n	80020fc <__aeabi_dmul+0xe4>
 8002540:	2500      	movs	r5, #0
 8002542:	2302      	movs	r3, #2
 8002544:	2e0f      	cmp	r6, #15
 8002546:	d10c      	bne.n	8002562 <__aeabi_dmul+0x54a>
 8002548:	2480      	movs	r4, #128	; 0x80
 800254a:	465b      	mov	r3, fp
 800254c:	0324      	lsls	r4, r4, #12
 800254e:	4223      	tst	r3, r4
 8002550:	d00e      	beq.n	8002570 <__aeabi_dmul+0x558>
 8002552:	4221      	tst	r1, r4
 8002554:	d10c      	bne.n	8002570 <__aeabi_dmul+0x558>
 8002556:	430c      	orrs	r4, r1
 8002558:	0324      	lsls	r4, r4, #12
 800255a:	003a      	movs	r2, r7
 800255c:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <__aeabi_dmul+0x580>)
 800255e:	0b24      	lsrs	r4, r4, #12
 8002560:	e5cc      	b.n	80020fc <__aeabi_dmul+0xe4>
 8002562:	2e0b      	cmp	r6, #11
 8002564:	d000      	beq.n	8002568 <__aeabi_dmul+0x550>
 8002566:	e5a2      	b.n	80020ae <__aeabi_dmul+0x96>
 8002568:	468b      	mov	fp, r1
 800256a:	46aa      	mov	sl, r5
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	e5f7      	b.n	8002160 <__aeabi_dmul+0x148>
 8002570:	2480      	movs	r4, #128	; 0x80
 8002572:	465b      	mov	r3, fp
 8002574:	0324      	lsls	r4, r4, #12
 8002576:	431c      	orrs	r4, r3
 8002578:	0324      	lsls	r4, r4, #12
 800257a:	4642      	mov	r2, r8
 800257c:	4655      	mov	r5, sl
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <__aeabi_dmul+0x580>)
 8002580:	0b24      	lsrs	r4, r4, #12
 8002582:	e5bb      	b.n	80020fc <__aeabi_dmul+0xe4>
 8002584:	464d      	mov	r5, r9
 8002586:	0021      	movs	r1, r4
 8002588:	2303      	movs	r3, #3
 800258a:	e7db      	b.n	8002544 <__aeabi_dmul+0x52c>
 800258c:	fffffc0d 	.word	0xfffffc0d
 8002590:	0000043e 	.word	0x0000043e
 8002594:	0000041e 	.word	0x0000041e
 8002598:	000007ff 	.word	0x000007ff

0800259c <__aeabi_dsub>:
 800259c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259e:	4657      	mov	r7, sl
 80025a0:	464e      	mov	r6, r9
 80025a2:	4645      	mov	r5, r8
 80025a4:	46de      	mov	lr, fp
 80025a6:	b5e0      	push	{r5, r6, r7, lr}
 80025a8:	000d      	movs	r5, r1
 80025aa:	0004      	movs	r4, r0
 80025ac:	0019      	movs	r1, r3
 80025ae:	0010      	movs	r0, r2
 80025b0:	032b      	lsls	r3, r5, #12
 80025b2:	0a5b      	lsrs	r3, r3, #9
 80025b4:	0f62      	lsrs	r2, r4, #29
 80025b6:	431a      	orrs	r2, r3
 80025b8:	00e3      	lsls	r3, r4, #3
 80025ba:	030c      	lsls	r4, r1, #12
 80025bc:	0a64      	lsrs	r4, r4, #9
 80025be:	0f47      	lsrs	r7, r0, #29
 80025c0:	4327      	orrs	r7, r4
 80025c2:	4cd0      	ldr	r4, [pc, #832]	; (8002904 <__aeabi_dsub+0x368>)
 80025c4:	006e      	lsls	r6, r5, #1
 80025c6:	4691      	mov	r9, r2
 80025c8:	b083      	sub	sp, #12
 80025ca:	004a      	lsls	r2, r1, #1
 80025cc:	00c0      	lsls	r0, r0, #3
 80025ce:	4698      	mov	r8, r3
 80025d0:	46a2      	mov	sl, r4
 80025d2:	0d76      	lsrs	r6, r6, #21
 80025d4:	0fed      	lsrs	r5, r5, #31
 80025d6:	0d52      	lsrs	r2, r2, #21
 80025d8:	0fc9      	lsrs	r1, r1, #31
 80025da:	9001      	str	r0, [sp, #4]
 80025dc:	42a2      	cmp	r2, r4
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x46>
 80025e0:	e0b9      	b.n	8002756 <__aeabi_dsub+0x1ba>
 80025e2:	2401      	movs	r4, #1
 80025e4:	4061      	eors	r1, r4
 80025e6:	468b      	mov	fp, r1
 80025e8:	428d      	cmp	r5, r1
 80025ea:	d100      	bne.n	80025ee <__aeabi_dsub+0x52>
 80025ec:	e08d      	b.n	800270a <__aeabi_dsub+0x16e>
 80025ee:	1ab4      	subs	r4, r6, r2
 80025f0:	46a4      	mov	ip, r4
 80025f2:	2c00      	cmp	r4, #0
 80025f4:	dc00      	bgt.n	80025f8 <__aeabi_dsub+0x5c>
 80025f6:	e0b7      	b.n	8002768 <__aeabi_dsub+0x1cc>
 80025f8:	2a00      	cmp	r2, #0
 80025fa:	d100      	bne.n	80025fe <__aeabi_dsub+0x62>
 80025fc:	e0cb      	b.n	8002796 <__aeabi_dsub+0x1fa>
 80025fe:	4ac1      	ldr	r2, [pc, #772]	; (8002904 <__aeabi_dsub+0x368>)
 8002600:	4296      	cmp	r6, r2
 8002602:	d100      	bne.n	8002606 <__aeabi_dsub+0x6a>
 8002604:	e186      	b.n	8002914 <__aeabi_dsub+0x378>
 8002606:	2280      	movs	r2, #128	; 0x80
 8002608:	0412      	lsls	r2, r2, #16
 800260a:	4317      	orrs	r7, r2
 800260c:	4662      	mov	r2, ip
 800260e:	2a38      	cmp	r2, #56	; 0x38
 8002610:	dd00      	ble.n	8002614 <__aeabi_dsub+0x78>
 8002612:	e1a4      	b.n	800295e <__aeabi_dsub+0x3c2>
 8002614:	2a1f      	cmp	r2, #31
 8002616:	dd00      	ble.n	800261a <__aeabi_dsub+0x7e>
 8002618:	e21d      	b.n	8002a56 <__aeabi_dsub+0x4ba>
 800261a:	4661      	mov	r1, ip
 800261c:	2220      	movs	r2, #32
 800261e:	003c      	movs	r4, r7
 8002620:	1a52      	subs	r2, r2, r1
 8002622:	0001      	movs	r1, r0
 8002624:	4090      	lsls	r0, r2
 8002626:	4094      	lsls	r4, r2
 8002628:	1e42      	subs	r2, r0, #1
 800262a:	4190      	sbcs	r0, r2
 800262c:	4662      	mov	r2, ip
 800262e:	46a0      	mov	r8, r4
 8002630:	4664      	mov	r4, ip
 8002632:	40d7      	lsrs	r7, r2
 8002634:	464a      	mov	r2, r9
 8002636:	40e1      	lsrs	r1, r4
 8002638:	4644      	mov	r4, r8
 800263a:	1bd2      	subs	r2, r2, r7
 800263c:	4691      	mov	r9, r2
 800263e:	430c      	orrs	r4, r1
 8002640:	4304      	orrs	r4, r0
 8002642:	1b1c      	subs	r4, r3, r4
 8002644:	42a3      	cmp	r3, r4
 8002646:	4192      	sbcs	r2, r2
 8002648:	464b      	mov	r3, r9
 800264a:	4252      	negs	r2, r2
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	469a      	mov	sl, r3
 8002650:	4653      	mov	r3, sl
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	d400      	bmi.n	8002658 <__aeabi_dsub+0xbc>
 8002656:	e12b      	b.n	80028b0 <__aeabi_dsub+0x314>
 8002658:	4653      	mov	r3, sl
 800265a:	025a      	lsls	r2, r3, #9
 800265c:	0a53      	lsrs	r3, r2, #9
 800265e:	469a      	mov	sl, r3
 8002660:	4653      	mov	r3, sl
 8002662:	2b00      	cmp	r3, #0
 8002664:	d100      	bne.n	8002668 <__aeabi_dsub+0xcc>
 8002666:	e166      	b.n	8002936 <__aeabi_dsub+0x39a>
 8002668:	4650      	mov	r0, sl
 800266a:	f000 fc91 	bl	8002f90 <__clzsi2>
 800266e:	0003      	movs	r3, r0
 8002670:	3b08      	subs	r3, #8
 8002672:	2220      	movs	r2, #32
 8002674:	0020      	movs	r0, r4
 8002676:	1ad2      	subs	r2, r2, r3
 8002678:	4651      	mov	r1, sl
 800267a:	40d0      	lsrs	r0, r2
 800267c:	4099      	lsls	r1, r3
 800267e:	0002      	movs	r2, r0
 8002680:	409c      	lsls	r4, r3
 8002682:	430a      	orrs	r2, r1
 8002684:	429e      	cmp	r6, r3
 8002686:	dd00      	ble.n	800268a <__aeabi_dsub+0xee>
 8002688:	e164      	b.n	8002954 <__aeabi_dsub+0x3b8>
 800268a:	1b9b      	subs	r3, r3, r6
 800268c:	1c59      	adds	r1, r3, #1
 800268e:	291f      	cmp	r1, #31
 8002690:	dd00      	ble.n	8002694 <__aeabi_dsub+0xf8>
 8002692:	e0fe      	b.n	8002892 <__aeabi_dsub+0x2f6>
 8002694:	2320      	movs	r3, #32
 8002696:	0010      	movs	r0, r2
 8002698:	0026      	movs	r6, r4
 800269a:	1a5b      	subs	r3, r3, r1
 800269c:	409c      	lsls	r4, r3
 800269e:	4098      	lsls	r0, r3
 80026a0:	40ce      	lsrs	r6, r1
 80026a2:	40ca      	lsrs	r2, r1
 80026a4:	1e63      	subs	r3, r4, #1
 80026a6:	419c      	sbcs	r4, r3
 80026a8:	4330      	orrs	r0, r6
 80026aa:	4692      	mov	sl, r2
 80026ac:	2600      	movs	r6, #0
 80026ae:	4304      	orrs	r4, r0
 80026b0:	0763      	lsls	r3, r4, #29
 80026b2:	d009      	beq.n	80026c8 <__aeabi_dsub+0x12c>
 80026b4:	230f      	movs	r3, #15
 80026b6:	4023      	ands	r3, r4
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d005      	beq.n	80026c8 <__aeabi_dsub+0x12c>
 80026bc:	1d23      	adds	r3, r4, #4
 80026be:	42a3      	cmp	r3, r4
 80026c0:	41a4      	sbcs	r4, r4
 80026c2:	4264      	negs	r4, r4
 80026c4:	44a2      	add	sl, r4
 80026c6:	001c      	movs	r4, r3
 80026c8:	4653      	mov	r3, sl
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	d400      	bmi.n	80026d0 <__aeabi_dsub+0x134>
 80026ce:	e0f2      	b.n	80028b6 <__aeabi_dsub+0x31a>
 80026d0:	4b8c      	ldr	r3, [pc, #560]	; (8002904 <__aeabi_dsub+0x368>)
 80026d2:	3601      	adds	r6, #1
 80026d4:	429e      	cmp	r6, r3
 80026d6:	d100      	bne.n	80026da <__aeabi_dsub+0x13e>
 80026d8:	e10f      	b.n	80028fa <__aeabi_dsub+0x35e>
 80026da:	4653      	mov	r3, sl
 80026dc:	498a      	ldr	r1, [pc, #552]	; (8002908 <__aeabi_dsub+0x36c>)
 80026de:	08e4      	lsrs	r4, r4, #3
 80026e0:	400b      	ands	r3, r1
 80026e2:	0019      	movs	r1, r3
 80026e4:	075b      	lsls	r3, r3, #29
 80026e6:	4323      	orrs	r3, r4
 80026e8:	0572      	lsls	r2, r6, #21
 80026ea:	024c      	lsls	r4, r1, #9
 80026ec:	0b24      	lsrs	r4, r4, #12
 80026ee:	0d52      	lsrs	r2, r2, #21
 80026f0:	0512      	lsls	r2, r2, #20
 80026f2:	4322      	orrs	r2, r4
 80026f4:	07ed      	lsls	r5, r5, #31
 80026f6:	432a      	orrs	r2, r5
 80026f8:	0018      	movs	r0, r3
 80026fa:	0011      	movs	r1, r2
 80026fc:	b003      	add	sp, #12
 80026fe:	bcf0      	pop	{r4, r5, r6, r7}
 8002700:	46bb      	mov	fp, r7
 8002702:	46b2      	mov	sl, r6
 8002704:	46a9      	mov	r9, r5
 8002706:	46a0      	mov	r8, r4
 8002708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800270a:	1ab4      	subs	r4, r6, r2
 800270c:	46a4      	mov	ip, r4
 800270e:	2c00      	cmp	r4, #0
 8002710:	dd59      	ble.n	80027c6 <__aeabi_dsub+0x22a>
 8002712:	2a00      	cmp	r2, #0
 8002714:	d100      	bne.n	8002718 <__aeabi_dsub+0x17c>
 8002716:	e0b0      	b.n	800287a <__aeabi_dsub+0x2de>
 8002718:	4556      	cmp	r6, sl
 800271a:	d100      	bne.n	800271e <__aeabi_dsub+0x182>
 800271c:	e0fa      	b.n	8002914 <__aeabi_dsub+0x378>
 800271e:	2280      	movs	r2, #128	; 0x80
 8002720:	0412      	lsls	r2, r2, #16
 8002722:	4317      	orrs	r7, r2
 8002724:	4662      	mov	r2, ip
 8002726:	2a38      	cmp	r2, #56	; 0x38
 8002728:	dd00      	ble.n	800272c <__aeabi_dsub+0x190>
 800272a:	e0d4      	b.n	80028d6 <__aeabi_dsub+0x33a>
 800272c:	2a1f      	cmp	r2, #31
 800272e:	dc00      	bgt.n	8002732 <__aeabi_dsub+0x196>
 8002730:	e1c0      	b.n	8002ab4 <__aeabi_dsub+0x518>
 8002732:	0039      	movs	r1, r7
 8002734:	3a20      	subs	r2, #32
 8002736:	40d1      	lsrs	r1, r2
 8002738:	4662      	mov	r2, ip
 800273a:	2a20      	cmp	r2, #32
 800273c:	d006      	beq.n	800274c <__aeabi_dsub+0x1b0>
 800273e:	4664      	mov	r4, ip
 8002740:	2240      	movs	r2, #64	; 0x40
 8002742:	1b12      	subs	r2, r2, r4
 8002744:	003c      	movs	r4, r7
 8002746:	4094      	lsls	r4, r2
 8002748:	4304      	orrs	r4, r0
 800274a:	9401      	str	r4, [sp, #4]
 800274c:	9c01      	ldr	r4, [sp, #4]
 800274e:	1e62      	subs	r2, r4, #1
 8002750:	4194      	sbcs	r4, r2
 8002752:	430c      	orrs	r4, r1
 8002754:	e0c3      	b.n	80028de <__aeabi_dsub+0x342>
 8002756:	003c      	movs	r4, r7
 8002758:	4304      	orrs	r4, r0
 800275a:	d02b      	beq.n	80027b4 <__aeabi_dsub+0x218>
 800275c:	468b      	mov	fp, r1
 800275e:	428d      	cmp	r5, r1
 8002760:	d02e      	beq.n	80027c0 <__aeabi_dsub+0x224>
 8002762:	4c6a      	ldr	r4, [pc, #424]	; (800290c <__aeabi_dsub+0x370>)
 8002764:	46a4      	mov	ip, r4
 8002766:	44b4      	add	ip, r6
 8002768:	4664      	mov	r4, ip
 800276a:	2c00      	cmp	r4, #0
 800276c:	d05f      	beq.n	800282e <__aeabi_dsub+0x292>
 800276e:	1b94      	subs	r4, r2, r6
 8002770:	46a4      	mov	ip, r4
 8002772:	2e00      	cmp	r6, #0
 8002774:	d000      	beq.n	8002778 <__aeabi_dsub+0x1dc>
 8002776:	e120      	b.n	80029ba <__aeabi_dsub+0x41e>
 8002778:	464c      	mov	r4, r9
 800277a:	431c      	orrs	r4, r3
 800277c:	d100      	bne.n	8002780 <__aeabi_dsub+0x1e4>
 800277e:	e1c7      	b.n	8002b10 <__aeabi_dsub+0x574>
 8002780:	4661      	mov	r1, ip
 8002782:	1e4c      	subs	r4, r1, #1
 8002784:	2901      	cmp	r1, #1
 8002786:	d100      	bne.n	800278a <__aeabi_dsub+0x1ee>
 8002788:	e223      	b.n	8002bd2 <__aeabi_dsub+0x636>
 800278a:	4d5e      	ldr	r5, [pc, #376]	; (8002904 <__aeabi_dsub+0x368>)
 800278c:	45ac      	cmp	ip, r5
 800278e:	d100      	bne.n	8002792 <__aeabi_dsub+0x1f6>
 8002790:	e1d8      	b.n	8002b44 <__aeabi_dsub+0x5a8>
 8002792:	46a4      	mov	ip, r4
 8002794:	e11a      	b.n	80029cc <__aeabi_dsub+0x430>
 8002796:	003a      	movs	r2, r7
 8002798:	4302      	orrs	r2, r0
 800279a:	d100      	bne.n	800279e <__aeabi_dsub+0x202>
 800279c:	e0e4      	b.n	8002968 <__aeabi_dsub+0x3cc>
 800279e:	0022      	movs	r2, r4
 80027a0:	3a01      	subs	r2, #1
 80027a2:	2c01      	cmp	r4, #1
 80027a4:	d100      	bne.n	80027a8 <__aeabi_dsub+0x20c>
 80027a6:	e1c3      	b.n	8002b30 <__aeabi_dsub+0x594>
 80027a8:	4956      	ldr	r1, [pc, #344]	; (8002904 <__aeabi_dsub+0x368>)
 80027aa:	428c      	cmp	r4, r1
 80027ac:	d100      	bne.n	80027b0 <__aeabi_dsub+0x214>
 80027ae:	e0b1      	b.n	8002914 <__aeabi_dsub+0x378>
 80027b0:	4694      	mov	ip, r2
 80027b2:	e72b      	b.n	800260c <__aeabi_dsub+0x70>
 80027b4:	2401      	movs	r4, #1
 80027b6:	4061      	eors	r1, r4
 80027b8:	468b      	mov	fp, r1
 80027ba:	428d      	cmp	r5, r1
 80027bc:	d000      	beq.n	80027c0 <__aeabi_dsub+0x224>
 80027be:	e716      	b.n	80025ee <__aeabi_dsub+0x52>
 80027c0:	4952      	ldr	r1, [pc, #328]	; (800290c <__aeabi_dsub+0x370>)
 80027c2:	468c      	mov	ip, r1
 80027c4:	44b4      	add	ip, r6
 80027c6:	4664      	mov	r4, ip
 80027c8:	2c00      	cmp	r4, #0
 80027ca:	d100      	bne.n	80027ce <__aeabi_dsub+0x232>
 80027cc:	e0d3      	b.n	8002976 <__aeabi_dsub+0x3da>
 80027ce:	1b91      	subs	r1, r2, r6
 80027d0:	468c      	mov	ip, r1
 80027d2:	2e00      	cmp	r6, #0
 80027d4:	d100      	bne.n	80027d8 <__aeabi_dsub+0x23c>
 80027d6:	e15e      	b.n	8002a96 <__aeabi_dsub+0x4fa>
 80027d8:	494a      	ldr	r1, [pc, #296]	; (8002904 <__aeabi_dsub+0x368>)
 80027da:	428a      	cmp	r2, r1
 80027dc:	d100      	bne.n	80027e0 <__aeabi_dsub+0x244>
 80027de:	e1be      	b.n	8002b5e <__aeabi_dsub+0x5c2>
 80027e0:	2180      	movs	r1, #128	; 0x80
 80027e2:	464c      	mov	r4, r9
 80027e4:	0409      	lsls	r1, r1, #16
 80027e6:	430c      	orrs	r4, r1
 80027e8:	46a1      	mov	r9, r4
 80027ea:	4661      	mov	r1, ip
 80027ec:	2938      	cmp	r1, #56	; 0x38
 80027ee:	dd00      	ble.n	80027f2 <__aeabi_dsub+0x256>
 80027f0:	e1ba      	b.n	8002b68 <__aeabi_dsub+0x5cc>
 80027f2:	291f      	cmp	r1, #31
 80027f4:	dd00      	ble.n	80027f8 <__aeabi_dsub+0x25c>
 80027f6:	e227      	b.n	8002c48 <__aeabi_dsub+0x6ac>
 80027f8:	2420      	movs	r4, #32
 80027fa:	1a64      	subs	r4, r4, r1
 80027fc:	4649      	mov	r1, r9
 80027fe:	40a1      	lsls	r1, r4
 8002800:	001e      	movs	r6, r3
 8002802:	4688      	mov	r8, r1
 8002804:	4661      	mov	r1, ip
 8002806:	40a3      	lsls	r3, r4
 8002808:	40ce      	lsrs	r6, r1
 800280a:	4641      	mov	r1, r8
 800280c:	1e5c      	subs	r4, r3, #1
 800280e:	41a3      	sbcs	r3, r4
 8002810:	4331      	orrs	r1, r6
 8002812:	4319      	orrs	r1, r3
 8002814:	000c      	movs	r4, r1
 8002816:	4663      	mov	r3, ip
 8002818:	4649      	mov	r1, r9
 800281a:	40d9      	lsrs	r1, r3
 800281c:	187f      	adds	r7, r7, r1
 800281e:	1824      	adds	r4, r4, r0
 8002820:	4284      	cmp	r4, r0
 8002822:	419b      	sbcs	r3, r3
 8002824:	425b      	negs	r3, r3
 8002826:	469a      	mov	sl, r3
 8002828:	0016      	movs	r6, r2
 800282a:	44ba      	add	sl, r7
 800282c:	e05d      	b.n	80028ea <__aeabi_dsub+0x34e>
 800282e:	4c38      	ldr	r4, [pc, #224]	; (8002910 <__aeabi_dsub+0x374>)
 8002830:	1c72      	adds	r2, r6, #1
 8002832:	4222      	tst	r2, r4
 8002834:	d000      	beq.n	8002838 <__aeabi_dsub+0x29c>
 8002836:	e0df      	b.n	80029f8 <__aeabi_dsub+0x45c>
 8002838:	464a      	mov	r2, r9
 800283a:	431a      	orrs	r2, r3
 800283c:	2e00      	cmp	r6, #0
 800283e:	d000      	beq.n	8002842 <__aeabi_dsub+0x2a6>
 8002840:	e15c      	b.n	8002afc <__aeabi_dsub+0x560>
 8002842:	2a00      	cmp	r2, #0
 8002844:	d100      	bne.n	8002848 <__aeabi_dsub+0x2ac>
 8002846:	e1cf      	b.n	8002be8 <__aeabi_dsub+0x64c>
 8002848:	003a      	movs	r2, r7
 800284a:	4302      	orrs	r2, r0
 800284c:	d100      	bne.n	8002850 <__aeabi_dsub+0x2b4>
 800284e:	e17f      	b.n	8002b50 <__aeabi_dsub+0x5b4>
 8002850:	1a1c      	subs	r4, r3, r0
 8002852:	464a      	mov	r2, r9
 8002854:	42a3      	cmp	r3, r4
 8002856:	4189      	sbcs	r1, r1
 8002858:	1bd2      	subs	r2, r2, r7
 800285a:	4249      	negs	r1, r1
 800285c:	1a52      	subs	r2, r2, r1
 800285e:	4692      	mov	sl, r2
 8002860:	0212      	lsls	r2, r2, #8
 8002862:	d400      	bmi.n	8002866 <__aeabi_dsub+0x2ca>
 8002864:	e20a      	b.n	8002c7c <__aeabi_dsub+0x6e0>
 8002866:	1ac4      	subs	r4, r0, r3
 8002868:	42a0      	cmp	r0, r4
 800286a:	4180      	sbcs	r0, r0
 800286c:	464b      	mov	r3, r9
 800286e:	4240      	negs	r0, r0
 8002870:	1aff      	subs	r7, r7, r3
 8002872:	1a3b      	subs	r3, r7, r0
 8002874:	469a      	mov	sl, r3
 8002876:	465d      	mov	r5, fp
 8002878:	e71a      	b.n	80026b0 <__aeabi_dsub+0x114>
 800287a:	003a      	movs	r2, r7
 800287c:	4302      	orrs	r2, r0
 800287e:	d073      	beq.n	8002968 <__aeabi_dsub+0x3cc>
 8002880:	0022      	movs	r2, r4
 8002882:	3a01      	subs	r2, #1
 8002884:	2c01      	cmp	r4, #1
 8002886:	d100      	bne.n	800288a <__aeabi_dsub+0x2ee>
 8002888:	e0cb      	b.n	8002a22 <__aeabi_dsub+0x486>
 800288a:	4554      	cmp	r4, sl
 800288c:	d042      	beq.n	8002914 <__aeabi_dsub+0x378>
 800288e:	4694      	mov	ip, r2
 8002890:	e748      	b.n	8002724 <__aeabi_dsub+0x188>
 8002892:	0010      	movs	r0, r2
 8002894:	3b1f      	subs	r3, #31
 8002896:	40d8      	lsrs	r0, r3
 8002898:	2920      	cmp	r1, #32
 800289a:	d003      	beq.n	80028a4 <__aeabi_dsub+0x308>
 800289c:	2340      	movs	r3, #64	; 0x40
 800289e:	1a5b      	subs	r3, r3, r1
 80028a0:	409a      	lsls	r2, r3
 80028a2:	4314      	orrs	r4, r2
 80028a4:	1e63      	subs	r3, r4, #1
 80028a6:	419c      	sbcs	r4, r3
 80028a8:	2300      	movs	r3, #0
 80028aa:	2600      	movs	r6, #0
 80028ac:	469a      	mov	sl, r3
 80028ae:	4304      	orrs	r4, r0
 80028b0:	0763      	lsls	r3, r4, #29
 80028b2:	d000      	beq.n	80028b6 <__aeabi_dsub+0x31a>
 80028b4:	e6fe      	b.n	80026b4 <__aeabi_dsub+0x118>
 80028b6:	4652      	mov	r2, sl
 80028b8:	08e3      	lsrs	r3, r4, #3
 80028ba:	0752      	lsls	r2, r2, #29
 80028bc:	4313      	orrs	r3, r2
 80028be:	4652      	mov	r2, sl
 80028c0:	46b4      	mov	ip, r6
 80028c2:	08d2      	lsrs	r2, r2, #3
 80028c4:	490f      	ldr	r1, [pc, #60]	; (8002904 <__aeabi_dsub+0x368>)
 80028c6:	458c      	cmp	ip, r1
 80028c8:	d02a      	beq.n	8002920 <__aeabi_dsub+0x384>
 80028ca:	0312      	lsls	r2, r2, #12
 80028cc:	0b14      	lsrs	r4, r2, #12
 80028ce:	4662      	mov	r2, ip
 80028d0:	0552      	lsls	r2, r2, #21
 80028d2:	0d52      	lsrs	r2, r2, #21
 80028d4:	e70c      	b.n	80026f0 <__aeabi_dsub+0x154>
 80028d6:	003c      	movs	r4, r7
 80028d8:	4304      	orrs	r4, r0
 80028da:	1e62      	subs	r2, r4, #1
 80028dc:	4194      	sbcs	r4, r2
 80028de:	18e4      	adds	r4, r4, r3
 80028e0:	429c      	cmp	r4, r3
 80028e2:	4192      	sbcs	r2, r2
 80028e4:	4252      	negs	r2, r2
 80028e6:	444a      	add	r2, r9
 80028e8:	4692      	mov	sl, r2
 80028ea:	4653      	mov	r3, sl
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	d5df      	bpl.n	80028b0 <__aeabi_dsub+0x314>
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <__aeabi_dsub+0x368>)
 80028f2:	3601      	adds	r6, #1
 80028f4:	429e      	cmp	r6, r3
 80028f6:	d000      	beq.n	80028fa <__aeabi_dsub+0x35e>
 80028f8:	e0a0      	b.n	8002a3c <__aeabi_dsub+0x4a0>
 80028fa:	0032      	movs	r2, r6
 80028fc:	2400      	movs	r4, #0
 80028fe:	2300      	movs	r3, #0
 8002900:	e6f6      	b.n	80026f0 <__aeabi_dsub+0x154>
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	000007ff 	.word	0x000007ff
 8002908:	ff7fffff 	.word	0xff7fffff
 800290c:	fffff801 	.word	0xfffff801
 8002910:	000007fe 	.word	0x000007fe
 8002914:	08db      	lsrs	r3, r3, #3
 8002916:	464a      	mov	r2, r9
 8002918:	0752      	lsls	r2, r2, #29
 800291a:	4313      	orrs	r3, r2
 800291c:	464a      	mov	r2, r9
 800291e:	08d2      	lsrs	r2, r2, #3
 8002920:	0019      	movs	r1, r3
 8002922:	4311      	orrs	r1, r2
 8002924:	d100      	bne.n	8002928 <__aeabi_dsub+0x38c>
 8002926:	e1b5      	b.n	8002c94 <__aeabi_dsub+0x6f8>
 8002928:	2480      	movs	r4, #128	; 0x80
 800292a:	0324      	lsls	r4, r4, #12
 800292c:	4314      	orrs	r4, r2
 800292e:	0324      	lsls	r4, r4, #12
 8002930:	4ad5      	ldr	r2, [pc, #852]	; (8002c88 <__aeabi_dsub+0x6ec>)
 8002932:	0b24      	lsrs	r4, r4, #12
 8002934:	e6dc      	b.n	80026f0 <__aeabi_dsub+0x154>
 8002936:	0020      	movs	r0, r4
 8002938:	f000 fb2a 	bl	8002f90 <__clzsi2>
 800293c:	0003      	movs	r3, r0
 800293e:	3318      	adds	r3, #24
 8002940:	2b1f      	cmp	r3, #31
 8002942:	dc00      	bgt.n	8002946 <__aeabi_dsub+0x3aa>
 8002944:	e695      	b.n	8002672 <__aeabi_dsub+0xd6>
 8002946:	0022      	movs	r2, r4
 8002948:	3808      	subs	r0, #8
 800294a:	4082      	lsls	r2, r0
 800294c:	2400      	movs	r4, #0
 800294e:	429e      	cmp	r6, r3
 8002950:	dc00      	bgt.n	8002954 <__aeabi_dsub+0x3b8>
 8002952:	e69a      	b.n	800268a <__aeabi_dsub+0xee>
 8002954:	1af6      	subs	r6, r6, r3
 8002956:	4bcd      	ldr	r3, [pc, #820]	; (8002c8c <__aeabi_dsub+0x6f0>)
 8002958:	401a      	ands	r2, r3
 800295a:	4692      	mov	sl, r2
 800295c:	e6a8      	b.n	80026b0 <__aeabi_dsub+0x114>
 800295e:	003c      	movs	r4, r7
 8002960:	4304      	orrs	r4, r0
 8002962:	1e62      	subs	r2, r4, #1
 8002964:	4194      	sbcs	r4, r2
 8002966:	e66c      	b.n	8002642 <__aeabi_dsub+0xa6>
 8002968:	464a      	mov	r2, r9
 800296a:	08db      	lsrs	r3, r3, #3
 800296c:	0752      	lsls	r2, r2, #29
 800296e:	4313      	orrs	r3, r2
 8002970:	464a      	mov	r2, r9
 8002972:	08d2      	lsrs	r2, r2, #3
 8002974:	e7a6      	b.n	80028c4 <__aeabi_dsub+0x328>
 8002976:	4cc6      	ldr	r4, [pc, #792]	; (8002c90 <__aeabi_dsub+0x6f4>)
 8002978:	1c72      	adds	r2, r6, #1
 800297a:	4222      	tst	r2, r4
 800297c:	d000      	beq.n	8002980 <__aeabi_dsub+0x3e4>
 800297e:	e0ac      	b.n	8002ada <__aeabi_dsub+0x53e>
 8002980:	464a      	mov	r2, r9
 8002982:	431a      	orrs	r2, r3
 8002984:	2e00      	cmp	r6, #0
 8002986:	d000      	beq.n	800298a <__aeabi_dsub+0x3ee>
 8002988:	e105      	b.n	8002b96 <__aeabi_dsub+0x5fa>
 800298a:	2a00      	cmp	r2, #0
 800298c:	d100      	bne.n	8002990 <__aeabi_dsub+0x3f4>
 800298e:	e156      	b.n	8002c3e <__aeabi_dsub+0x6a2>
 8002990:	003a      	movs	r2, r7
 8002992:	4302      	orrs	r2, r0
 8002994:	d100      	bne.n	8002998 <__aeabi_dsub+0x3fc>
 8002996:	e0db      	b.n	8002b50 <__aeabi_dsub+0x5b4>
 8002998:	181c      	adds	r4, r3, r0
 800299a:	429c      	cmp	r4, r3
 800299c:	419b      	sbcs	r3, r3
 800299e:	444f      	add	r7, r9
 80029a0:	46ba      	mov	sl, r7
 80029a2:	425b      	negs	r3, r3
 80029a4:	449a      	add	sl, r3
 80029a6:	4653      	mov	r3, sl
 80029a8:	021b      	lsls	r3, r3, #8
 80029aa:	d400      	bmi.n	80029ae <__aeabi_dsub+0x412>
 80029ac:	e780      	b.n	80028b0 <__aeabi_dsub+0x314>
 80029ae:	4652      	mov	r2, sl
 80029b0:	4bb6      	ldr	r3, [pc, #728]	; (8002c8c <__aeabi_dsub+0x6f0>)
 80029b2:	2601      	movs	r6, #1
 80029b4:	401a      	ands	r2, r3
 80029b6:	4692      	mov	sl, r2
 80029b8:	e77a      	b.n	80028b0 <__aeabi_dsub+0x314>
 80029ba:	4cb3      	ldr	r4, [pc, #716]	; (8002c88 <__aeabi_dsub+0x6ec>)
 80029bc:	42a2      	cmp	r2, r4
 80029be:	d100      	bne.n	80029c2 <__aeabi_dsub+0x426>
 80029c0:	e0c0      	b.n	8002b44 <__aeabi_dsub+0x5a8>
 80029c2:	2480      	movs	r4, #128	; 0x80
 80029c4:	464d      	mov	r5, r9
 80029c6:	0424      	lsls	r4, r4, #16
 80029c8:	4325      	orrs	r5, r4
 80029ca:	46a9      	mov	r9, r5
 80029cc:	4664      	mov	r4, ip
 80029ce:	2c38      	cmp	r4, #56	; 0x38
 80029d0:	dc53      	bgt.n	8002a7a <__aeabi_dsub+0x4de>
 80029d2:	4661      	mov	r1, ip
 80029d4:	2c1f      	cmp	r4, #31
 80029d6:	dd00      	ble.n	80029da <__aeabi_dsub+0x43e>
 80029d8:	e0cd      	b.n	8002b76 <__aeabi_dsub+0x5da>
 80029da:	2520      	movs	r5, #32
 80029dc:	001e      	movs	r6, r3
 80029de:	1b2d      	subs	r5, r5, r4
 80029e0:	464c      	mov	r4, r9
 80029e2:	40ab      	lsls	r3, r5
 80029e4:	40ac      	lsls	r4, r5
 80029e6:	40ce      	lsrs	r6, r1
 80029e8:	1e5d      	subs	r5, r3, #1
 80029ea:	41ab      	sbcs	r3, r5
 80029ec:	4334      	orrs	r4, r6
 80029ee:	4323      	orrs	r3, r4
 80029f0:	464c      	mov	r4, r9
 80029f2:	40cc      	lsrs	r4, r1
 80029f4:	1b3f      	subs	r7, r7, r4
 80029f6:	e045      	b.n	8002a84 <__aeabi_dsub+0x4e8>
 80029f8:	464a      	mov	r2, r9
 80029fa:	1a1c      	subs	r4, r3, r0
 80029fc:	1bd1      	subs	r1, r2, r7
 80029fe:	42a3      	cmp	r3, r4
 8002a00:	4192      	sbcs	r2, r2
 8002a02:	4252      	negs	r2, r2
 8002a04:	4692      	mov	sl, r2
 8002a06:	000a      	movs	r2, r1
 8002a08:	4651      	mov	r1, sl
 8002a0a:	1a52      	subs	r2, r2, r1
 8002a0c:	4692      	mov	sl, r2
 8002a0e:	0212      	lsls	r2, r2, #8
 8002a10:	d500      	bpl.n	8002a14 <__aeabi_dsub+0x478>
 8002a12:	e083      	b.n	8002b1c <__aeabi_dsub+0x580>
 8002a14:	4653      	mov	r3, sl
 8002a16:	4323      	orrs	r3, r4
 8002a18:	d000      	beq.n	8002a1c <__aeabi_dsub+0x480>
 8002a1a:	e621      	b.n	8002660 <__aeabi_dsub+0xc4>
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2500      	movs	r5, #0
 8002a20:	e753      	b.n	80028ca <__aeabi_dsub+0x32e>
 8002a22:	181c      	adds	r4, r3, r0
 8002a24:	429c      	cmp	r4, r3
 8002a26:	419b      	sbcs	r3, r3
 8002a28:	444f      	add	r7, r9
 8002a2a:	46ba      	mov	sl, r7
 8002a2c:	425b      	negs	r3, r3
 8002a2e:	449a      	add	sl, r3
 8002a30:	4653      	mov	r3, sl
 8002a32:	2601      	movs	r6, #1
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	d400      	bmi.n	8002a3a <__aeabi_dsub+0x49e>
 8002a38:	e73a      	b.n	80028b0 <__aeabi_dsub+0x314>
 8002a3a:	2602      	movs	r6, #2
 8002a3c:	4652      	mov	r2, sl
 8002a3e:	4b93      	ldr	r3, [pc, #588]	; (8002c8c <__aeabi_dsub+0x6f0>)
 8002a40:	2101      	movs	r1, #1
 8002a42:	401a      	ands	r2, r3
 8002a44:	0013      	movs	r3, r2
 8002a46:	4021      	ands	r1, r4
 8002a48:	0862      	lsrs	r2, r4, #1
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	07dc      	lsls	r4, r3, #31
 8002a4e:	085b      	lsrs	r3, r3, #1
 8002a50:	469a      	mov	sl, r3
 8002a52:	4314      	orrs	r4, r2
 8002a54:	e62c      	b.n	80026b0 <__aeabi_dsub+0x114>
 8002a56:	0039      	movs	r1, r7
 8002a58:	3a20      	subs	r2, #32
 8002a5a:	40d1      	lsrs	r1, r2
 8002a5c:	4662      	mov	r2, ip
 8002a5e:	2a20      	cmp	r2, #32
 8002a60:	d006      	beq.n	8002a70 <__aeabi_dsub+0x4d4>
 8002a62:	4664      	mov	r4, ip
 8002a64:	2240      	movs	r2, #64	; 0x40
 8002a66:	1b12      	subs	r2, r2, r4
 8002a68:	003c      	movs	r4, r7
 8002a6a:	4094      	lsls	r4, r2
 8002a6c:	4304      	orrs	r4, r0
 8002a6e:	9401      	str	r4, [sp, #4]
 8002a70:	9c01      	ldr	r4, [sp, #4]
 8002a72:	1e62      	subs	r2, r4, #1
 8002a74:	4194      	sbcs	r4, r2
 8002a76:	430c      	orrs	r4, r1
 8002a78:	e5e3      	b.n	8002642 <__aeabi_dsub+0xa6>
 8002a7a:	4649      	mov	r1, r9
 8002a7c:	4319      	orrs	r1, r3
 8002a7e:	000b      	movs	r3, r1
 8002a80:	1e5c      	subs	r4, r3, #1
 8002a82:	41a3      	sbcs	r3, r4
 8002a84:	1ac4      	subs	r4, r0, r3
 8002a86:	42a0      	cmp	r0, r4
 8002a88:	419b      	sbcs	r3, r3
 8002a8a:	425b      	negs	r3, r3
 8002a8c:	1afb      	subs	r3, r7, r3
 8002a8e:	469a      	mov	sl, r3
 8002a90:	465d      	mov	r5, fp
 8002a92:	0016      	movs	r6, r2
 8002a94:	e5dc      	b.n	8002650 <__aeabi_dsub+0xb4>
 8002a96:	4649      	mov	r1, r9
 8002a98:	4319      	orrs	r1, r3
 8002a9a:	d100      	bne.n	8002a9e <__aeabi_dsub+0x502>
 8002a9c:	e0ae      	b.n	8002bfc <__aeabi_dsub+0x660>
 8002a9e:	4661      	mov	r1, ip
 8002aa0:	4664      	mov	r4, ip
 8002aa2:	3901      	subs	r1, #1
 8002aa4:	2c01      	cmp	r4, #1
 8002aa6:	d100      	bne.n	8002aaa <__aeabi_dsub+0x50e>
 8002aa8:	e0e0      	b.n	8002c6c <__aeabi_dsub+0x6d0>
 8002aaa:	4c77      	ldr	r4, [pc, #476]	; (8002c88 <__aeabi_dsub+0x6ec>)
 8002aac:	45a4      	cmp	ip, r4
 8002aae:	d056      	beq.n	8002b5e <__aeabi_dsub+0x5c2>
 8002ab0:	468c      	mov	ip, r1
 8002ab2:	e69a      	b.n	80027ea <__aeabi_dsub+0x24e>
 8002ab4:	4661      	mov	r1, ip
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	003c      	movs	r4, r7
 8002aba:	1a52      	subs	r2, r2, r1
 8002abc:	4094      	lsls	r4, r2
 8002abe:	0001      	movs	r1, r0
 8002ac0:	4090      	lsls	r0, r2
 8002ac2:	46a0      	mov	r8, r4
 8002ac4:	4664      	mov	r4, ip
 8002ac6:	1e42      	subs	r2, r0, #1
 8002ac8:	4190      	sbcs	r0, r2
 8002aca:	4662      	mov	r2, ip
 8002acc:	40e1      	lsrs	r1, r4
 8002ace:	4644      	mov	r4, r8
 8002ad0:	40d7      	lsrs	r7, r2
 8002ad2:	430c      	orrs	r4, r1
 8002ad4:	4304      	orrs	r4, r0
 8002ad6:	44b9      	add	r9, r7
 8002ad8:	e701      	b.n	80028de <__aeabi_dsub+0x342>
 8002ada:	496b      	ldr	r1, [pc, #428]	; (8002c88 <__aeabi_dsub+0x6ec>)
 8002adc:	428a      	cmp	r2, r1
 8002ade:	d100      	bne.n	8002ae2 <__aeabi_dsub+0x546>
 8002ae0:	e70c      	b.n	80028fc <__aeabi_dsub+0x360>
 8002ae2:	1818      	adds	r0, r3, r0
 8002ae4:	4298      	cmp	r0, r3
 8002ae6:	419b      	sbcs	r3, r3
 8002ae8:	444f      	add	r7, r9
 8002aea:	425b      	negs	r3, r3
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	07dc      	lsls	r4, r3, #31
 8002af0:	0840      	lsrs	r0, r0, #1
 8002af2:	085b      	lsrs	r3, r3, #1
 8002af4:	469a      	mov	sl, r3
 8002af6:	0016      	movs	r6, r2
 8002af8:	4304      	orrs	r4, r0
 8002afa:	e6d9      	b.n	80028b0 <__aeabi_dsub+0x314>
 8002afc:	2a00      	cmp	r2, #0
 8002afe:	d000      	beq.n	8002b02 <__aeabi_dsub+0x566>
 8002b00:	e081      	b.n	8002c06 <__aeabi_dsub+0x66a>
 8002b02:	003b      	movs	r3, r7
 8002b04:	4303      	orrs	r3, r0
 8002b06:	d11d      	bne.n	8002b44 <__aeabi_dsub+0x5a8>
 8002b08:	2280      	movs	r2, #128	; 0x80
 8002b0a:	2500      	movs	r5, #0
 8002b0c:	0312      	lsls	r2, r2, #12
 8002b0e:	e70b      	b.n	8002928 <__aeabi_dsub+0x38c>
 8002b10:	08c0      	lsrs	r0, r0, #3
 8002b12:	077b      	lsls	r3, r7, #29
 8002b14:	465d      	mov	r5, fp
 8002b16:	4303      	orrs	r3, r0
 8002b18:	08fa      	lsrs	r2, r7, #3
 8002b1a:	e6d3      	b.n	80028c4 <__aeabi_dsub+0x328>
 8002b1c:	1ac4      	subs	r4, r0, r3
 8002b1e:	42a0      	cmp	r0, r4
 8002b20:	4180      	sbcs	r0, r0
 8002b22:	464b      	mov	r3, r9
 8002b24:	4240      	negs	r0, r0
 8002b26:	1aff      	subs	r7, r7, r3
 8002b28:	1a3b      	subs	r3, r7, r0
 8002b2a:	469a      	mov	sl, r3
 8002b2c:	465d      	mov	r5, fp
 8002b2e:	e597      	b.n	8002660 <__aeabi_dsub+0xc4>
 8002b30:	1a1c      	subs	r4, r3, r0
 8002b32:	464a      	mov	r2, r9
 8002b34:	42a3      	cmp	r3, r4
 8002b36:	419b      	sbcs	r3, r3
 8002b38:	1bd7      	subs	r7, r2, r7
 8002b3a:	425b      	negs	r3, r3
 8002b3c:	1afb      	subs	r3, r7, r3
 8002b3e:	469a      	mov	sl, r3
 8002b40:	2601      	movs	r6, #1
 8002b42:	e585      	b.n	8002650 <__aeabi_dsub+0xb4>
 8002b44:	08c0      	lsrs	r0, r0, #3
 8002b46:	077b      	lsls	r3, r7, #29
 8002b48:	465d      	mov	r5, fp
 8002b4a:	4303      	orrs	r3, r0
 8002b4c:	08fa      	lsrs	r2, r7, #3
 8002b4e:	e6e7      	b.n	8002920 <__aeabi_dsub+0x384>
 8002b50:	464a      	mov	r2, r9
 8002b52:	08db      	lsrs	r3, r3, #3
 8002b54:	0752      	lsls	r2, r2, #29
 8002b56:	4313      	orrs	r3, r2
 8002b58:	464a      	mov	r2, r9
 8002b5a:	08d2      	lsrs	r2, r2, #3
 8002b5c:	e6b5      	b.n	80028ca <__aeabi_dsub+0x32e>
 8002b5e:	08c0      	lsrs	r0, r0, #3
 8002b60:	077b      	lsls	r3, r7, #29
 8002b62:	4303      	orrs	r3, r0
 8002b64:	08fa      	lsrs	r2, r7, #3
 8002b66:	e6db      	b.n	8002920 <__aeabi_dsub+0x384>
 8002b68:	4649      	mov	r1, r9
 8002b6a:	4319      	orrs	r1, r3
 8002b6c:	000b      	movs	r3, r1
 8002b6e:	1e59      	subs	r1, r3, #1
 8002b70:	418b      	sbcs	r3, r1
 8002b72:	001c      	movs	r4, r3
 8002b74:	e653      	b.n	800281e <__aeabi_dsub+0x282>
 8002b76:	464d      	mov	r5, r9
 8002b78:	3c20      	subs	r4, #32
 8002b7a:	40e5      	lsrs	r5, r4
 8002b7c:	2920      	cmp	r1, #32
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dsub+0x5f0>
 8002b80:	2440      	movs	r4, #64	; 0x40
 8002b82:	1a64      	subs	r4, r4, r1
 8002b84:	4649      	mov	r1, r9
 8002b86:	40a1      	lsls	r1, r4
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	4698      	mov	r8, r3
 8002b8c:	4643      	mov	r3, r8
 8002b8e:	1e5c      	subs	r4, r3, #1
 8002b90:	41a3      	sbcs	r3, r4
 8002b92:	432b      	orrs	r3, r5
 8002b94:	e776      	b.n	8002a84 <__aeabi_dsub+0x4e8>
 8002b96:	2a00      	cmp	r2, #0
 8002b98:	d0e1      	beq.n	8002b5e <__aeabi_dsub+0x5c2>
 8002b9a:	003a      	movs	r2, r7
 8002b9c:	08db      	lsrs	r3, r3, #3
 8002b9e:	4302      	orrs	r2, r0
 8002ba0:	d100      	bne.n	8002ba4 <__aeabi_dsub+0x608>
 8002ba2:	e6b8      	b.n	8002916 <__aeabi_dsub+0x37a>
 8002ba4:	464a      	mov	r2, r9
 8002ba6:	0752      	lsls	r2, r2, #29
 8002ba8:	2480      	movs	r4, #128	; 0x80
 8002baa:	4313      	orrs	r3, r2
 8002bac:	464a      	mov	r2, r9
 8002bae:	0324      	lsls	r4, r4, #12
 8002bb0:	08d2      	lsrs	r2, r2, #3
 8002bb2:	4222      	tst	r2, r4
 8002bb4:	d007      	beq.n	8002bc6 <__aeabi_dsub+0x62a>
 8002bb6:	08fe      	lsrs	r6, r7, #3
 8002bb8:	4226      	tst	r6, r4
 8002bba:	d104      	bne.n	8002bc6 <__aeabi_dsub+0x62a>
 8002bbc:	465d      	mov	r5, fp
 8002bbe:	0032      	movs	r2, r6
 8002bc0:	08c3      	lsrs	r3, r0, #3
 8002bc2:	077f      	lsls	r7, r7, #29
 8002bc4:	433b      	orrs	r3, r7
 8002bc6:	0f59      	lsrs	r1, r3, #29
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	0749      	lsls	r1, r1, #29
 8002bcc:	08db      	lsrs	r3, r3, #3
 8002bce:	430b      	orrs	r3, r1
 8002bd0:	e6a6      	b.n	8002920 <__aeabi_dsub+0x384>
 8002bd2:	1ac4      	subs	r4, r0, r3
 8002bd4:	42a0      	cmp	r0, r4
 8002bd6:	4180      	sbcs	r0, r0
 8002bd8:	464b      	mov	r3, r9
 8002bda:	4240      	negs	r0, r0
 8002bdc:	1aff      	subs	r7, r7, r3
 8002bde:	1a3b      	subs	r3, r7, r0
 8002be0:	469a      	mov	sl, r3
 8002be2:	465d      	mov	r5, fp
 8002be4:	2601      	movs	r6, #1
 8002be6:	e533      	b.n	8002650 <__aeabi_dsub+0xb4>
 8002be8:	003b      	movs	r3, r7
 8002bea:	4303      	orrs	r3, r0
 8002bec:	d100      	bne.n	8002bf0 <__aeabi_dsub+0x654>
 8002bee:	e715      	b.n	8002a1c <__aeabi_dsub+0x480>
 8002bf0:	08c0      	lsrs	r0, r0, #3
 8002bf2:	077b      	lsls	r3, r7, #29
 8002bf4:	465d      	mov	r5, fp
 8002bf6:	4303      	orrs	r3, r0
 8002bf8:	08fa      	lsrs	r2, r7, #3
 8002bfa:	e666      	b.n	80028ca <__aeabi_dsub+0x32e>
 8002bfc:	08c0      	lsrs	r0, r0, #3
 8002bfe:	077b      	lsls	r3, r7, #29
 8002c00:	4303      	orrs	r3, r0
 8002c02:	08fa      	lsrs	r2, r7, #3
 8002c04:	e65e      	b.n	80028c4 <__aeabi_dsub+0x328>
 8002c06:	003a      	movs	r2, r7
 8002c08:	08db      	lsrs	r3, r3, #3
 8002c0a:	4302      	orrs	r2, r0
 8002c0c:	d100      	bne.n	8002c10 <__aeabi_dsub+0x674>
 8002c0e:	e682      	b.n	8002916 <__aeabi_dsub+0x37a>
 8002c10:	464a      	mov	r2, r9
 8002c12:	0752      	lsls	r2, r2, #29
 8002c14:	2480      	movs	r4, #128	; 0x80
 8002c16:	4313      	orrs	r3, r2
 8002c18:	464a      	mov	r2, r9
 8002c1a:	0324      	lsls	r4, r4, #12
 8002c1c:	08d2      	lsrs	r2, r2, #3
 8002c1e:	4222      	tst	r2, r4
 8002c20:	d007      	beq.n	8002c32 <__aeabi_dsub+0x696>
 8002c22:	08fe      	lsrs	r6, r7, #3
 8002c24:	4226      	tst	r6, r4
 8002c26:	d104      	bne.n	8002c32 <__aeabi_dsub+0x696>
 8002c28:	465d      	mov	r5, fp
 8002c2a:	0032      	movs	r2, r6
 8002c2c:	08c3      	lsrs	r3, r0, #3
 8002c2e:	077f      	lsls	r7, r7, #29
 8002c30:	433b      	orrs	r3, r7
 8002c32:	0f59      	lsrs	r1, r3, #29
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	08db      	lsrs	r3, r3, #3
 8002c38:	0749      	lsls	r1, r1, #29
 8002c3a:	430b      	orrs	r3, r1
 8002c3c:	e670      	b.n	8002920 <__aeabi_dsub+0x384>
 8002c3e:	08c0      	lsrs	r0, r0, #3
 8002c40:	077b      	lsls	r3, r7, #29
 8002c42:	4303      	orrs	r3, r0
 8002c44:	08fa      	lsrs	r2, r7, #3
 8002c46:	e640      	b.n	80028ca <__aeabi_dsub+0x32e>
 8002c48:	464c      	mov	r4, r9
 8002c4a:	3920      	subs	r1, #32
 8002c4c:	40cc      	lsrs	r4, r1
 8002c4e:	4661      	mov	r1, ip
 8002c50:	2920      	cmp	r1, #32
 8002c52:	d006      	beq.n	8002c62 <__aeabi_dsub+0x6c6>
 8002c54:	4666      	mov	r6, ip
 8002c56:	2140      	movs	r1, #64	; 0x40
 8002c58:	1b89      	subs	r1, r1, r6
 8002c5a:	464e      	mov	r6, r9
 8002c5c:	408e      	lsls	r6, r1
 8002c5e:	4333      	orrs	r3, r6
 8002c60:	4698      	mov	r8, r3
 8002c62:	4643      	mov	r3, r8
 8002c64:	1e59      	subs	r1, r3, #1
 8002c66:	418b      	sbcs	r3, r1
 8002c68:	431c      	orrs	r4, r3
 8002c6a:	e5d8      	b.n	800281e <__aeabi_dsub+0x282>
 8002c6c:	181c      	adds	r4, r3, r0
 8002c6e:	4284      	cmp	r4, r0
 8002c70:	4180      	sbcs	r0, r0
 8002c72:	444f      	add	r7, r9
 8002c74:	46ba      	mov	sl, r7
 8002c76:	4240      	negs	r0, r0
 8002c78:	4482      	add	sl, r0
 8002c7a:	e6d9      	b.n	8002a30 <__aeabi_dsub+0x494>
 8002c7c:	4653      	mov	r3, sl
 8002c7e:	4323      	orrs	r3, r4
 8002c80:	d100      	bne.n	8002c84 <__aeabi_dsub+0x6e8>
 8002c82:	e6cb      	b.n	8002a1c <__aeabi_dsub+0x480>
 8002c84:	e614      	b.n	80028b0 <__aeabi_dsub+0x314>
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	000007ff 	.word	0x000007ff
 8002c8c:	ff7fffff 	.word	0xff7fffff
 8002c90:	000007fe 	.word	0x000007fe
 8002c94:	2300      	movs	r3, #0
 8002c96:	4a01      	ldr	r2, [pc, #4]	; (8002c9c <__aeabi_dsub+0x700>)
 8002c98:	001c      	movs	r4, r3
 8002c9a:	e529      	b.n	80026f0 <__aeabi_dsub+0x154>
 8002c9c:	000007ff 	.word	0x000007ff

08002ca0 <__aeabi_dcmpun>:
 8002ca0:	b570      	push	{r4, r5, r6, lr}
 8002ca2:	0005      	movs	r5, r0
 8002ca4:	480c      	ldr	r0, [pc, #48]	; (8002cd8 <__aeabi_dcmpun+0x38>)
 8002ca6:	031c      	lsls	r4, r3, #12
 8002ca8:	0016      	movs	r6, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	030a      	lsls	r2, r1, #12
 8002cae:	0049      	lsls	r1, r1, #1
 8002cb0:	0b12      	lsrs	r2, r2, #12
 8002cb2:	0d49      	lsrs	r1, r1, #21
 8002cb4:	0b24      	lsrs	r4, r4, #12
 8002cb6:	0d5b      	lsrs	r3, r3, #21
 8002cb8:	4281      	cmp	r1, r0
 8002cba:	d008      	beq.n	8002cce <__aeabi_dcmpun+0x2e>
 8002cbc:	4a06      	ldr	r2, [pc, #24]	; (8002cd8 <__aeabi_dcmpun+0x38>)
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d103      	bne.n	8002ccc <__aeabi_dcmpun+0x2c>
 8002cc4:	0020      	movs	r0, r4
 8002cc6:	4330      	orrs	r0, r6
 8002cc8:	1e43      	subs	r3, r0, #1
 8002cca:	4198      	sbcs	r0, r3
 8002ccc:	bd70      	pop	{r4, r5, r6, pc}
 8002cce:	2001      	movs	r0, #1
 8002cd0:	432a      	orrs	r2, r5
 8002cd2:	d1fb      	bne.n	8002ccc <__aeabi_dcmpun+0x2c>
 8002cd4:	e7f2      	b.n	8002cbc <__aeabi_dcmpun+0x1c>
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	000007ff 	.word	0x000007ff

08002cdc <__aeabi_d2iz>:
 8002cdc:	000a      	movs	r2, r1
 8002cde:	b530      	push	{r4, r5, lr}
 8002ce0:	4c13      	ldr	r4, [pc, #76]	; (8002d30 <__aeabi_d2iz+0x54>)
 8002ce2:	0053      	lsls	r3, r2, #1
 8002ce4:	0309      	lsls	r1, r1, #12
 8002ce6:	0005      	movs	r5, r0
 8002ce8:	0b09      	lsrs	r1, r1, #12
 8002cea:	2000      	movs	r0, #0
 8002cec:	0d5b      	lsrs	r3, r3, #21
 8002cee:	0fd2      	lsrs	r2, r2, #31
 8002cf0:	42a3      	cmp	r3, r4
 8002cf2:	dd04      	ble.n	8002cfe <__aeabi_d2iz+0x22>
 8002cf4:	480f      	ldr	r0, [pc, #60]	; (8002d34 <__aeabi_d2iz+0x58>)
 8002cf6:	4283      	cmp	r3, r0
 8002cf8:	dd02      	ble.n	8002d00 <__aeabi_d2iz+0x24>
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <__aeabi_d2iz+0x5c>)
 8002cfc:	18d0      	adds	r0, r2, r3
 8002cfe:	bd30      	pop	{r4, r5, pc}
 8002d00:	2080      	movs	r0, #128	; 0x80
 8002d02:	0340      	lsls	r0, r0, #13
 8002d04:	4301      	orrs	r1, r0
 8002d06:	480d      	ldr	r0, [pc, #52]	; (8002d3c <__aeabi_d2iz+0x60>)
 8002d08:	1ac0      	subs	r0, r0, r3
 8002d0a:	281f      	cmp	r0, #31
 8002d0c:	dd08      	ble.n	8002d20 <__aeabi_d2iz+0x44>
 8002d0e:	480c      	ldr	r0, [pc, #48]	; (8002d40 <__aeabi_d2iz+0x64>)
 8002d10:	1ac3      	subs	r3, r0, r3
 8002d12:	40d9      	lsrs	r1, r3
 8002d14:	000b      	movs	r3, r1
 8002d16:	4258      	negs	r0, r3
 8002d18:	2a00      	cmp	r2, #0
 8002d1a:	d1f0      	bne.n	8002cfe <__aeabi_d2iz+0x22>
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	e7ee      	b.n	8002cfe <__aeabi_d2iz+0x22>
 8002d20:	4c08      	ldr	r4, [pc, #32]	; (8002d44 <__aeabi_d2iz+0x68>)
 8002d22:	40c5      	lsrs	r5, r0
 8002d24:	46a4      	mov	ip, r4
 8002d26:	4463      	add	r3, ip
 8002d28:	4099      	lsls	r1, r3
 8002d2a:	000b      	movs	r3, r1
 8002d2c:	432b      	orrs	r3, r5
 8002d2e:	e7f2      	b.n	8002d16 <__aeabi_d2iz+0x3a>
 8002d30:	000003fe 	.word	0x000003fe
 8002d34:	0000041d 	.word	0x0000041d
 8002d38:	7fffffff 	.word	0x7fffffff
 8002d3c:	00000433 	.word	0x00000433
 8002d40:	00000413 	.word	0x00000413
 8002d44:	fffffbed 	.word	0xfffffbed

08002d48 <__aeabi_i2d>:
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	d016      	beq.n	8002d7c <__aeabi_i2d+0x34>
 8002d4e:	17c3      	asrs	r3, r0, #31
 8002d50:	18c5      	adds	r5, r0, r3
 8002d52:	405d      	eors	r5, r3
 8002d54:	0fc4      	lsrs	r4, r0, #31
 8002d56:	0028      	movs	r0, r5
 8002d58:	f000 f91a 	bl	8002f90 <__clzsi2>
 8002d5c:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <__aeabi_i2d+0x5c>)
 8002d5e:	1a1b      	subs	r3, r3, r0
 8002d60:	280a      	cmp	r0, #10
 8002d62:	dc16      	bgt.n	8002d92 <__aeabi_i2d+0x4a>
 8002d64:	0002      	movs	r2, r0
 8002d66:	002e      	movs	r6, r5
 8002d68:	3215      	adds	r2, #21
 8002d6a:	4096      	lsls	r6, r2
 8002d6c:	220b      	movs	r2, #11
 8002d6e:	1a12      	subs	r2, r2, r0
 8002d70:	40d5      	lsrs	r5, r2
 8002d72:	055b      	lsls	r3, r3, #21
 8002d74:	032d      	lsls	r5, r5, #12
 8002d76:	0b2d      	lsrs	r5, r5, #12
 8002d78:	0d5b      	lsrs	r3, r3, #21
 8002d7a:	e003      	b.n	8002d84 <__aeabi_i2d+0x3c>
 8002d7c:	2400      	movs	r4, #0
 8002d7e:	2300      	movs	r3, #0
 8002d80:	2500      	movs	r5, #0
 8002d82:	2600      	movs	r6, #0
 8002d84:	051b      	lsls	r3, r3, #20
 8002d86:	432b      	orrs	r3, r5
 8002d88:	07e4      	lsls	r4, r4, #31
 8002d8a:	4323      	orrs	r3, r4
 8002d8c:	0030      	movs	r0, r6
 8002d8e:	0019      	movs	r1, r3
 8002d90:	bd70      	pop	{r4, r5, r6, pc}
 8002d92:	380b      	subs	r0, #11
 8002d94:	4085      	lsls	r5, r0
 8002d96:	055b      	lsls	r3, r3, #21
 8002d98:	032d      	lsls	r5, r5, #12
 8002d9a:	2600      	movs	r6, #0
 8002d9c:	0b2d      	lsrs	r5, r5, #12
 8002d9e:	0d5b      	lsrs	r3, r3, #21
 8002da0:	e7f0      	b.n	8002d84 <__aeabi_i2d+0x3c>
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	0000041e 	.word	0x0000041e

08002da8 <__aeabi_ui2d>:
 8002da8:	b510      	push	{r4, lr}
 8002daa:	1e04      	subs	r4, r0, #0
 8002dac:	d010      	beq.n	8002dd0 <__aeabi_ui2d+0x28>
 8002dae:	f000 f8ef 	bl	8002f90 <__clzsi2>
 8002db2:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <__aeabi_ui2d+0x48>)
 8002db4:	1a1b      	subs	r3, r3, r0
 8002db6:	280a      	cmp	r0, #10
 8002db8:	dc11      	bgt.n	8002dde <__aeabi_ui2d+0x36>
 8002dba:	220b      	movs	r2, #11
 8002dbc:	0021      	movs	r1, r4
 8002dbe:	1a12      	subs	r2, r2, r0
 8002dc0:	40d1      	lsrs	r1, r2
 8002dc2:	3015      	adds	r0, #21
 8002dc4:	030a      	lsls	r2, r1, #12
 8002dc6:	055b      	lsls	r3, r3, #21
 8002dc8:	4084      	lsls	r4, r0
 8002dca:	0b12      	lsrs	r2, r2, #12
 8002dcc:	0d5b      	lsrs	r3, r3, #21
 8002dce:	e001      	b.n	8002dd4 <__aeabi_ui2d+0x2c>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	051b      	lsls	r3, r3, #20
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	0020      	movs	r0, r4
 8002dda:	0019      	movs	r1, r3
 8002ddc:	bd10      	pop	{r4, pc}
 8002dde:	0022      	movs	r2, r4
 8002de0:	380b      	subs	r0, #11
 8002de2:	4082      	lsls	r2, r0
 8002de4:	055b      	lsls	r3, r3, #21
 8002de6:	0312      	lsls	r2, r2, #12
 8002de8:	2400      	movs	r4, #0
 8002dea:	0b12      	lsrs	r2, r2, #12
 8002dec:	0d5b      	lsrs	r3, r3, #21
 8002dee:	e7f1      	b.n	8002dd4 <__aeabi_ui2d+0x2c>
 8002df0:	0000041e 	.word	0x0000041e

08002df4 <__aeabi_f2d>:
 8002df4:	b570      	push	{r4, r5, r6, lr}
 8002df6:	0242      	lsls	r2, r0, #9
 8002df8:	0043      	lsls	r3, r0, #1
 8002dfa:	0fc4      	lsrs	r4, r0, #31
 8002dfc:	20fe      	movs	r0, #254	; 0xfe
 8002dfe:	0e1b      	lsrs	r3, r3, #24
 8002e00:	1c59      	adds	r1, r3, #1
 8002e02:	0a55      	lsrs	r5, r2, #9
 8002e04:	4208      	tst	r0, r1
 8002e06:	d00c      	beq.n	8002e22 <__aeabi_f2d+0x2e>
 8002e08:	21e0      	movs	r1, #224	; 0xe0
 8002e0a:	0089      	lsls	r1, r1, #2
 8002e0c:	468c      	mov	ip, r1
 8002e0e:	076d      	lsls	r5, r5, #29
 8002e10:	0b12      	lsrs	r2, r2, #12
 8002e12:	4463      	add	r3, ip
 8002e14:	051b      	lsls	r3, r3, #20
 8002e16:	4313      	orrs	r3, r2
 8002e18:	07e4      	lsls	r4, r4, #31
 8002e1a:	4323      	orrs	r3, r4
 8002e1c:	0028      	movs	r0, r5
 8002e1e:	0019      	movs	r1, r3
 8002e20:	bd70      	pop	{r4, r5, r6, pc}
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d114      	bne.n	8002e50 <__aeabi_f2d+0x5c>
 8002e26:	2d00      	cmp	r5, #0
 8002e28:	d01b      	beq.n	8002e62 <__aeabi_f2d+0x6e>
 8002e2a:	0028      	movs	r0, r5
 8002e2c:	f000 f8b0 	bl	8002f90 <__clzsi2>
 8002e30:	280a      	cmp	r0, #10
 8002e32:	dc1c      	bgt.n	8002e6e <__aeabi_f2d+0x7a>
 8002e34:	230b      	movs	r3, #11
 8002e36:	002a      	movs	r2, r5
 8002e38:	1a1b      	subs	r3, r3, r0
 8002e3a:	40da      	lsrs	r2, r3
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	3315      	adds	r3, #21
 8002e40:	409d      	lsls	r5, r3
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <__aeabi_f2d+0x88>)
 8002e44:	0312      	lsls	r2, r2, #12
 8002e46:	1a1b      	subs	r3, r3, r0
 8002e48:	055b      	lsls	r3, r3, #21
 8002e4a:	0b12      	lsrs	r2, r2, #12
 8002e4c:	0d5b      	lsrs	r3, r3, #21
 8002e4e:	e7e1      	b.n	8002e14 <__aeabi_f2d+0x20>
 8002e50:	2d00      	cmp	r5, #0
 8002e52:	d009      	beq.n	8002e68 <__aeabi_f2d+0x74>
 8002e54:	0b13      	lsrs	r3, r2, #12
 8002e56:	2280      	movs	r2, #128	; 0x80
 8002e58:	0312      	lsls	r2, r2, #12
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	076d      	lsls	r5, r5, #29
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <__aeabi_f2d+0x8c>)
 8002e60:	e7d8      	b.n	8002e14 <__aeabi_f2d+0x20>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2200      	movs	r2, #0
 8002e66:	e7d5      	b.n	8002e14 <__aeabi_f2d+0x20>
 8002e68:	2200      	movs	r2, #0
 8002e6a:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <__aeabi_f2d+0x8c>)
 8002e6c:	e7d2      	b.n	8002e14 <__aeabi_f2d+0x20>
 8002e6e:	0003      	movs	r3, r0
 8002e70:	002a      	movs	r2, r5
 8002e72:	3b0b      	subs	r3, #11
 8002e74:	409a      	lsls	r2, r3
 8002e76:	2500      	movs	r5, #0
 8002e78:	e7e3      	b.n	8002e42 <__aeabi_f2d+0x4e>
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	00000389 	.word	0x00000389
 8002e80:	000007ff 	.word	0x000007ff

08002e84 <__aeabi_d2f>:
 8002e84:	0002      	movs	r2, r0
 8002e86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e88:	004b      	lsls	r3, r1, #1
 8002e8a:	030d      	lsls	r5, r1, #12
 8002e8c:	0f40      	lsrs	r0, r0, #29
 8002e8e:	0d5b      	lsrs	r3, r3, #21
 8002e90:	0fcc      	lsrs	r4, r1, #31
 8002e92:	0a6d      	lsrs	r5, r5, #9
 8002e94:	493a      	ldr	r1, [pc, #232]	; (8002f80 <__aeabi_d2f+0xfc>)
 8002e96:	4305      	orrs	r5, r0
 8002e98:	1c58      	adds	r0, r3, #1
 8002e9a:	00d7      	lsls	r7, r2, #3
 8002e9c:	4208      	tst	r0, r1
 8002e9e:	d00a      	beq.n	8002eb6 <__aeabi_d2f+0x32>
 8002ea0:	4938      	ldr	r1, [pc, #224]	; (8002f84 <__aeabi_d2f+0x100>)
 8002ea2:	1859      	adds	r1, r3, r1
 8002ea4:	29fe      	cmp	r1, #254	; 0xfe
 8002ea6:	dd16      	ble.n	8002ed6 <__aeabi_d2f+0x52>
 8002ea8:	20ff      	movs	r0, #255	; 0xff
 8002eaa:	2200      	movs	r2, #0
 8002eac:	05c0      	lsls	r0, r0, #23
 8002eae:	4310      	orrs	r0, r2
 8002eb0:	07e4      	lsls	r4, r4, #31
 8002eb2:	4320      	orrs	r0, r4
 8002eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <__aeabi_d2f+0x44>
 8002eba:	433d      	orrs	r5, r7
 8002ebc:	d026      	beq.n	8002f0c <__aeabi_d2f+0x88>
 8002ebe:	2205      	movs	r2, #5
 8002ec0:	0192      	lsls	r2, r2, #6
 8002ec2:	0a52      	lsrs	r2, r2, #9
 8002ec4:	b2d8      	uxtb	r0, r3
 8002ec6:	e7f1      	b.n	8002eac <__aeabi_d2f+0x28>
 8002ec8:	432f      	orrs	r7, r5
 8002eca:	d0ed      	beq.n	8002ea8 <__aeabi_d2f+0x24>
 8002ecc:	2280      	movs	r2, #128	; 0x80
 8002ece:	03d2      	lsls	r2, r2, #15
 8002ed0:	20ff      	movs	r0, #255	; 0xff
 8002ed2:	432a      	orrs	r2, r5
 8002ed4:	e7ea      	b.n	8002eac <__aeabi_d2f+0x28>
 8002ed6:	2900      	cmp	r1, #0
 8002ed8:	dd1b      	ble.n	8002f12 <__aeabi_d2f+0x8e>
 8002eda:	0192      	lsls	r2, r2, #6
 8002edc:	1e50      	subs	r0, r2, #1
 8002ede:	4182      	sbcs	r2, r0
 8002ee0:	00ed      	lsls	r5, r5, #3
 8002ee2:	0f7f      	lsrs	r7, r7, #29
 8002ee4:	432a      	orrs	r2, r5
 8002ee6:	433a      	orrs	r2, r7
 8002ee8:	0753      	lsls	r3, r2, #29
 8002eea:	d047      	beq.n	8002f7c <__aeabi_d2f+0xf8>
 8002eec:	230f      	movs	r3, #15
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d000      	beq.n	8002ef6 <__aeabi_d2f+0x72>
 8002ef4:	3204      	adds	r2, #4
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	04db      	lsls	r3, r3, #19
 8002efa:	4013      	ands	r3, r2
 8002efc:	d03e      	beq.n	8002f7c <__aeabi_d2f+0xf8>
 8002efe:	1c48      	adds	r0, r1, #1
 8002f00:	29fe      	cmp	r1, #254	; 0xfe
 8002f02:	d0d1      	beq.n	8002ea8 <__aeabi_d2f+0x24>
 8002f04:	0192      	lsls	r2, r2, #6
 8002f06:	0a52      	lsrs	r2, r2, #9
 8002f08:	b2c0      	uxtb	r0, r0
 8002f0a:	e7cf      	b.n	8002eac <__aeabi_d2f+0x28>
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e7cc      	b.n	8002eac <__aeabi_d2f+0x28>
 8002f12:	000a      	movs	r2, r1
 8002f14:	3217      	adds	r2, #23
 8002f16:	db2f      	blt.n	8002f78 <__aeabi_d2f+0xf4>
 8002f18:	2680      	movs	r6, #128	; 0x80
 8002f1a:	0436      	lsls	r6, r6, #16
 8002f1c:	432e      	orrs	r6, r5
 8002f1e:	251e      	movs	r5, #30
 8002f20:	1a6d      	subs	r5, r5, r1
 8002f22:	2d1f      	cmp	r5, #31
 8002f24:	dd11      	ble.n	8002f4a <__aeabi_d2f+0xc6>
 8002f26:	2202      	movs	r2, #2
 8002f28:	4252      	negs	r2, r2
 8002f2a:	1a52      	subs	r2, r2, r1
 8002f2c:	0031      	movs	r1, r6
 8002f2e:	40d1      	lsrs	r1, r2
 8002f30:	2d20      	cmp	r5, #32
 8002f32:	d004      	beq.n	8002f3e <__aeabi_d2f+0xba>
 8002f34:	4a14      	ldr	r2, [pc, #80]	; (8002f88 <__aeabi_d2f+0x104>)
 8002f36:	4694      	mov	ip, r2
 8002f38:	4463      	add	r3, ip
 8002f3a:	409e      	lsls	r6, r3
 8002f3c:	4337      	orrs	r7, r6
 8002f3e:	003a      	movs	r2, r7
 8002f40:	1e53      	subs	r3, r2, #1
 8002f42:	419a      	sbcs	r2, r3
 8002f44:	430a      	orrs	r2, r1
 8002f46:	2100      	movs	r1, #0
 8002f48:	e7ce      	b.n	8002ee8 <__aeabi_d2f+0x64>
 8002f4a:	4a10      	ldr	r2, [pc, #64]	; (8002f8c <__aeabi_d2f+0x108>)
 8002f4c:	0038      	movs	r0, r7
 8002f4e:	4694      	mov	ip, r2
 8002f50:	4463      	add	r3, ip
 8002f52:	4098      	lsls	r0, r3
 8002f54:	003a      	movs	r2, r7
 8002f56:	1e41      	subs	r1, r0, #1
 8002f58:	4188      	sbcs	r0, r1
 8002f5a:	409e      	lsls	r6, r3
 8002f5c:	40ea      	lsrs	r2, r5
 8002f5e:	4330      	orrs	r0, r6
 8002f60:	4302      	orrs	r2, r0
 8002f62:	2100      	movs	r1, #0
 8002f64:	0753      	lsls	r3, r2, #29
 8002f66:	d1c1      	bne.n	8002eec <__aeabi_d2f+0x68>
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	0013      	movs	r3, r2
 8002f6c:	04c9      	lsls	r1, r1, #19
 8002f6e:	2001      	movs	r0, #1
 8002f70:	400b      	ands	r3, r1
 8002f72:	420a      	tst	r2, r1
 8002f74:	d1c6      	bne.n	8002f04 <__aeabi_d2f+0x80>
 8002f76:	e7a3      	b.n	8002ec0 <__aeabi_d2f+0x3c>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e7a0      	b.n	8002ebe <__aeabi_d2f+0x3a>
 8002f7c:	000b      	movs	r3, r1
 8002f7e:	e79f      	b.n	8002ec0 <__aeabi_d2f+0x3c>
 8002f80:	000007fe 	.word	0x000007fe
 8002f84:	fffffc80 	.word	0xfffffc80
 8002f88:	fffffca2 	.word	0xfffffca2
 8002f8c:	fffffc82 	.word	0xfffffc82

08002f90 <__clzsi2>:
 8002f90:	211c      	movs	r1, #28
 8002f92:	2301      	movs	r3, #1
 8002f94:	041b      	lsls	r3, r3, #16
 8002f96:	4298      	cmp	r0, r3
 8002f98:	d301      	bcc.n	8002f9e <__clzsi2+0xe>
 8002f9a:	0c00      	lsrs	r0, r0, #16
 8002f9c:	3910      	subs	r1, #16
 8002f9e:	0a1b      	lsrs	r3, r3, #8
 8002fa0:	4298      	cmp	r0, r3
 8002fa2:	d301      	bcc.n	8002fa8 <__clzsi2+0x18>
 8002fa4:	0a00      	lsrs	r0, r0, #8
 8002fa6:	3908      	subs	r1, #8
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	4298      	cmp	r0, r3
 8002fac:	d301      	bcc.n	8002fb2 <__clzsi2+0x22>
 8002fae:	0900      	lsrs	r0, r0, #4
 8002fb0:	3904      	subs	r1, #4
 8002fb2:	a202      	add	r2, pc, #8	; (adr r2, 8002fbc <__clzsi2+0x2c>)
 8002fb4:	5c10      	ldrb	r0, [r2, r0]
 8002fb6:	1840      	adds	r0, r0, r1
 8002fb8:	4770      	bx	lr
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	02020304 	.word	0x02020304
 8002fc0:	01010101 	.word	0x01010101
	...

08002fcc <__clzdi2>:
 8002fcc:	b510      	push	{r4, lr}
 8002fce:	2900      	cmp	r1, #0
 8002fd0:	d103      	bne.n	8002fda <__clzdi2+0xe>
 8002fd2:	f7ff ffdd 	bl	8002f90 <__clzsi2>
 8002fd6:	3020      	adds	r0, #32
 8002fd8:	e002      	b.n	8002fe0 <__clzdi2+0x14>
 8002fda:	0008      	movs	r0, r1
 8002fdc:	f7ff ffd8 	bl	8002f90 <__clzsi2>
 8002fe0:	bd10      	pop	{r4, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)

08002fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fe6:	46ce      	mov	lr, r9
 8002fe8:	4647      	mov	r7, r8
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b097      	sub	sp, #92	; 0x5c
 8002fee:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ff0:	f001 fad4 	bl	800459c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ff4:	f000 f974 	bl	80032e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ff8:	f000 fb34 	bl	8003664 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ffc:	f000 fb14 	bl	8003628 <MX_DMA_Init>
  MX_ADC_Init();
 8003000:	f000 f9e4 	bl	80033cc <MX_ADC_Init>
  MX_USART2_UART_Init();
 8003004:	f000 fae0 	bl	80035c8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003008:	f000 fa62 	bl	80034d0 <MX_I2C1_Init>
  MX_TIM6_Init();
 800300c:	f000 faa0 	bl	8003550 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // Start timer with interrupt
  HAL_TIM_Base_Start_IT(&htim6);
 8003010:	4b9e      	ldr	r3, [pc, #632]	; (800328c <main+0x2a8>)
 8003012:	0018      	movs	r0, r3
 8003014:	f004 f92c 	bl	8007270 <HAL_TIM_Base_Start_IT>

  // OLED initialization
  SSD1306_Init();
 8003018:	f000 fd6a 	bl	8003af0 <SSD1306_Init>
  // Clear OLED
  SSD1306_Fill(SSD1306_COLOR_BLACK);
 800301c:	2000      	movs	r0, #0
 800301e:	f000 fe5b 	bl	8003cd8 <SSD1306_Fill>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Start ADC nuskaitymus
	  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_values, 3);
 8003022:	499b      	ldr	r1, [pc, #620]	; (8003290 <main+0x2ac>)
 8003024:	4b9b      	ldr	r3, [pc, #620]	; (8003294 <main+0x2b0>)
 8003026:	2203      	movs	r2, #3
 8003028:	0018      	movs	r0, r3
 800302a:	f001 fc9b 	bl	8004964 <HAL_ADC_Start_DMA>

      // ADC verciu konvertavimas
      lux1 = convertToLux(adc_values[0]);
 800302e:	4b98      	ldr	r3, [pc, #608]	; (8003290 <main+0x2ac>)
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	0018      	movs	r0, r3
 8003034:	f000 fc72 	bl	800391c <convertToLux>
 8003038:	1c02      	adds	r2, r0, #0
 800303a:	4b97      	ldr	r3, [pc, #604]	; (8003298 <main+0x2b4>)
 800303c:	601a      	str	r2, [r3, #0]
      lux2 = convertToLux(adc_values[1]);
 800303e:	4b94      	ldr	r3, [pc, #592]	; (8003290 <main+0x2ac>)
 8003040:	885b      	ldrh	r3, [r3, #2]
 8003042:	0018      	movs	r0, r3
 8003044:	f000 fc6a 	bl	800391c <convertToLux>
 8003048:	1c02      	adds	r2, r0, #0
 800304a:	4b94      	ldr	r3, [pc, #592]	; (800329c <main+0x2b8>)
 800304c:	601a      	str	r2, [r3, #0]
      RMS = convertRMS(adc_values[2], Samples);
 800304e:	4b90      	ldr	r3, [pc, #576]	; (8003290 <main+0x2ac>)
 8003050:	889a      	ldrh	r2, [r3, #4]
 8003052:	4b93      	ldr	r3, [pc, #588]	; (80032a0 <main+0x2bc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	0019      	movs	r1, r3
 8003058:	0010      	movs	r0, r2
 800305a:	f000 fcdf 	bl	8003a1c <convertRMS>
 800305e:	1c02      	adds	r2, r0, #0
 8003060:	4b90      	ldr	r3, [pc, #576]	; (80032a4 <main+0x2c0>)
 8003062:	601a      	str	r2, [r3, #0]


      // Reset minimum and maximum lux values periodically
       if (HAL_GetTick() - lux_reset_time >= lux_reset_interval) {
 8003064:	f001 fb00 	bl	8004668 <HAL_GetTick>
 8003068:	0002      	movs	r2, r0
 800306a:	4b8f      	ldr	r3, [pc, #572]	; (80032a8 <main+0x2c4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	1ad2      	subs	r2, r2, r3
 8003070:	4b8e      	ldr	r3, [pc, #568]	; (80032ac <main+0x2c8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d30a      	bcc.n	800308e <main+0xaa>
           min_lux = 100000;
 8003078:	4b8d      	ldr	r3, [pc, #564]	; (80032b0 <main+0x2cc>)
 800307a:	4a8e      	ldr	r2, [pc, #568]	; (80032b4 <main+0x2d0>)
 800307c:	601a      	str	r2, [r3, #0]
           max_lux = -100000;
 800307e:	4b8e      	ldr	r3, [pc, #568]	; (80032b8 <main+0x2d4>)
 8003080:	4a8e      	ldr	r2, [pc, #568]	; (80032bc <main+0x2d8>)
 8003082:	601a      	str	r2, [r3, #0]
           lux_reset_time = HAL_GetTick();
 8003084:	f001 faf0 	bl	8004668 <HAL_GetTick>
 8003088:	0002      	movs	r2, r0
 800308a:	4b87      	ldr	r3, [pc, #540]	; (80032a8 <main+0x2c4>)
 800308c:	601a      	str	r2, [r3, #0]
       }

      if (lux1 < min_lux)
 800308e:	4b82      	ldr	r3, [pc, #520]	; (8003298 <main+0x2b4>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b87      	ldr	r3, [pc, #540]	; (80032b0 <main+0x2cc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	1c19      	adds	r1, r3, #0
 8003098:	1c10      	adds	r0, r2, #0
 800309a:	f7fd fa17 	bl	80004cc <__aeabi_fcmplt>
 800309e:	1e03      	subs	r3, r0, #0
 80030a0:	d004      	beq.n	80030ac <main+0xc8>
          min_lux = lux1;
 80030a2:	4b7d      	ldr	r3, [pc, #500]	; (8003298 <main+0x2b4>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4b82      	ldr	r3, [pc, #520]	; (80032b0 <main+0x2cc>)
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	e00c      	b.n	80030c6 <main+0xe2>
      else if (lux1 <= 1)
 80030ac:	4b7a      	ldr	r3, [pc, #488]	; (8003298 <main+0x2b4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	21fe      	movs	r1, #254	; 0xfe
 80030b2:	0589      	lsls	r1, r1, #22
 80030b4:	1c18      	adds	r0, r3, #0
 80030b6:	f7fd fa13 	bl	80004e0 <__aeabi_fcmple>
 80030ba:	1e03      	subs	r3, r0, #0
 80030bc:	d003      	beq.n	80030c6 <main+0xe2>
    	  min_lux = 1;
 80030be:	4b7c      	ldr	r3, [pc, #496]	; (80032b0 <main+0x2cc>)
 80030c0:	22fe      	movs	r2, #254	; 0xfe
 80030c2:	0592      	lsls	r2, r2, #22
 80030c4:	601a      	str	r2, [r3, #0]

      if (lux1 > max_lux)
 80030c6:	4b74      	ldr	r3, [pc, #464]	; (8003298 <main+0x2b4>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4b7b      	ldr	r3, [pc, #492]	; (80032b8 <main+0x2d4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	1c19      	adds	r1, r3, #0
 80030d0:	1c10      	adds	r0, r2, #0
 80030d2:	f7fd fa0f 	bl	80004f4 <__aeabi_fcmpgt>
 80030d6:	1e03      	subs	r3, r0, #0
 80030d8:	d004      	beq.n	80030e4 <main+0x100>
          max_lux = lux1;
 80030da:	4b6f      	ldr	r3, [pc, #444]	; (8003298 <main+0x2b4>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4b76      	ldr	r3, [pc, #472]	; (80032b8 <main+0x2d4>)
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	e00a      	b.n	80030fa <main+0x116>
      else if (lux1 > 5)
 80030e4:	4b6c      	ldr	r3, [pc, #432]	; (8003298 <main+0x2b4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4975      	ldr	r1, [pc, #468]	; (80032c0 <main+0x2dc>)
 80030ea:	1c18      	adds	r0, r3, #0
 80030ec:	f7fd fa02 	bl	80004f4 <__aeabi_fcmpgt>
 80030f0:	1e03      	subs	r3, r0, #0
 80030f2:	d002      	beq.n	80030fa <main+0x116>
    	  max_lux = 5;
 80030f4:	4b70      	ldr	r3, [pc, #448]	; (80032b8 <main+0x2d4>)
 80030f6:	4a72      	ldr	r2, [pc, #456]	; (80032c0 <main+0x2dc>)
 80030f8:	601a      	str	r2, [r3, #0]

      if (lux2 < min_lux)
 80030fa:	4b68      	ldr	r3, [pc, #416]	; (800329c <main+0x2b8>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4b6c      	ldr	r3, [pc, #432]	; (80032b0 <main+0x2cc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	1c19      	adds	r1, r3, #0
 8003104:	1c10      	adds	r0, r2, #0
 8003106:	f7fd f9e1 	bl	80004cc <__aeabi_fcmplt>
 800310a:	1e03      	subs	r3, r0, #0
 800310c:	d004      	beq.n	8003118 <main+0x134>
          min_lux = lux2;
 800310e:	4b63      	ldr	r3, [pc, #396]	; (800329c <main+0x2b8>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	4b67      	ldr	r3, [pc, #412]	; (80032b0 <main+0x2cc>)
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	e00c      	b.n	8003132 <main+0x14e>
      else if (lux2 <= 1)
 8003118:	4b60      	ldr	r3, [pc, #384]	; (800329c <main+0x2b8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	21fe      	movs	r1, #254	; 0xfe
 800311e:	0589      	lsls	r1, r1, #22
 8003120:	1c18      	adds	r0, r3, #0
 8003122:	f7fd f9dd 	bl	80004e0 <__aeabi_fcmple>
 8003126:	1e03      	subs	r3, r0, #0
 8003128:	d003      	beq.n	8003132 <main+0x14e>
    	  min_lux = 1;
 800312a:	4b61      	ldr	r3, [pc, #388]	; (80032b0 <main+0x2cc>)
 800312c:	22fe      	movs	r2, #254	; 0xfe
 800312e:	0592      	lsls	r2, r2, #22
 8003130:	601a      	str	r2, [r3, #0]

      if (lux2 > max_lux)
 8003132:	4b5a      	ldr	r3, [pc, #360]	; (800329c <main+0x2b8>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4b60      	ldr	r3, [pc, #384]	; (80032b8 <main+0x2d4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	1c19      	adds	r1, r3, #0
 800313c:	1c10      	adds	r0, r2, #0
 800313e:	f7fd f9d9 	bl	80004f4 <__aeabi_fcmpgt>
 8003142:	1e03      	subs	r3, r0, #0
 8003144:	d004      	beq.n	8003150 <main+0x16c>
          max_lux = lux2;
 8003146:	4b55      	ldr	r3, [pc, #340]	; (800329c <main+0x2b8>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	4b5b      	ldr	r3, [pc, #364]	; (80032b8 <main+0x2d4>)
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e00a      	b.n	8003166 <main+0x182>
      else if (lux2 > 5)
 8003150:	4b52      	ldr	r3, [pc, #328]	; (800329c <main+0x2b8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	495a      	ldr	r1, [pc, #360]	; (80032c0 <main+0x2dc>)
 8003156:	1c18      	adds	r0, r3, #0
 8003158:	f7fd f9cc 	bl	80004f4 <__aeabi_fcmpgt>
 800315c:	1e03      	subs	r3, r0, #0
 800315e:	d002      	beq.n	8003166 <main+0x182>
          max_lux = 5;
 8003160:	4b55      	ldr	r3, [pc, #340]	; (80032b8 <main+0x2d4>)
 8003162:	4a57      	ldr	r2, [pc, #348]	; (80032c0 <main+0x2dc>)
 8003164:	601a      	str	r2, [r3, #0]

          // Vidurkis
          vid = (lux1+lux2)/2;
 8003166:	4b4c      	ldr	r3, [pc, #304]	; (8003298 <main+0x2b4>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4b4c      	ldr	r3, [pc, #304]	; (800329c <main+0x2b8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	1c19      	adds	r1, r3, #0
 8003170:	1c10      	adds	r0, r2, #0
 8003172:	f7fd faed 	bl	8000750 <__aeabi_fadd>
 8003176:	1c03      	adds	r3, r0, #0
 8003178:	2180      	movs	r1, #128	; 0x80
 800317a:	05c9      	lsls	r1, r1, #23
 800317c:	1c18      	adds	r0, r3, #0
 800317e:	f7fd fc87 	bl	8000a90 <__aeabi_fdiv>
 8003182:	1c03      	adds	r3, r0, #0
 8003184:	1c1a      	adds	r2, r3, #0
 8003186:	4b4f      	ldr	r3, [pc, #316]	; (80032c4 <main+0x2e0>)
 8003188:	601a      	str	r2, [r3, #0]


	  // UART siuntimas i kompiuteri
      if (uart_data_ready)
 800318a:	4b4f      	ldr	r3, [pc, #316]	; (80032c8 <main+0x2e4>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d068      	beq.n	8003266 <main+0x282>
          {
              sprintf(msg, "LDR ADC: %d, %d | Lux: %.2f, %.2f |MIN: %.2f, MAX: %.2f, Vidurkis: %.2f |\r\n"
            		  "MIC ADC: %d | RMS: %.2f\r\n",adc_values[0], adc_values[1],lux1,lux2,min_lux,max_lux,vid,adc_values[2],RMS);
 8003194:	4b3e      	ldr	r3, [pc, #248]	; (8003290 <main+0x2ac>)
 8003196:	881b      	ldrh	r3, [r3, #0]
              sprintf(msg, "LDR ADC: %d, %d | Lux: %.2f, %.2f |MIN: %.2f, MAX: %.2f, Vidurkis: %.2f |\r\n"
 8003198:	4698      	mov	r8, r3
            		  "MIC ADC: %d | RMS: %.2f\r\n",adc_values[0], adc_values[1],lux1,lux2,min_lux,max_lux,vid,adc_values[2],RMS);
 800319a:	4b3d      	ldr	r3, [pc, #244]	; (8003290 <main+0x2ac>)
 800319c:	885b      	ldrh	r3, [r3, #2]
              sprintf(msg, "LDR ADC: %d, %d | Lux: %.2f, %.2f |MIN: %.2f, MAX: %.2f, Vidurkis: %.2f |\r\n"
 800319e:	4699      	mov	r9, r3
 80031a0:	4b3d      	ldr	r3, [pc, #244]	; (8003298 <main+0x2b4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	1c18      	adds	r0, r3, #0
 80031a6:	f7ff fe25 	bl	8002df4 <__aeabi_f2d>
 80031aa:	61b8      	str	r0, [r7, #24]
 80031ac:	61f9      	str	r1, [r7, #28]
 80031ae:	4b3b      	ldr	r3, [pc, #236]	; (800329c <main+0x2b8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	1c18      	adds	r0, r3, #0
 80031b4:	f7ff fe1e 	bl	8002df4 <__aeabi_f2d>
 80031b8:	6138      	str	r0, [r7, #16]
 80031ba:	6179      	str	r1, [r7, #20]
 80031bc:	4b3c      	ldr	r3, [pc, #240]	; (80032b0 <main+0x2cc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	1c18      	adds	r0, r3, #0
 80031c2:	f7ff fe17 	bl	8002df4 <__aeabi_f2d>
 80031c6:	60b8      	str	r0, [r7, #8]
 80031c8:	60f9      	str	r1, [r7, #12]
 80031ca:	4b3b      	ldr	r3, [pc, #236]	; (80032b8 <main+0x2d4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	1c18      	adds	r0, r3, #0
 80031d0:	f7ff fe10 	bl	8002df4 <__aeabi_f2d>
 80031d4:	6038      	str	r0, [r7, #0]
 80031d6:	6079      	str	r1, [r7, #4]
 80031d8:	4b3a      	ldr	r3, [pc, #232]	; (80032c4 <main+0x2e0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	1c18      	adds	r0, r3, #0
 80031de:	f7ff fe09 	bl	8002df4 <__aeabi_f2d>
 80031e2:	0004      	movs	r4, r0
 80031e4:	000d      	movs	r5, r1
            		  "MIC ADC: %d | RMS: %.2f\r\n",adc_values[0], adc_values[1],lux1,lux2,min_lux,max_lux,vid,adc_values[2],RMS);
 80031e6:	4b2a      	ldr	r3, [pc, #168]	; (8003290 <main+0x2ac>)
 80031e8:	889b      	ldrh	r3, [r3, #4]
              sprintf(msg, "LDR ADC: %d, %d | Lux: %.2f, %.2f |MIN: %.2f, MAX: %.2f, Vidurkis: %.2f |\r\n"
 80031ea:	001e      	movs	r6, r3
 80031ec:	4b2d      	ldr	r3, [pc, #180]	; (80032a4 <main+0x2c0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	1c18      	adds	r0, r3, #0
 80031f2:	f7ff fdff 	bl	8002df4 <__aeabi_f2d>
 80031f6:	0002      	movs	r2, r0
 80031f8:	000b      	movs	r3, r1
 80031fa:	4934      	ldr	r1, [pc, #208]	; (80032cc <main+0x2e8>)
 80031fc:	4834      	ldr	r0, [pc, #208]	; (80032d0 <main+0x2ec>)
 80031fe:	920c      	str	r2, [sp, #48]	; 0x30
 8003200:	930d      	str	r3, [sp, #52]	; 0x34
 8003202:	960a      	str	r6, [sp, #40]	; 0x28
 8003204:	9408      	str	r4, [sp, #32]
 8003206:	9509      	str	r5, [sp, #36]	; 0x24
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	687c      	ldr	r4, [r7, #4]
 800320c:	9306      	str	r3, [sp, #24]
 800320e:	9407      	str	r4, [sp, #28]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	68fc      	ldr	r4, [r7, #12]
 8003214:	9304      	str	r3, [sp, #16]
 8003216:	9405      	str	r4, [sp, #20]
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	697c      	ldr	r4, [r7, #20]
 800321c:	9302      	str	r3, [sp, #8]
 800321e:	9403      	str	r4, [sp, #12]
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	69fc      	ldr	r4, [r7, #28]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	9401      	str	r4, [sp, #4]
 8003228:	464b      	mov	r3, r9
 800322a:	4642      	mov	r2, r8
 800322c:	f005 fd68 	bl	8008d00 <siprintf>
    	  	  //sprintf(msg, "Oras ADC: %d | PPM: %.0f \r\nDregme ADC: %d | Dregme %: %.0f \r\n", adc_values[0], oras, adc_values[1], dregme);
              // UART transmission
              HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8003230:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <main+0x2ec>)
 8003232:	0018      	movs	r0, r3
 8003234:	f7fc ff68 	bl	8000108 <strlen>
 8003238:	0003      	movs	r3, r0
 800323a:	b29a      	uxth	r2, r3
 800323c:	2301      	movs	r3, #1
 800323e:	425b      	negs	r3, r3
 8003240:	4923      	ldr	r1, [pc, #140]	; (80032d0 <main+0x2ec>)
 8003242:	4824      	ldr	r0, [pc, #144]	; (80032d4 <main+0x2f0>)
 8003244:	f004 fa7e 	bl	8007744 <HAL_UART_Transmit>

              flag1++;
 8003248:	4b23      	ldr	r3, [pc, #140]	; (80032d8 <main+0x2f4>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	3301      	adds	r3, #1
 800324e:	b2da      	uxtb	r2, r3
 8003250:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <main+0x2f4>)
 8003252:	701a      	strb	r2, [r3, #0]
              flag2++;
 8003254:	4b21      	ldr	r3, [pc, #132]	; (80032dc <main+0x2f8>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	3301      	adds	r3, #1
 800325a:	b2da      	uxtb	r2, r3
 800325c:	4b1f      	ldr	r3, [pc, #124]	; (80032dc <main+0x2f8>)
 800325e:	701a      	strb	r2, [r3, #0]
              uart_data_ready = 0; // Reset flag
 8003260:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <main+0x2e4>)
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]

          }

      if (flag1>=4)
 8003266:	4b1c      	ldr	r3, [pc, #112]	; (80032d8 <main+0x2f4>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b03      	cmp	r3, #3
 800326c:	d902      	bls.n	8003274 <main+0x290>
      	flag1=0;
 800326e:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <main+0x2f4>)
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]
      if (flag2>=8)
 8003274:	4b19      	ldr	r3, [pc, #100]	; (80032dc <main+0x2f8>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b07      	cmp	r3, #7
 800327a:	d902      	bls.n	8003282 <main+0x29e>
      	flag2=0;
 800327c:	4b17      	ldr	r3, [pc, #92]	; (80032dc <main+0x2f8>)
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]

	    // Mygtuko paspaudimas
	    ToggleDisplay();
 8003282:	f000 fa3f 	bl	8003704 <ToggleDisplay>
	    //OLED LUX ir RMS su mygtuku
	    DisplayOLED();
 8003286:	f000 fa77 	bl	8003778 <DisplayOLED>
  {
 800328a:	e6ca      	b.n	8003022 <main+0x3e>
 800328c:	20000314 	.word	0x20000314
 8003290:	200003e0 	.word	0x200003e0
 8003294:	2000021c 	.word	0x2000021c
 8003298:	200003e8 	.word	0x200003e8
 800329c:	200003ec 	.word	0x200003ec
 80032a0:	20000008 	.word	0x20000008
 80032a4:	200003f4 	.word	0x200003f4
 80032a8:	2000045c 	.word	0x2000045c
 80032ac:	20000014 	.word	0x20000014
 80032b0:	2000000c 	.word	0x2000000c
 80032b4:	47c35000 	.word	0x47c35000
 80032b8:	20000010 	.word	0x20000010
 80032bc:	c7c35000 	.word	0xc7c35000
 80032c0:	40a00000 	.word	0x40a00000
 80032c4:	200003f0 	.word	0x200003f0
 80032c8:	200003dc 	.word	0x200003dc
 80032cc:	0800c450 	.word	0x0800c450
 80032d0:	200003f8 	.word	0x200003f8
 80032d4:	20000354 	.word	0x20000354
 80032d8:	20000468 	.word	0x20000468
 80032dc:	20000469 	.word	0x20000469

080032e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b09f      	sub	sp, #124	; 0x7c
 80032e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032e6:	2440      	movs	r4, #64	; 0x40
 80032e8:	193b      	adds	r3, r7, r4
 80032ea:	0018      	movs	r0, r3
 80032ec:	2338      	movs	r3, #56	; 0x38
 80032ee:	001a      	movs	r2, r3
 80032f0:	2100      	movs	r1, #0
 80032f2:	f005 fd71 	bl	8008dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032f6:	232c      	movs	r3, #44	; 0x2c
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	0018      	movs	r0, r3
 80032fc:	2314      	movs	r3, #20
 80032fe:	001a      	movs	r2, r3
 8003300:	2100      	movs	r1, #0
 8003302:	f005 fd69 	bl	8008dd8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	0018      	movs	r0, r3
 800330a:	2328      	movs	r3, #40	; 0x28
 800330c:	001a      	movs	r2, r3
 800330e:	2100      	movs	r1, #0
 8003310:	f005 fd62 	bl	8008dd8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003314:	4b2b      	ldr	r3, [pc, #172]	; (80033c4 <SystemClock_Config+0xe4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a2b      	ldr	r2, [pc, #172]	; (80033c8 <SystemClock_Config+0xe8>)
 800331a:	401a      	ands	r2, r3
 800331c:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <SystemClock_Config+0xe4>)
 800331e:	2180      	movs	r1, #128	; 0x80
 8003320:	0109      	lsls	r1, r1, #4
 8003322:	430a      	orrs	r2, r1
 8003324:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003326:	0021      	movs	r1, r4
 8003328:	187b      	adds	r3, r7, r1
 800332a:	2202      	movs	r2, #2
 800332c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800332e:	187b      	adds	r3, r7, r1
 8003330:	2201      	movs	r2, #1
 8003332:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003334:	187b      	adds	r3, r7, r1
 8003336:	2210      	movs	r2, #16
 8003338:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800333a:	187b      	adds	r3, r7, r1
 800333c:	2202      	movs	r2, #2
 800333e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003340:	187b      	adds	r3, r7, r1
 8003342:	2200      	movs	r2, #0
 8003344:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003346:	187b      	adds	r3, r7, r1
 8003348:	2280      	movs	r2, #128	; 0x80
 800334a:	02d2      	lsls	r2, r2, #11
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800334e:	187b      	adds	r3, r7, r1
 8003350:	2280      	movs	r2, #128	; 0x80
 8003352:	03d2      	lsls	r2, r2, #15
 8003354:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003356:	187b      	adds	r3, r7, r1
 8003358:	0018      	movs	r0, r3
 800335a:	f002 ffb3 	bl	80062c4 <HAL_RCC_OscConfig>
 800335e:	1e03      	subs	r3, r0, #0
 8003360:	d001      	beq.n	8003366 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003362:	f000 fbbf 	bl	8003ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003366:	212c      	movs	r1, #44	; 0x2c
 8003368:	187b      	adds	r3, r7, r1
 800336a:	220f      	movs	r2, #15
 800336c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800336e:	187b      	adds	r3, r7, r1
 8003370:	2203      	movs	r2, #3
 8003372:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003374:	187b      	adds	r3, r7, r1
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800337a:	187b      	adds	r3, r7, r1
 800337c:	2200      	movs	r2, #0
 800337e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003380:	187b      	adds	r3, r7, r1
 8003382:	2200      	movs	r2, #0
 8003384:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003386:	187b      	adds	r3, r7, r1
 8003388:	2101      	movs	r1, #1
 800338a:	0018      	movs	r0, r3
 800338c:	f003 fb6e 	bl	8006a6c <HAL_RCC_ClockConfig>
 8003390:	1e03      	subs	r3, r0, #0
 8003392:	d001      	beq.n	8003398 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003394:	f000 fba6 	bl	8003ae4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8003398:	1d3b      	adds	r3, r7, #4
 800339a:	220a      	movs	r2, #10
 800339c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800339e:	1d3b      	adds	r3, r7, #4
 80033a0:	2200      	movs	r2, #0
 80033a2:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	2200      	movs	r2, #0
 80033a8:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033aa:	1d3b      	adds	r3, r7, #4
 80033ac:	0018      	movs	r0, r3
 80033ae:	f003 fd81 	bl	8006eb4 <HAL_RCCEx_PeriphCLKConfig>
 80033b2:	1e03      	subs	r3, r0, #0
 80033b4:	d001      	beq.n	80033ba <SystemClock_Config+0xda>
  {
    Error_Handler();
 80033b6:	f000 fb95 	bl	8003ae4 <Error_Handler>
  }
}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	46bd      	mov	sp, r7
 80033be:	b01f      	add	sp, #124	; 0x7c
 80033c0:	bd90      	pop	{r4, r7, pc}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	40007000 	.word	0x40007000
 80033c8:	ffffe7ff 	.word	0xffffe7ff

080033cc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033d2:	003b      	movs	r3, r7
 80033d4:	0018      	movs	r0, r3
 80033d6:	2308      	movs	r3, #8
 80033d8:	001a      	movs	r2, r3
 80033da:	2100      	movs	r1, #0
 80033dc:	f005 fcfc 	bl	8008dd8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80033e0:	4b37      	ldr	r3, [pc, #220]	; (80034c0 <MX_ADC_Init+0xf4>)
 80033e2:	4a38      	ldr	r2, [pc, #224]	; (80034c4 <MX_ADC_Init+0xf8>)
 80033e4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80033e6:	4b36      	ldr	r3, [pc, #216]	; (80034c0 <MX_ADC_Init+0xf4>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80033ec:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <MX_ADC_Init+0xf4>)
 80033ee:	2280      	movs	r2, #128	; 0x80
 80033f0:	05d2      	lsls	r2, r2, #23
 80033f2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80033f4:	4b32      	ldr	r3, [pc, #200]	; (80034c0 <MX_ADC_Init+0xf4>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80033fa:	4b31      	ldr	r3, [pc, #196]	; (80034c0 <MX_ADC_Init+0xf4>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003400:	4b2f      	ldr	r3, [pc, #188]	; (80034c0 <MX_ADC_Init+0xf4>)
 8003402:	2201      	movs	r2, #1
 8003404:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003406:	4b2e      	ldr	r3, [pc, #184]	; (80034c0 <MX_ADC_Init+0xf4>)
 8003408:	2200      	movs	r2, #0
 800340a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 800340c:	4b2c      	ldr	r3, [pc, #176]	; (80034c0 <MX_ADC_Init+0xf4>)
 800340e:	2220      	movs	r2, #32
 8003410:	2101      	movs	r1, #1
 8003412:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003414:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <MX_ADC_Init+0xf4>)
 8003416:	2221      	movs	r2, #33	; 0x21
 8003418:	2100      	movs	r1, #0
 800341a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800341c:	4b28      	ldr	r3, [pc, #160]	; (80034c0 <MX_ADC_Init+0xf4>)
 800341e:	2200      	movs	r2, #0
 8003420:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003422:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <MX_ADC_Init+0xf4>)
 8003424:	22c2      	movs	r2, #194	; 0xc2
 8003426:	32ff      	adds	r2, #255	; 0xff
 8003428:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800342a:	4b25      	ldr	r3, [pc, #148]	; (80034c0 <MX_ADC_Init+0xf4>)
 800342c:	222c      	movs	r2, #44	; 0x2c
 800342e:	2100      	movs	r1, #0
 8003430:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003432:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <MX_ADC_Init+0xf4>)
 8003434:	2204      	movs	r2, #4
 8003436:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003438:	4b21      	ldr	r3, [pc, #132]	; (80034c0 <MX_ADC_Init+0xf4>)
 800343a:	2200      	movs	r2, #0
 800343c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800343e:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <MX_ADC_Init+0xf4>)
 8003440:	2200      	movs	r2, #0
 8003442:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003444:	4b1e      	ldr	r3, [pc, #120]	; (80034c0 <MX_ADC_Init+0xf4>)
 8003446:	2200      	movs	r2, #0
 8003448:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800344a:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <MX_ADC_Init+0xf4>)
 800344c:	2200      	movs	r2, #0
 800344e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003450:	4b1b      	ldr	r3, [pc, #108]	; (80034c0 <MX_ADC_Init+0xf4>)
 8003452:	0018      	movs	r0, r3
 8003454:	f001 f912 	bl	800467c <HAL_ADC_Init>
 8003458:	1e03      	subs	r3, r0, #0
 800345a:	d001      	beq.n	8003460 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800345c:	f000 fb42 	bl	8003ae4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003460:	003b      	movs	r3, r7
 8003462:	2201      	movs	r2, #1
 8003464:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003466:	003b      	movs	r3, r7
 8003468:	2280      	movs	r2, #128	; 0x80
 800346a:	0152      	lsls	r2, r2, #5
 800346c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800346e:	003a      	movs	r2, r7
 8003470:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <MX_ADC_Init+0xf4>)
 8003472:	0011      	movs	r1, r2
 8003474:	0018      	movs	r0, r3
 8003476:	f001 fbc1 	bl	8004bfc <HAL_ADC_ConfigChannel>
 800347a:	1e03      	subs	r3, r0, #0
 800347c:	d001      	beq.n	8003482 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800347e:	f000 fb31 	bl	8003ae4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003482:	003b      	movs	r3, r7
 8003484:	4a10      	ldr	r2, [pc, #64]	; (80034c8 <MX_ADC_Init+0xfc>)
 8003486:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003488:	003a      	movs	r2, r7
 800348a:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <MX_ADC_Init+0xf4>)
 800348c:	0011      	movs	r1, r2
 800348e:	0018      	movs	r0, r3
 8003490:	f001 fbb4 	bl	8004bfc <HAL_ADC_ConfigChannel>
 8003494:	1e03      	subs	r3, r0, #0
 8003496:	d001      	beq.n	800349c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8003498:	f000 fb24 	bl	8003ae4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800349c:	003b      	movs	r3, r7
 800349e:	4a0b      	ldr	r2, [pc, #44]	; (80034cc <MX_ADC_Init+0x100>)
 80034a0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80034a2:	003a      	movs	r2, r7
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <MX_ADC_Init+0xf4>)
 80034a6:	0011      	movs	r1, r2
 80034a8:	0018      	movs	r0, r3
 80034aa:	f001 fba7 	bl	8004bfc <HAL_ADC_ConfigChannel>
 80034ae:	1e03      	subs	r3, r0, #0
 80034b0:	d001      	beq.n	80034b6 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 80034b2:	f000 fb17 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b002      	add	sp, #8
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	2000021c 	.word	0x2000021c
 80034c4:	40012400 	.word	0x40012400
 80034c8:	04000002 	.word	0x04000002
 80034cc:	10000010 	.word	0x10000010

080034d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80034d4:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <MX_I2C1_Init+0x74>)
 80034d6:	4a1c      	ldr	r2, [pc, #112]	; (8003548 <MX_I2C1_Init+0x78>)
 80034d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80034da:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <MX_I2C1_Init+0x74>)
 80034dc:	4a1b      	ldr	r2, [pc, #108]	; (800354c <MX_I2C1_Init+0x7c>)
 80034de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80034e0:	4b18      	ldr	r3, [pc, #96]	; (8003544 <MX_I2C1_Init+0x74>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034e6:	4b17      	ldr	r3, [pc, #92]	; (8003544 <MX_I2C1_Init+0x74>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034ec:	4b15      	ldr	r3, [pc, #84]	; (8003544 <MX_I2C1_Init+0x74>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80034f2:	4b14      	ldr	r3, [pc, #80]	; (8003544 <MX_I2C1_Init+0x74>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034f8:	4b12      	ldr	r3, [pc, #72]	; (8003544 <MX_I2C1_Init+0x74>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034fe:	4b11      	ldr	r3, [pc, #68]	; (8003544 <MX_I2C1_Init+0x74>)
 8003500:	2200      	movs	r2, #0
 8003502:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003504:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <MX_I2C1_Init+0x74>)
 8003506:	2200      	movs	r2, #0
 8003508:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800350a:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <MX_I2C1_Init+0x74>)
 800350c:	0018      	movs	r0, r3
 800350e:	f002 f955 	bl	80057bc <HAL_I2C_Init>
 8003512:	1e03      	subs	r3, r0, #0
 8003514:	d001      	beq.n	800351a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003516:	f000 fae5 	bl	8003ae4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <MX_I2C1_Init+0x74>)
 800351c:	2100      	movs	r1, #0
 800351e:	0018      	movs	r0, r3
 8003520:	f002 fe38 	bl	8006194 <HAL_I2CEx_ConfigAnalogFilter>
 8003524:	1e03      	subs	r3, r0, #0
 8003526:	d001      	beq.n	800352c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003528:	f000 fadc 	bl	8003ae4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <MX_I2C1_Init+0x74>)
 800352e:	2100      	movs	r1, #0
 8003530:	0018      	movs	r0, r3
 8003532:	f002 fe7b 	bl	800622c <HAL_I2CEx_ConfigDigitalFilter>
 8003536:	1e03      	subs	r3, r0, #0
 8003538:	d001      	beq.n	800353e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800353a:	f000 fad3 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	200002c0 	.word	0x200002c0
 8003548:	40005400 	.word	0x40005400
 800354c:	00300f38 	.word	0x00300f38

08003550 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003556:	003b      	movs	r3, r7
 8003558:	0018      	movs	r0, r3
 800355a:	2308      	movs	r3, #8
 800355c:	001a      	movs	r2, r3
 800355e:	2100      	movs	r1, #0
 8003560:	f005 fc3a 	bl	8008dd8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003564:	4b15      	ldr	r3, [pc, #84]	; (80035bc <MX_TIM6_Init+0x6c>)
 8003566:	4a16      	ldr	r2, [pc, #88]	; (80035c0 <MX_TIM6_Init+0x70>)
 8003568:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40000;
 800356a:	4b14      	ldr	r3, [pc, #80]	; (80035bc <MX_TIM6_Init+0x6c>)
 800356c:	4a15      	ldr	r2, [pc, #84]	; (80035c4 <MX_TIM6_Init+0x74>)
 800356e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003570:	4b12      	ldr	r3, [pc, #72]	; (80035bc <MX_TIM6_Init+0x6c>)
 8003572:	2200      	movs	r2, #0
 8003574:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 160;
 8003576:	4b11      	ldr	r3, [pc, #68]	; (80035bc <MX_TIM6_Init+0x6c>)
 8003578:	22a0      	movs	r2, #160	; 0xa0
 800357a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800357c:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <MX_TIM6_Init+0x6c>)
 800357e:	2200      	movs	r2, #0
 8003580:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003582:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <MX_TIM6_Init+0x6c>)
 8003584:	0018      	movs	r0, r3
 8003586:	f003 fe33 	bl	80071f0 <HAL_TIM_Base_Init>
 800358a:	1e03      	subs	r3, r0, #0
 800358c:	d001      	beq.n	8003592 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800358e:	f000 faa9 	bl	8003ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003592:	003b      	movs	r3, r7
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003598:	003b      	movs	r3, r7
 800359a:	2200      	movs	r2, #0
 800359c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800359e:	003a      	movs	r2, r7
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <MX_TIM6_Init+0x6c>)
 80035a2:	0011      	movs	r1, r2
 80035a4:	0018      	movs	r0, r3
 80035a6:	f004 f81b 	bl	80075e0 <HAL_TIMEx_MasterConfigSynchronization>
 80035aa:	1e03      	subs	r3, r0, #0
 80035ac:	d001      	beq.n	80035b2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80035ae:	f000 fa99 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b002      	add	sp, #8
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	20000314 	.word	0x20000314
 80035c0:	40001000 	.word	0x40001000
 80035c4:	00009c40 	.word	0x00009c40

080035c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80035cc:	4b14      	ldr	r3, [pc, #80]	; (8003620 <MX_USART2_UART_Init+0x58>)
 80035ce:	4a15      	ldr	r2, [pc, #84]	; (8003624 <MX_USART2_UART_Init+0x5c>)
 80035d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80035d2:	4b13      	ldr	r3, [pc, #76]	; (8003620 <MX_USART2_UART_Init+0x58>)
 80035d4:	22e1      	movs	r2, #225	; 0xe1
 80035d6:	0252      	lsls	r2, r2, #9
 80035d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035da:	4b11      	ldr	r3, [pc, #68]	; (8003620 <MX_USART2_UART_Init+0x58>)
 80035dc:	2200      	movs	r2, #0
 80035de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035e0:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <MX_USART2_UART_Init+0x58>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035e6:	4b0e      	ldr	r3, [pc, #56]	; (8003620 <MX_USART2_UART_Init+0x58>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035ec:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <MX_USART2_UART_Init+0x58>)
 80035ee:	220c      	movs	r2, #12
 80035f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035f2:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <MX_USART2_UART_Init+0x58>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035f8:	4b09      	ldr	r3, [pc, #36]	; (8003620 <MX_USART2_UART_Init+0x58>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035fe:	4b08      	ldr	r3, [pc, #32]	; (8003620 <MX_USART2_UART_Init+0x58>)
 8003600:	2200      	movs	r2, #0
 8003602:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003604:	4b06      	ldr	r3, [pc, #24]	; (8003620 <MX_USART2_UART_Init+0x58>)
 8003606:	2200      	movs	r2, #0
 8003608:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800360a:	4b05      	ldr	r3, [pc, #20]	; (8003620 <MX_USART2_UART_Init+0x58>)
 800360c:	0018      	movs	r0, r3
 800360e:	f004 f845 	bl	800769c <HAL_UART_Init>
 8003612:	1e03      	subs	r3, r0, #0
 8003614:	d001      	beq.n	800361a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003616:	f000 fa65 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20000354 	.word	0x20000354
 8003624:	40004400 	.word	0x40004400

08003628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800362e:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <MX_DMA_Init+0x38>)
 8003630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003632:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <MX_DMA_Init+0x38>)
 8003634:	2101      	movs	r1, #1
 8003636:	430a      	orrs	r2, r1
 8003638:	631a      	str	r2, [r3, #48]	; 0x30
 800363a:	4b09      	ldr	r3, [pc, #36]	; (8003660 <MX_DMA_Init+0x38>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	2201      	movs	r2, #1
 8003640:	4013      	ands	r3, r2
 8003642:	607b      	str	r3, [r7, #4]
 8003644:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003646:	2200      	movs	r2, #0
 8003648:	2100      	movs	r1, #0
 800364a:	2009      	movs	r0, #9
 800364c:	f001 fd2e 	bl	80050ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003650:	2009      	movs	r0, #9
 8003652:	f001 fd40 	bl	80050d6 <HAL_NVIC_EnableIRQ>

}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	46bd      	mov	sp, r7
 800365a:	b002      	add	sp, #8
 800365c:	bd80      	pop	{r7, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	40021000 	.word	0x40021000

08003664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b089      	sub	sp, #36	; 0x24
 8003668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800366a:	240c      	movs	r4, #12
 800366c:	193b      	adds	r3, r7, r4
 800366e:	0018      	movs	r0, r3
 8003670:	2314      	movs	r3, #20
 8003672:	001a      	movs	r2, r3
 8003674:	2100      	movs	r1, #0
 8003676:	f005 fbaf 	bl	8008dd8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800367a:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <MX_GPIO_Init+0x70>)
 800367c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367e:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <MX_GPIO_Init+0x70>)
 8003680:	2104      	movs	r1, #4
 8003682:	430a      	orrs	r2, r1
 8003684:	62da      	str	r2, [r3, #44]	; 0x2c
 8003686:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <MX_GPIO_Init+0x70>)
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	2204      	movs	r2, #4
 800368c:	4013      	ands	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003692:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <MX_GPIO_Init+0x70>)
 8003694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003696:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <MX_GPIO_Init+0x70>)
 8003698:	2101      	movs	r1, #1
 800369a:	430a      	orrs	r2, r1
 800369c:	62da      	str	r2, [r3, #44]	; 0x2c
 800369e:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <MX_GPIO_Init+0x70>)
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	2201      	movs	r2, #1
 80036a4:	4013      	ands	r3, r2
 80036a6:	607b      	str	r3, [r7, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80036aa:	193b      	adds	r3, r7, r4
 80036ac:	2280      	movs	r2, #128	; 0x80
 80036ae:	0192      	lsls	r2, r2, #6
 80036b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036b2:	193b      	adds	r3, r7, r4
 80036b4:	2200      	movs	r2, #0
 80036b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b8:	193b      	adds	r3, r7, r4
 80036ba:	2200      	movs	r2, #0
 80036bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036be:	193b      	adds	r3, r7, r4
 80036c0:	4a05      	ldr	r2, [pc, #20]	; (80036d8 <MX_GPIO_Init+0x74>)
 80036c2:	0019      	movs	r1, r3
 80036c4:	0010      	movs	r0, r2
 80036c6:	f001 fedd 	bl	8005484 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b009      	add	sp, #36	; 0x24
 80036d0:	bd90      	pop	{r4, r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	40021000 	.word	0x40021000
 80036d8:	50000800 	.word	0x50000800

080036dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// UART transmission complete callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
    if (htim == &htim6)
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d102      	bne.n	80036f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        uart_data_ready = 1; // Set flag to indicate data is ready to be sent
 80036ec:	4b04      	ldr	r3, [pc, #16]	; (8003700 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	701a      	strb	r2, [r3, #0]
    }
}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	46bd      	mov	sp, r7
 80036f6:	b002      	add	sp, #8
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	20000314 	.word	0x20000314
 8003700:	200003dc 	.word	0x200003dc

08003704 <ToggleDisplay>:


void ToggleDisplay()
{
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
	static uint8_t button_state = GPIO_PIN_SET; // Kintamasis tikrina paskutinę būseną

	    // Skaityti dabartinę mygtuko būseną
	    uint8_t current_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800370a:	1dfc      	adds	r4, r7, #7
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	019b      	lsls	r3, r3, #6
 8003710:	4a15      	ldr	r2, [pc, #84]	; (8003768 <ToggleDisplay+0x64>)
 8003712:	0019      	movs	r1, r3
 8003714:	0010      	movs	r0, r2
 8003716:	f002 f833 	bl	8005780 <HAL_GPIO_ReadPin>
 800371a:	0003      	movs	r3, r0
 800371c:	7023      	strb	r3, [r4, #0]

	    // Tikrina ar 'buton state' pasikeitė nuo atleidimo iki įspausto
	    if (button_state == GPIO_PIN_SET && current_state == GPIO_PIN_RESET &&
 800371e:	4b13      	ldr	r3, [pc, #76]	; (800376c <ToggleDisplay+0x68>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d118      	bne.n	8003758 <ToggleDisplay+0x54>
 8003726:	1dfb      	adds	r3, r7, #7
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d114      	bne.n	8003758 <ToggleDisplay+0x54>
	        HAL_GetTick() - last_button_press_time >= 50) {
 800372e:	f000 ff9b 	bl	8004668 <HAL_GetTick>
 8003732:	0002      	movs	r2, r0
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <ToggleDisplay+0x6c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	1ad3      	subs	r3, r2, r3
	    if (button_state == GPIO_PIN_SET && current_state == GPIO_PIN_RESET &&
 800373a:	2b31      	cmp	r3, #49	; 0x31
 800373c:	d90c      	bls.n	8003758 <ToggleDisplay+0x54>
	        // Toggle display mode
	        display_mode = (display_mode == 0) ? 1 : 0;
 800373e:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <ToggleDisplay+0x70>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	425a      	negs	r2, r3
 8003744:	4153      	adcs	r3, r2
 8003746:	b2db      	uxtb	r3, r3
 8003748:	001a      	movs	r2, r3
 800374a:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <ToggleDisplay+0x70>)
 800374c:	701a      	strb	r2, [r3, #0]
	        //display_mode != display_mode;

	        // Naujinti paskutini paspaudimo laiką
	        last_button_press_time = HAL_GetTick();
 800374e:	f000 ff8b 	bl	8004668 <HAL_GetTick>
 8003752:	0002      	movs	r2, r0
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <ToggleDisplay+0x6c>)
 8003756:	601a      	str	r2, [r3, #0]
	    }

	    // Atnaujinit 'buton state' kitai iteracijai
	    button_state = current_state;
 8003758:	4b04      	ldr	r3, [pc, #16]	; (800376c <ToggleDisplay+0x68>)
 800375a:	1dfa      	adds	r2, r7, #7
 800375c:	7812      	ldrb	r2, [r2, #0]
 800375e:	701a      	strb	r2, [r3, #0]
}
 8003760:	46c0      	nop			; (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	b003      	add	sp, #12
 8003766:	bd90      	pop	{r4, r7, pc}
 8003768:	50000800 	.word	0x50000800
 800376c:	20000018 	.word	0x20000018
 8003770:	2000046c 	.word	0x2000046c
 8003774:	2000046a 	.word	0x2000046a

08003778 <DisplayOLED>:


void DisplayOLED(void) //OLED atvaizdavimas
{
 8003778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800377a:	b097      	sub	sp, #92	; 0x5c
 800377c:	af02      	add	r7, sp, #8
	// LUX atvaizdavimas
    if (display_mode == 0 && HAL_GetTick() - up_time2 >= 2000)
 800377e:	4b5a      	ldr	r3, [pc, #360]	; (80038e8 <DisplayOLED+0x170>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d175      	bne.n	8003872 <DisplayOLED+0xfa>
 8003786:	f000 ff6f 	bl	8004668 <HAL_GetTick>
 800378a:	0002      	movs	r2, r0
 800378c:	4b57      	ldr	r3, [pc, #348]	; (80038ec <DisplayOLED+0x174>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	1ad2      	subs	r2, r2, r3
 8003792:	23fa      	movs	r3, #250	; 0xfa
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	429a      	cmp	r2, r3
 8003798:	d36b      	bcc.n	8003872 <DisplayOLED+0xfa>
    {

        SSD1306_Fill(SSD1306_COLOR_BLACK); // Clear OLED
 800379a:	2000      	movs	r0, #0
 800379c:	f000 fa9c 	bl	8003cd8 <SSD1306_Fill>

        char lux_str[20];
        char min_str[20];
        char max_str[20];
        snprintf(lux_str, sizeof(lux_str), "%.2f", vid);
 80037a0:	4b53      	ldr	r3, [pc, #332]	; (80038f0 <DisplayOLED+0x178>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	1c18      	adds	r0, r3, #0
 80037a6:	f7ff fb25 	bl	8002df4 <__aeabi_f2d>
 80037aa:	0002      	movs	r2, r0
 80037ac:	000b      	movs	r3, r1
 80037ae:	4951      	ldr	r1, [pc, #324]	; (80038f4 <DisplayOLED+0x17c>)
 80037b0:	243c      	movs	r4, #60	; 0x3c
 80037b2:	1938      	adds	r0, r7, r4
 80037b4:	9200      	str	r2, [sp, #0]
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	000a      	movs	r2, r1
 80037ba:	2114      	movs	r1, #20
 80037bc:	f005 fa6c 	bl	8008c98 <sniprintf>
        snprintf(min_str, sizeof(min_str), "%.2f", min_lux);
 80037c0:	4b4d      	ldr	r3, [pc, #308]	; (80038f8 <DisplayOLED+0x180>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	1c18      	adds	r0, r3, #0
 80037c6:	f7ff fb15 	bl	8002df4 <__aeabi_f2d>
 80037ca:	0002      	movs	r2, r0
 80037cc:	000b      	movs	r3, r1
 80037ce:	4949      	ldr	r1, [pc, #292]	; (80038f4 <DisplayOLED+0x17c>)
 80037d0:	2528      	movs	r5, #40	; 0x28
 80037d2:	1978      	adds	r0, r7, r5
 80037d4:	9200      	str	r2, [sp, #0]
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	000a      	movs	r2, r1
 80037da:	2114      	movs	r1, #20
 80037dc:	f005 fa5c 	bl	8008c98 <sniprintf>
        snprintf(max_str, sizeof(max_str), "%.2f", max_lux);
 80037e0:	4b46      	ldr	r3, [pc, #280]	; (80038fc <DisplayOLED+0x184>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	1c18      	adds	r0, r3, #0
 80037e6:	f7ff fb05 	bl	8002df4 <__aeabi_f2d>
 80037ea:	0002      	movs	r2, r0
 80037ec:	000b      	movs	r3, r1
 80037ee:	4941      	ldr	r1, [pc, #260]	; (80038f4 <DisplayOLED+0x17c>)
 80037f0:	2614      	movs	r6, #20
 80037f2:	19b8      	adds	r0, r7, r6
 80037f4:	9200      	str	r2, [sp, #0]
 80037f6:	9301      	str	r3, [sp, #4]
 80037f8:	000a      	movs	r2, r1
 80037fa:	2114      	movs	r1, #20
 80037fc:	f005 fa4c 	bl	8008c98 <sniprintf>

        SSD1306_GotoXY(0, 0);
 8003800:	2100      	movs	r1, #0
 8003802:	2000      	movs	r0, #0
 8003804:	f000 faf0 	bl	8003de8 <SSD1306_GotoXY>
        SSD1306_Puts("VID: ", &Font_11x18, SSD1306_COLOR_WHITE);
 8003808:	493d      	ldr	r1, [pc, #244]	; (8003900 <DisplayOLED+0x188>)
 800380a:	4b3e      	ldr	r3, [pc, #248]	; (8003904 <DisplayOLED+0x18c>)
 800380c:	2201      	movs	r2, #1
 800380e:	0018      	movs	r0, r3
 8003810:	f000 fb84 	bl	8003f1c <SSD1306_Puts>
        SSD1306_Puts(lux_str, &Font_11x18, SSD1306_COLOR_WHITE);
 8003814:	493a      	ldr	r1, [pc, #232]	; (8003900 <DisplayOLED+0x188>)
 8003816:	193b      	adds	r3, r7, r4
 8003818:	2201      	movs	r2, #1
 800381a:	0018      	movs	r0, r3
 800381c:	f000 fb7e 	bl	8003f1c <SSD1306_Puts>
        SSD1306_GotoXY(0, 20);
 8003820:	2114      	movs	r1, #20
 8003822:	2000      	movs	r0, #0
 8003824:	f000 fae0 	bl	8003de8 <SSD1306_GotoXY>
        SSD1306_Puts("MIN: ", &Font_11x18, SSD1306_COLOR_WHITE);
 8003828:	4935      	ldr	r1, [pc, #212]	; (8003900 <DisplayOLED+0x188>)
 800382a:	4b37      	ldr	r3, [pc, #220]	; (8003908 <DisplayOLED+0x190>)
 800382c:	2201      	movs	r2, #1
 800382e:	0018      	movs	r0, r3
 8003830:	f000 fb74 	bl	8003f1c <SSD1306_Puts>
        SSD1306_Puts(min_str, &Font_11x18, SSD1306_COLOR_WHITE);
 8003834:	4932      	ldr	r1, [pc, #200]	; (8003900 <DisplayOLED+0x188>)
 8003836:	197b      	adds	r3, r7, r5
 8003838:	2201      	movs	r2, #1
 800383a:	0018      	movs	r0, r3
 800383c:	f000 fb6e 	bl	8003f1c <SSD1306_Puts>
        SSD1306_GotoXY(0, 40);
 8003840:	2128      	movs	r1, #40	; 0x28
 8003842:	2000      	movs	r0, #0
 8003844:	f000 fad0 	bl	8003de8 <SSD1306_GotoXY>
        SSD1306_Puts("MAX: ", &Font_11x18, SSD1306_COLOR_WHITE);
 8003848:	492d      	ldr	r1, [pc, #180]	; (8003900 <DisplayOLED+0x188>)
 800384a:	4b30      	ldr	r3, [pc, #192]	; (800390c <DisplayOLED+0x194>)
 800384c:	2201      	movs	r2, #1
 800384e:	0018      	movs	r0, r3
 8003850:	f000 fb64 	bl	8003f1c <SSD1306_Puts>
        SSD1306_Puts(max_str, &Font_11x18, SSD1306_COLOR_WHITE);
 8003854:	492a      	ldr	r1, [pc, #168]	; (8003900 <DisplayOLED+0x188>)
 8003856:	19bb      	adds	r3, r7, r6
 8003858:	2201      	movs	r2, #1
 800385a:	0018      	movs	r0, r3
 800385c:	f000 fb5e 	bl	8003f1c <SSD1306_Puts>

        SSD1306_UpdateScreen();
 8003860:	f000 fa06 	bl	8003c70 <SSD1306_UpdateScreen>

        up_time2 = HAL_GetTick();
 8003864:	f000 ff00 	bl	8004668 <HAL_GetTick>
 8003868:	0002      	movs	r2, r0
 800386a:	4b20      	ldr	r3, [pc, #128]	; (80038ec <DisplayOLED+0x174>)
 800386c:	601a      	str	r2, [r3, #0]
    {
 800386e:	46c0      	nop			; (mov r8, r8)

        SSD1306_UpdateScreen();

        up_time1 = HAL_GetTick();
    }
}
 8003870:	e036      	b.n	80038e0 <DisplayOLED+0x168>
    else if (display_mode == 1 && HAL_GetTick() - up_time1 >= 1000)
 8003872:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <DisplayOLED+0x170>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d132      	bne.n	80038e0 <DisplayOLED+0x168>
 800387a:	f000 fef5 	bl	8004668 <HAL_GetTick>
 800387e:	0002      	movs	r2, r0
 8003880:	4b23      	ldr	r3, [pc, #140]	; (8003910 <DisplayOLED+0x198>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	1ad2      	subs	r2, r2, r3
 8003886:	23fa      	movs	r3, #250	; 0xfa
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	429a      	cmp	r2, r3
 800388c:	d328      	bcc.n	80038e0 <DisplayOLED+0x168>
        SSD1306_Fill(SSD1306_COLOR_BLACK); // Clear OLED
 800388e:	2000      	movs	r0, #0
 8003890:	f000 fa22 	bl	8003cd8 <SSD1306_Fill>
        snprintf(rms_str, sizeof(rms_str), "%.2f", RMS);
 8003894:	4b1f      	ldr	r3, [pc, #124]	; (8003914 <DisplayOLED+0x19c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	1c18      	adds	r0, r3, #0
 800389a:	f7ff faab 	bl	8002df4 <__aeabi_f2d>
 800389e:	0002      	movs	r2, r0
 80038a0:	000b      	movs	r3, r1
 80038a2:	4914      	ldr	r1, [pc, #80]	; (80038f4 <DisplayOLED+0x17c>)
 80038a4:	0038      	movs	r0, r7
 80038a6:	9200      	str	r2, [sp, #0]
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	000a      	movs	r2, r1
 80038ac:	2114      	movs	r1, #20
 80038ae:	f005 f9f3 	bl	8008c98 <sniprintf>
        SSD1306_GotoXY(0, 20);
 80038b2:	2114      	movs	r1, #20
 80038b4:	2000      	movs	r0, #0
 80038b6:	f000 fa97 	bl	8003de8 <SSD1306_GotoXY>
        SSD1306_Puts("RMS: ", &Font_11x18, SSD1306_COLOR_WHITE);
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <DisplayOLED+0x188>)
 80038bc:	4b16      	ldr	r3, [pc, #88]	; (8003918 <DisplayOLED+0x1a0>)
 80038be:	2201      	movs	r2, #1
 80038c0:	0018      	movs	r0, r3
 80038c2:	f000 fb2b 	bl	8003f1c <SSD1306_Puts>
        SSD1306_Puts(rms_str, &Font_11x18, SSD1306_COLOR_WHITE);
 80038c6:	490e      	ldr	r1, [pc, #56]	; (8003900 <DisplayOLED+0x188>)
 80038c8:	003b      	movs	r3, r7
 80038ca:	2201      	movs	r2, #1
 80038cc:	0018      	movs	r0, r3
 80038ce:	f000 fb25 	bl	8003f1c <SSD1306_Puts>
        SSD1306_UpdateScreen();
 80038d2:	f000 f9cd 	bl	8003c70 <SSD1306_UpdateScreen>
        up_time1 = HAL_GetTick();
 80038d6:	f000 fec7 	bl	8004668 <HAL_GetTick>
 80038da:	0002      	movs	r2, r0
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <DisplayOLED+0x198>)
 80038de:	601a      	str	r2, [r3, #0]
}
 80038e0:	46c0      	nop			; (mov r8, r8)
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b015      	add	sp, #84	; 0x54
 80038e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038e8:	2000046a 	.word	0x2000046a
 80038ec:	20000460 	.word	0x20000460
 80038f0:	200003f0 	.word	0x200003f0
 80038f4:	0800c4b8 	.word	0x0800c4b8
 80038f8:	2000000c 	.word	0x2000000c
 80038fc:	20000010 	.word	0x20000010
 8003900:	20000000 	.word	0x20000000
 8003904:	0800c4c0 	.word	0x0800c4c0
 8003908:	0800c4c8 	.word	0x0800c4c8
 800390c:	0800c4d0 	.word	0x0800c4d0
 8003910:	20000464 	.word	0x20000464
 8003914:	200003f4 	.word	0x200003f4
 8003918:	0800c4d8 	.word	0x0800c4d8

0800391c <convertToLux>:

/* Funkcija konvertuoti ADC vertes į
 * tikrąsias apšvietimo vertes */


float convertToLux(uint16_t adc_value) {
 800391c:	b5b0      	push	{r4, r5, r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0
 8003922:	0002      	movs	r2, r0
 8003924:	1dbb      	adds	r3, r7, #6
 8003926:	801a      	strh	r2, [r3, #0]

	float voltage = (adc_value / 4095.0) * 3.3; // Konvertuoti ASK vertę į įtampą, prie Vref-3v3, 12bit
 8003928:	1dbb      	adds	r3, r7, #6
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	0018      	movs	r0, r3
 800392e:	f7ff fa0b 	bl	8002d48 <__aeabi_i2d>
 8003932:	2200      	movs	r2, #0
 8003934:	4b32      	ldr	r3, [pc, #200]	; (8003a00 <convertToLux+0xe4>)
 8003936:	f7fd ff75 	bl	8001824 <__aeabi_ddiv>
 800393a:	0002      	movs	r2, r0
 800393c:	000b      	movs	r3, r1
 800393e:	0010      	movs	r0, r2
 8003940:	0019      	movs	r1, r3
 8003942:	4a30      	ldr	r2, [pc, #192]	; (8003a04 <convertToLux+0xe8>)
 8003944:	4b30      	ldr	r3, [pc, #192]	; (8003a08 <convertToLux+0xec>)
 8003946:	f7fe fb67 	bl	8002018 <__aeabi_dmul>
 800394a:	0002      	movs	r2, r0
 800394c:	000b      	movs	r3, r1
 800394e:	0010      	movs	r0, r2
 8003950:	0019      	movs	r1, r3
 8003952:	f7ff fa97 	bl	8002e84 <__aeabi_d2f>
 8003956:	1c03      	adds	r3, r0, #0
 8003958:	61fb      	str	r3, [r7, #28]
	float r_ldr = (5000.0 * voltage) / (3.3 - voltage); // KOnvertuoti foto varzos vertę pagal įtampos daliklio formulę
 800395a:	69f8      	ldr	r0, [r7, #28]
 800395c:	f7ff fa4a 	bl	8002df4 <__aeabi_f2d>
 8003960:	2200      	movs	r2, #0
 8003962:	4b2a      	ldr	r3, [pc, #168]	; (8003a0c <convertToLux+0xf0>)
 8003964:	f7fe fb58 	bl	8002018 <__aeabi_dmul>
 8003968:	0002      	movs	r2, r0
 800396a:	000b      	movs	r3, r1
 800396c:	0014      	movs	r4, r2
 800396e:	001d      	movs	r5, r3
 8003970:	69f8      	ldr	r0, [r7, #28]
 8003972:	f7ff fa3f 	bl	8002df4 <__aeabi_f2d>
 8003976:	0002      	movs	r2, r0
 8003978:	000b      	movs	r3, r1
 800397a:	4822      	ldr	r0, [pc, #136]	; (8003a04 <convertToLux+0xe8>)
 800397c:	4922      	ldr	r1, [pc, #136]	; (8003a08 <convertToLux+0xec>)
 800397e:	f7fe fe0d 	bl	800259c <__aeabi_dsub>
 8003982:	0002      	movs	r2, r0
 8003984:	000b      	movs	r3, r1
 8003986:	0020      	movs	r0, r4
 8003988:	0029      	movs	r1, r5
 800398a:	f7fd ff4b 	bl	8001824 <__aeabi_ddiv>
 800398e:	0002      	movs	r2, r0
 8003990:	000b      	movs	r3, r1
 8003992:	0010      	movs	r0, r2
 8003994:	0019      	movs	r1, r3
 8003996:	f7ff fa75 	bl	8002e84 <__aeabi_d2f>
 800399a:	1c03      	adds	r3, r0, #0
 800399c:	61bb      	str	r3, [r7, #24]
	float r10 = 7500.0; // didžiausia foto varžos vertė  Resistance of LDR at 10 lux (from datasheet)
 800399e:	4b1c      	ldr	r3, [pc, #112]	; (8003a10 <convertToLux+0xf4>)
 80039a0:	617b      	str	r3, [r7, #20]
	float y = 0.6; // Gamma charakteristika Gamma characteristic (from datasheet)
 80039a2:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <convertToLux+0xf8>)
 80039a4:	613b      	str	r3, [r7, #16]
	float lux_value = pow(10, y * log10(r_ldr / r10)); // Apskaiciuoja Lux vertę pagal gamma charakteristika (datasheet)
 80039a6:	6938      	ldr	r0, [r7, #16]
 80039a8:	f7ff fa24 	bl	8002df4 <__aeabi_f2d>
 80039ac:	0004      	movs	r4, r0
 80039ae:	000d      	movs	r5, r1
 80039b0:	6979      	ldr	r1, [r7, #20]
 80039b2:	69b8      	ldr	r0, [r7, #24]
 80039b4:	f7fd f86c 	bl	8000a90 <__aeabi_fdiv>
 80039b8:	1c03      	adds	r3, r0, #0
 80039ba:	1c18      	adds	r0, r3, #0
 80039bc:	f7ff fa1a 	bl	8002df4 <__aeabi_f2d>
 80039c0:	0002      	movs	r2, r0
 80039c2:	000b      	movs	r3, r1
 80039c4:	0010      	movs	r0, r2
 80039c6:	0019      	movs	r1, r3
 80039c8:	f007 fb94 	bl	800b0f4 <log10>
 80039cc:	0002      	movs	r2, r0
 80039ce:	000b      	movs	r3, r1
 80039d0:	0020      	movs	r0, r4
 80039d2:	0029      	movs	r1, r5
 80039d4:	f7fe fb20 	bl	8002018 <__aeabi_dmul>
 80039d8:	0002      	movs	r2, r0
 80039da:	000b      	movs	r3, r1
 80039dc:	2000      	movs	r0, #0
 80039de:	490e      	ldr	r1, [pc, #56]	; (8003a18 <convertToLux+0xfc>)
 80039e0:	f007 fbbe 	bl	800b160 <pow>
 80039e4:	0002      	movs	r2, r0
 80039e6:	000b      	movs	r3, r1
 80039e8:	0010      	movs	r0, r2
 80039ea:	0019      	movs	r1, r3
 80039ec:	f7ff fa4a 	bl	8002e84 <__aeabi_d2f>
 80039f0:	1c03      	adds	r3, r0, #0
 80039f2:	60fb      	str	r3, [r7, #12]
	return lux_value;
 80039f4:	68fb      	ldr	r3, [r7, #12]

}
 80039f6:	1c18      	adds	r0, r3, #0
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b008      	add	sp, #32
 80039fc:	bdb0      	pop	{r4, r5, r7, pc}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	40affe00 	.word	0x40affe00
 8003a04:	66666666 	.word	0x66666666
 8003a08:	400a6666 	.word	0x400a6666
 8003a0c:	40b38800 	.word	0x40b38800
 8003a10:	45ea6000 	.word	0x45ea6000
 8003a14:	3f19999a 	.word	0x3f19999a
 8003a18:	40240000 	.word	0x40240000

08003a1c <convertRMS>:


float convertRMS(uint16_t adc_value, int Samples)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	0002      	movs	r2, r0
 8003a24:	6039      	str	r1, [r7, #0]
 8003a26:	1dbb      	adds	r3, r7, #6
 8003a28:	801a      	strh	r2, [r3, #0]
	float sum_square = 0.0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]

	 // Kvadratinamos vertes
	    for (int i = 0; i < Samples; i++) {
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	e027      	b.n	8003a84 <convertRMS+0x68>
	        float voltage = adc_values[2] * 3.3 / 4096; // paverčiama į įtampą
 8003a34:	4b26      	ldr	r3, [pc, #152]	; (8003ad0 <convertRMS+0xb4>)
 8003a36:	889b      	ldrh	r3, [r3, #4]
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7ff f985 	bl	8002d48 <__aeabi_i2d>
 8003a3e:	4a25      	ldr	r2, [pc, #148]	; (8003ad4 <convertRMS+0xb8>)
 8003a40:	4b25      	ldr	r3, [pc, #148]	; (8003ad8 <convertRMS+0xbc>)
 8003a42:	f7fe fae9 	bl	8002018 <__aeabi_dmul>
 8003a46:	0002      	movs	r2, r0
 8003a48:	000b      	movs	r3, r1
 8003a4a:	0010      	movs	r0, r2
 8003a4c:	0019      	movs	r1, r3
 8003a4e:	2200      	movs	r2, #0
 8003a50:	4b22      	ldr	r3, [pc, #136]	; (8003adc <convertRMS+0xc0>)
 8003a52:	f7fd fee7 	bl	8001824 <__aeabi_ddiv>
 8003a56:	0002      	movs	r2, r0
 8003a58:	000b      	movs	r3, r1
 8003a5a:	0010      	movs	r0, r2
 8003a5c:	0019      	movs	r1, r3
 8003a5e:	f7ff fa11 	bl	8002e84 <__aeabi_d2f>
 8003a62:	1c03      	adds	r3, r0, #0
 8003a64:	613b      	str	r3, [r7, #16]
	        float voltage_squared = voltage * voltage;
 8003a66:	6939      	ldr	r1, [r7, #16]
 8003a68:	6938      	ldr	r0, [r7, #16]
 8003a6a:	f7fd f9db 	bl	8000e24 <__aeabi_fmul>
 8003a6e:	1c03      	adds	r3, r0, #0
 8003a70:	60fb      	str	r3, [r7, #12]
	        sum_square += voltage_squared;
 8003a72:	68f9      	ldr	r1, [r7, #12]
 8003a74:	69f8      	ldr	r0, [r7, #28]
 8003a76:	f7fc fe6b 	bl	8000750 <__aeabi_fadd>
 8003a7a:	1c03      	adds	r3, r0, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
	    for (int i = 0; i < Samples; i++) {
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	3301      	adds	r3, #1
 8003a82:	61bb      	str	r3, [r7, #24]
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	dbd3      	blt.n	8003a34 <convertRMS+0x18>
	    }

	// Vidurkinam
	float mean_square = sum_square / Samples;
 8003a8c:	6838      	ldr	r0, [r7, #0]
 8003a8e:	f7fd fb17 	bl	80010c0 <__aeabi_i2f>
 8003a92:	1c03      	adds	r3, r0, #0
 8003a94:	1c19      	adds	r1, r3, #0
 8003a96:	69f8      	ldr	r0, [r7, #28]
 8003a98:	f7fc fffa 	bl	8000a90 <__aeabi_fdiv>
 8003a9c:	1c03      	adds	r3, r0, #0
 8003a9e:	617b      	str	r3, [r7, #20]

	return RMS= sqrt(mean_square);
 8003aa0:	6978      	ldr	r0, [r7, #20]
 8003aa2:	f7ff f9a7 	bl	8002df4 <__aeabi_f2d>
 8003aa6:	0002      	movs	r2, r0
 8003aa8:	000b      	movs	r3, r1
 8003aaa:	0010      	movs	r0, r2
 8003aac:	0019      	movs	r1, r3
 8003aae:	f007 fbc5 	bl	800b23c <sqrt>
 8003ab2:	0002      	movs	r2, r0
 8003ab4:	000b      	movs	r3, r1
 8003ab6:	0010      	movs	r0, r2
 8003ab8:	0019      	movs	r1, r3
 8003aba:	f7ff f9e3 	bl	8002e84 <__aeabi_d2f>
 8003abe:	1c02      	adds	r2, r0, #0
 8003ac0:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <convertRMS+0xc4>)
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <convertRMS+0xc4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
}
 8003ac8:	1c18      	adds	r0, r3, #0
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b008      	add	sp, #32
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	200003e0 	.word	0x200003e0
 8003ad4:	66666666 	.word	0x66666666
 8003ad8:	400a6666 	.word	0x400a6666
 8003adc:	40b00000 	.word	0x40b00000
 8003ae0:	200003f4 	.word	0x200003f4

08003ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ae8:	b672      	cpsid	i
}
 8003aea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003aec:	e7fe      	b.n	8003aec <Error_Handler+0x8>
	...

08003af0 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003af6:	f000 fa37 	bl	8003f68 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003afa:	4b59      	ldr	r3, [pc, #356]	; (8003c60 <SSD1306_Init+0x170>)
 8003afc:	4859      	ldr	r0, [pc, #356]	; (8003c64 <SSD1306_Init+0x174>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	2178      	movs	r1, #120	; 0x78
 8003b02:	f001 fff9 	bl	8005af8 <HAL_I2C_IsDeviceReady>
 8003b06:	1e03      	subs	r3, r0, #0
 8003b08:	d001      	beq.n	8003b0e <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e0a3      	b.n	8003c56 <SSD1306_Init+0x166>
	}

	/* A little delay */
	uint32_t p = 2500;
 8003b0e:	4b56      	ldr	r3, [pc, #344]	; (8003c68 <SSD1306_Init+0x178>)
 8003b10:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003b12:	e002      	b.n	8003b1a <SSD1306_Init+0x2a>
		p--;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1f9      	bne.n	8003b14 <SSD1306_Init+0x24>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003b20:	22ae      	movs	r2, #174	; 0xae
 8003b22:	2100      	movs	r1, #0
 8003b24:	2078      	movs	r0, #120	; 0x78
 8003b26:	f000 fab7 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	2078      	movs	r0, #120	; 0x78
 8003b30:	f000 fab2 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003b34:	2210      	movs	r2, #16
 8003b36:	2100      	movs	r1, #0
 8003b38:	2078      	movs	r0, #120	; 0x78
 8003b3a:	f000 faad 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003b3e:	22b0      	movs	r2, #176	; 0xb0
 8003b40:	2100      	movs	r1, #0
 8003b42:	2078      	movs	r0, #120	; 0x78
 8003b44:	f000 faa8 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8003b48:	22c8      	movs	r2, #200	; 0xc8
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	2078      	movs	r0, #120	; 0x78
 8003b4e:	f000 faa3 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003b52:	2200      	movs	r2, #0
 8003b54:	2100      	movs	r1, #0
 8003b56:	2078      	movs	r0, #120	; 0x78
 8003b58:	f000 fa9e 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	2100      	movs	r1, #0
 8003b60:	2078      	movs	r0, #120	; 0x78
 8003b62:	f000 fa99 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003b66:	2240      	movs	r2, #64	; 0x40
 8003b68:	2100      	movs	r1, #0
 8003b6a:	2078      	movs	r0, #120	; 0x78
 8003b6c:	f000 fa94 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003b70:	2281      	movs	r2, #129	; 0x81
 8003b72:	2100      	movs	r1, #0
 8003b74:	2078      	movs	r0, #120	; 0x78
 8003b76:	f000 fa8f 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003b7a:	22ff      	movs	r2, #255	; 0xff
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	2078      	movs	r0, #120	; 0x78
 8003b80:	f000 fa8a 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003b84:	22a1      	movs	r2, #161	; 0xa1
 8003b86:	2100      	movs	r1, #0
 8003b88:	2078      	movs	r0, #120	; 0x78
 8003b8a:	f000 fa85 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003b8e:	22a6      	movs	r2, #166	; 0xa6
 8003b90:	2100      	movs	r1, #0
 8003b92:	2078      	movs	r0, #120	; 0x78
 8003b94:	f000 fa80 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8003b98:	22a8      	movs	r2, #168	; 0xa8
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	2078      	movs	r0, #120	; 0x78
 8003b9e:	f000 fa7b 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003ba2:	223f      	movs	r2, #63	; 0x3f
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	2078      	movs	r0, #120	; 0x78
 8003ba8:	f000 fa76 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003bac:	22a4      	movs	r2, #164	; 0xa4
 8003bae:	2100      	movs	r1, #0
 8003bb0:	2078      	movs	r0, #120	; 0x78
 8003bb2:	f000 fa71 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003bb6:	22d3      	movs	r2, #211	; 0xd3
 8003bb8:	2100      	movs	r1, #0
 8003bba:	2078      	movs	r0, #120	; 0x78
 8003bbc:	f000 fa6c 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	2078      	movs	r0, #120	; 0x78
 8003bc6:	f000 fa67 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003bca:	22d5      	movs	r2, #213	; 0xd5
 8003bcc:	2100      	movs	r1, #0
 8003bce:	2078      	movs	r0, #120	; 0x78
 8003bd0:	f000 fa62 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003bd4:	22f0      	movs	r2, #240	; 0xf0
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	2078      	movs	r0, #120	; 0x78
 8003bda:	f000 fa5d 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003bde:	22d9      	movs	r2, #217	; 0xd9
 8003be0:	2100      	movs	r1, #0
 8003be2:	2078      	movs	r0, #120	; 0x78
 8003be4:	f000 fa58 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003be8:	2222      	movs	r2, #34	; 0x22
 8003bea:	2100      	movs	r1, #0
 8003bec:	2078      	movs	r0, #120	; 0x78
 8003bee:	f000 fa53 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003bf2:	22da      	movs	r2, #218	; 0xda
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	2078      	movs	r0, #120	; 0x78
 8003bf8:	f000 fa4e 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8003bfc:	2212      	movs	r2, #18
 8003bfe:	2100      	movs	r1, #0
 8003c00:	2078      	movs	r0, #120	; 0x78
 8003c02:	f000 fa49 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003c06:	22db      	movs	r2, #219	; 0xdb
 8003c08:	2100      	movs	r1, #0
 8003c0a:	2078      	movs	r0, #120	; 0x78
 8003c0c:	f000 fa44 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003c10:	2220      	movs	r2, #32
 8003c12:	2100      	movs	r1, #0
 8003c14:	2078      	movs	r0, #120	; 0x78
 8003c16:	f000 fa3f 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003c1a:	228d      	movs	r2, #141	; 0x8d
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	2078      	movs	r0, #120	; 0x78
 8003c20:	f000 fa3a 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003c24:	2214      	movs	r2, #20
 8003c26:	2100      	movs	r1, #0
 8003c28:	2078      	movs	r0, #120	; 0x78
 8003c2a:	f000 fa35 	bl	8004098 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003c2e:	22af      	movs	r2, #175	; 0xaf
 8003c30:	2100      	movs	r1, #0
 8003c32:	2078      	movs	r0, #120	; 0x78
 8003c34:	f000 fa30 	bl	8004098 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003c38:	2000      	movs	r0, #0
 8003c3a:	f000 f84d 	bl	8003cd8 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8003c3e:	f000 f817 	bl	8003c70 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8003c42:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <SSD1306_Init+0x17c>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003c48:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <SSD1306_Init+0x17c>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8003c4e:	4b07      	ldr	r3, [pc, #28]	; (8003c6c <SSD1306_Init+0x17c>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8003c54:	2301      	movs	r3, #1
}
 8003c56:	0018      	movs	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b002      	add	sp, #8
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	00004e20 	.word	0x00004e20
 8003c64:	200002c0 	.word	0x200002c0
 8003c68:	000009c4 	.word	0x000009c4
 8003c6c:	20000870 	.word	0x20000870

08003c70 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8003c76:	1dfb      	adds	r3, r7, #7
 8003c78:	2200      	movs	r2, #0
 8003c7a:	701a      	strb	r2, [r3, #0]
 8003c7c:	e021      	b.n	8003cc2 <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003c7e:	1dfb      	adds	r3, r7, #7
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	3b50      	subs	r3, #80	; 0x50
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	001a      	movs	r2, r3
 8003c88:	2100      	movs	r1, #0
 8003c8a:	2078      	movs	r0, #120	; 0x78
 8003c8c:	f000 fa04 	bl	8004098 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003c90:	2200      	movs	r2, #0
 8003c92:	2100      	movs	r1, #0
 8003c94:	2078      	movs	r0, #120	; 0x78
 8003c96:	f000 f9ff 	bl	8004098 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8003c9a:	2210      	movs	r2, #16
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	2078      	movs	r0, #120	; 0x78
 8003ca0:	f000 f9fa 	bl	8004098 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003ca4:	1dfb      	adds	r3, r7, #7
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	01da      	lsls	r2, r3, #7
 8003caa:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <SSD1306_UpdateScreen+0x64>)
 8003cac:	18d2      	adds	r2, r2, r3
 8003cae:	2380      	movs	r3, #128	; 0x80
 8003cb0:	2140      	movs	r1, #64	; 0x40
 8003cb2:	2078      	movs	r0, #120	; 0x78
 8003cb4:	f000 f96c 	bl	8003f90 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003cb8:	1dfb      	adds	r3, r7, #7
 8003cba:	781a      	ldrb	r2, [r3, #0]
 8003cbc:	1dfb      	adds	r3, r7, #7
 8003cbe:	3201      	adds	r2, #1
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	1dfb      	adds	r3, r7, #7
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b07      	cmp	r3, #7
 8003cc8:	d9d9      	bls.n	8003c7e <SSD1306_UpdateScreen+0xe>
	}
}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	46c0      	nop			; (mov r8, r8)
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b002      	add	sp, #8
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000470 	.word	0x20000470

08003cd8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	0002      	movs	r2, r0
 8003ce0:	1dfb      	adds	r3, r7, #7
 8003ce2:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003ce4:	1dfb      	adds	r3, r7, #7
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <SSD1306_Fill+0x18>
 8003cec:	2300      	movs	r3, #0
 8003cee:	e000      	b.n	8003cf2 <SSD1306_Fill+0x1a>
 8003cf0:	23ff      	movs	r3, #255	; 0xff
 8003cf2:	2280      	movs	r2, #128	; 0x80
 8003cf4:	00d2      	lsls	r2, r2, #3
 8003cf6:	4804      	ldr	r0, [pc, #16]	; (8003d08 <SSD1306_Fill+0x30>)
 8003cf8:	0019      	movs	r1, r3
 8003cfa:	f005 f86d 	bl	8008dd8 <memset>
}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b002      	add	sp, #8
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	20000470 	.word	0x20000470

08003d0c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003d0c:	b590      	push	{r4, r7, lr}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	0004      	movs	r4, r0
 8003d14:	0008      	movs	r0, r1
 8003d16:	0011      	movs	r1, r2
 8003d18:	1dbb      	adds	r3, r7, #6
 8003d1a:	1c22      	adds	r2, r4, #0
 8003d1c:	801a      	strh	r2, [r3, #0]
 8003d1e:	1d3b      	adds	r3, r7, #4
 8003d20:	1c02      	adds	r2, r0, #0
 8003d22:	801a      	strh	r2, [r3, #0]
 8003d24:	1cfb      	adds	r3, r7, #3
 8003d26:	1c0a      	adds	r2, r1, #0
 8003d28:	701a      	strb	r2, [r3, #0]
	if (
 8003d2a:	1dbb      	adds	r3, r7, #6
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8003d30:	d852      	bhi.n	8003dd8 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 8003d32:	1d3b      	adds	r3, r7, #4
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	2b3f      	cmp	r3, #63	; 0x3f
 8003d38:	d84e      	bhi.n	8003dd8 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003d3a:	4b29      	ldr	r3, [pc, #164]	; (8003de0 <SSD1306_DrawPixel+0xd4>)
 8003d3c:	791b      	ldrb	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d006      	beq.n	8003d50 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 8003d42:	1cfb      	adds	r3, r7, #3
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	425a      	negs	r2, r3
 8003d48:	4153      	adcs	r3, r2
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	1cfb      	adds	r3, r7, #3
 8003d4e:	701a      	strb	r2, [r3, #0]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003d50:	1cfb      	adds	r3, r7, #3
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d11e      	bne.n	8003d96 <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003d58:	1dbb      	adds	r3, r7, #6
 8003d5a:	881a      	ldrh	r2, [r3, #0]
 8003d5c:	1d3b      	adds	r3, r7, #4
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	08db      	lsrs	r3, r3, #3
 8003d62:	b298      	uxth	r0, r3
 8003d64:	0003      	movs	r3, r0
 8003d66:	01db      	lsls	r3, r3, #7
 8003d68:	18d3      	adds	r3, r2, r3
 8003d6a:	4a1e      	ldr	r2, [pc, #120]	; (8003de4 <SSD1306_DrawPixel+0xd8>)
 8003d6c:	5cd3      	ldrb	r3, [r2, r3]
 8003d6e:	b25a      	sxtb	r2, r3
 8003d70:	1d3b      	adds	r3, r7, #4
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	2107      	movs	r1, #7
 8003d76:	400b      	ands	r3, r1
 8003d78:	2101      	movs	r1, #1
 8003d7a:	4099      	lsls	r1, r3
 8003d7c:	000b      	movs	r3, r1
 8003d7e:	b25b      	sxtb	r3, r3
 8003d80:	4313      	orrs	r3, r2
 8003d82:	b259      	sxtb	r1, r3
 8003d84:	1dbb      	adds	r3, r7, #6
 8003d86:	881a      	ldrh	r2, [r3, #0]
 8003d88:	0003      	movs	r3, r0
 8003d8a:	01db      	lsls	r3, r3, #7
 8003d8c:	18d3      	adds	r3, r2, r3
 8003d8e:	b2c9      	uxtb	r1, r1
 8003d90:	4a14      	ldr	r2, [pc, #80]	; (8003de4 <SSD1306_DrawPixel+0xd8>)
 8003d92:	54d1      	strb	r1, [r2, r3]
 8003d94:	e021      	b.n	8003dda <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003d96:	1dbb      	adds	r3, r7, #6
 8003d98:	881a      	ldrh	r2, [r3, #0]
 8003d9a:	1d3b      	adds	r3, r7, #4
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	08db      	lsrs	r3, r3, #3
 8003da0:	b298      	uxth	r0, r3
 8003da2:	0003      	movs	r3, r0
 8003da4:	01db      	lsls	r3, r3, #7
 8003da6:	18d3      	adds	r3, r2, r3
 8003da8:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <SSD1306_DrawPixel+0xd8>)
 8003daa:	5cd3      	ldrb	r3, [r2, r3]
 8003dac:	b25b      	sxtb	r3, r3
 8003dae:	1d3a      	adds	r2, r7, #4
 8003db0:	8812      	ldrh	r2, [r2, #0]
 8003db2:	2107      	movs	r1, #7
 8003db4:	400a      	ands	r2, r1
 8003db6:	2101      	movs	r1, #1
 8003db8:	4091      	lsls	r1, r2
 8003dba:	000a      	movs	r2, r1
 8003dbc:	b252      	sxtb	r2, r2
 8003dbe:	43d2      	mvns	r2, r2
 8003dc0:	b252      	sxtb	r2, r2
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	b259      	sxtb	r1, r3
 8003dc6:	1dbb      	adds	r3, r7, #6
 8003dc8:	881a      	ldrh	r2, [r3, #0]
 8003dca:	0003      	movs	r3, r0
 8003dcc:	01db      	lsls	r3, r3, #7
 8003dce:	18d3      	adds	r3, r2, r3
 8003dd0:	b2c9      	uxtb	r1, r1
 8003dd2:	4a04      	ldr	r2, [pc, #16]	; (8003de4 <SSD1306_DrawPixel+0xd8>)
 8003dd4:	54d1      	strb	r1, [r2, r3]
 8003dd6:	e000      	b.n	8003dda <SSD1306_DrawPixel+0xce>
		return;
 8003dd8:	46c0      	nop			; (mov r8, r8)
	}
}
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b003      	add	sp, #12
 8003dde:	bd90      	pop	{r4, r7, pc}
 8003de0:	20000870 	.word	0x20000870
 8003de4:	20000470 	.word	0x20000470

08003de8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	0002      	movs	r2, r0
 8003df0:	1dbb      	adds	r3, r7, #6
 8003df2:	801a      	strh	r2, [r3, #0]
 8003df4:	1d3b      	adds	r3, r7, #4
 8003df6:	1c0a      	adds	r2, r1, #0
 8003df8:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003dfa:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <SSD1306_GotoXY+0x2c>)
 8003dfc:	1dba      	adds	r2, r7, #6
 8003dfe:	8812      	ldrh	r2, [r2, #0]
 8003e00:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8003e02:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <SSD1306_GotoXY+0x2c>)
 8003e04:	1d3a      	adds	r2, r7, #4
 8003e06:	8812      	ldrh	r2, [r2, #0]
 8003e08:	805a      	strh	r2, [r3, #2]
}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	b002      	add	sp, #8
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	20000870 	.word	0x20000870

08003e18 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6039      	str	r1, [r7, #0]
 8003e20:	0011      	movs	r1, r2
 8003e22:	1dfb      	adds	r3, r7, #7
 8003e24:	1c02      	adds	r2, r0, #0
 8003e26:	701a      	strb	r2, [r3, #0]
 8003e28:	1dbb      	adds	r3, r7, #6
 8003e2a:	1c0a      	adds	r2, r1, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003e2e:	4b3a      	ldr	r3, [pc, #232]	; (8003f18 <SSD1306_Putc+0x100>)
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	001a      	movs	r2, r3
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	18d3      	adds	r3, r2, r3
	if (
 8003e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8003e3c:	dc07      	bgt.n	8003e4e <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003e3e:	4b36      	ldr	r3, [pc, #216]	; (8003f18 <SSD1306_Putc+0x100>)
 8003e40:	885b      	ldrh	r3, [r3, #2]
 8003e42:	001a      	movs	r2, r3
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	785b      	ldrb	r3, [r3, #1]
 8003e48:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003e4a:	2b3f      	cmp	r3, #63	; 0x3f
 8003e4c:	dd01      	ble.n	8003e52 <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e05e      	b.n	8003f10 <SSD1306_Putc+0xf8>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	e04a      	b.n	8003eee <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	1dfb      	adds	r3, r7, #7
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	3b20      	subs	r3, #32
 8003e62:	6839      	ldr	r1, [r7, #0]
 8003e64:	7849      	ldrb	r1, [r1, #1]
 8003e66:	434b      	muls	r3, r1
 8003e68:	0019      	movs	r1, r3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	18cb      	adds	r3, r1, r3
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	18d3      	adds	r3, r2, r3
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003e76:	2300      	movs	r3, #0
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	e02f      	b.n	8003edc <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	409a      	lsls	r2, r3
 8003e82:	2380      	movs	r3, #128	; 0x80
 8003e84:	021b      	lsls	r3, r3, #8
 8003e86:	4013      	ands	r3, r2
 8003e88:	d011      	beq.n	8003eae <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003e8a:	4b23      	ldr	r3, [pc, #140]	; (8003f18 <SSD1306_Putc+0x100>)
 8003e8c:	881a      	ldrh	r2, [r3, #0]
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	18d3      	adds	r3, r2, r3
 8003e94:	b298      	uxth	r0, r3
 8003e96:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <SSD1306_Putc+0x100>)
 8003e98:	885a      	ldrh	r2, [r3, #2]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	18d3      	adds	r3, r2, r3
 8003ea0:	b299      	uxth	r1, r3
 8003ea2:	1dbb      	adds	r3, r7, #6
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	001a      	movs	r2, r3
 8003ea8:	f7ff ff30 	bl	8003d0c <SSD1306_DrawPixel>
 8003eac:	e013      	b.n	8003ed6 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003eae:	4b1a      	ldr	r3, [pc, #104]	; (8003f18 <SSD1306_Putc+0x100>)
 8003eb0:	881a      	ldrh	r2, [r3, #0]
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	18d3      	adds	r3, r2, r3
 8003eb8:	b298      	uxth	r0, r3
 8003eba:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <SSD1306_Putc+0x100>)
 8003ebc:	885a      	ldrh	r2, [r3, #2]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	18d3      	adds	r3, r2, r3
 8003ec4:	b299      	uxth	r1, r3
 8003ec6:	1dbb      	adds	r3, r7, #6
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	425a      	negs	r2, r3
 8003ecc:	4153      	adcs	r3, r2
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	001a      	movs	r2, r3
 8003ed2:	f7ff ff1b 	bl	8003d0c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	001a      	movs	r2, r3
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d3c9      	bcc.n	8003e7c <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	3301      	adds	r3, #1
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	785b      	ldrb	r3, [r3, #1]
 8003ef2:	001a      	movs	r2, r3
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d3ae      	bcc.n	8003e58 <SSD1306_Putc+0x40>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003efa:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <SSD1306_Putc+0x100>)
 8003efc:	881a      	ldrh	r2, [r3, #0]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	18d3      	adds	r3, r2, r3
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <SSD1306_Putc+0x100>)
 8003f0a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8003f0c:	1dfb      	adds	r3, r7, #7
 8003f0e:	781b      	ldrb	r3, [r3, #0]
}
 8003f10:	0018      	movs	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b006      	add	sp, #24
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20000870 	.word	0x20000870

08003f1c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	1dfb      	adds	r3, r7, #7
 8003f28:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8003f2a:	e013      	b.n	8003f54 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	7818      	ldrb	r0, [r3, #0]
 8003f30:	1dfb      	adds	r3, r7, #7
 8003f32:	781a      	ldrb	r2, [r3, #0]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	0019      	movs	r1, r3
 8003f38:	f7ff ff6e 	bl	8003e18 <SSD1306_Putc>
 8003f3c:	0003      	movs	r3, r0
 8003f3e:	001a      	movs	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d002      	beq.n	8003f4e <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	e008      	b.n	8003f60 <SSD1306_Puts+0x44>
		}

		/* Increase string pointer */
		str++;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3301      	adds	r3, #1
 8003f52:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e7      	bne.n	8003f2c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
}
 8003f60:	0018      	movs	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b004      	add	sp, #16
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003f6e:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <ssd1306_I2C_Init+0x24>)
 8003f70:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003f72:	e002      	b.n	8003f7a <ssd1306_I2C_Init+0x12>
		p--;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1f9      	bne.n	8003f74 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003f80:	46c0      	nop			; (mov r8, r8)
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b002      	add	sp, #8
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	0003d090 	.word	0x0003d090

08003f90 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f92:	46c6      	mov	lr, r8
 8003f94:	b500      	push	{lr}
 8003f96:	b08e      	sub	sp, #56	; 0x38
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	0006      	movs	r6, r0
 8003f9c:	0008      	movs	r0, r1
 8003f9e:	61ba      	str	r2, [r7, #24]
 8003fa0:	0019      	movs	r1, r3
 8003fa2:	231f      	movs	r3, #31
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	1c32      	adds	r2, r6, #0
 8003fa8:	701a      	strb	r2, [r3, #0]
 8003faa:	221e      	movs	r2, #30
 8003fac:	18bb      	adds	r3, r7, r2
 8003fae:	1c02      	adds	r2, r0, #0
 8003fb0:	701a      	strb	r2, [r3, #0]
 8003fb2:	201c      	movs	r0, #28
 8003fb4:	183b      	adds	r3, r7, r0
 8003fb6:	1c0a      	adds	r2, r1, #0
 8003fb8:	801a      	strh	r2, [r3, #0]
 8003fba:	466b      	mov	r3, sp
 8003fbc:	4698      	mov	r8, r3
	uint8_t dt[count + 1];
 8003fbe:	183b      	adds	r3, r7, r0
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	1e5a      	subs	r2, r3, #1
 8003fc6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003fc8:	001a      	movs	r2, r3
 8003fca:	60ba      	str	r2, [r7, #8]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	60fa      	str	r2, [r7, #12]
 8003fd0:	68b8      	ldr	r0, [r7, #8]
 8003fd2:	68f9      	ldr	r1, [r7, #12]
 8003fd4:	0002      	movs	r2, r0
 8003fd6:	0f52      	lsrs	r2, r2, #29
 8003fd8:	000e      	movs	r6, r1
 8003fda:	00f6      	lsls	r6, r6, #3
 8003fdc:	617e      	str	r6, [r7, #20]
 8003fde:	697e      	ldr	r6, [r7, #20]
 8003fe0:	4316      	orrs	r6, r2
 8003fe2:	617e      	str	r6, [r7, #20]
 8003fe4:	0002      	movs	r2, r0
 8003fe6:	00d2      	lsls	r2, r2, #3
 8003fe8:	613a      	str	r2, [r7, #16]
 8003fea:	001a      	movs	r2, r3
 8003fec:	603a      	str	r2, [r7, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	6838      	ldr	r0, [r7, #0]
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	0002      	movs	r2, r0
 8003ff8:	0f52      	lsrs	r2, r2, #29
 8003ffa:	000e      	movs	r6, r1
 8003ffc:	00f5      	lsls	r5, r6, #3
 8003ffe:	4315      	orrs	r5, r2
 8004000:	0002      	movs	r2, r0
 8004002:	00d4      	lsls	r4, r2, #3
 8004004:	3307      	adds	r3, #7
 8004006:	08db      	lsrs	r3, r3, #3
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	466a      	mov	r2, sp
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	469d      	mov	sp, r3
 8004010:	ab02      	add	r3, sp, #8
 8004012:	3300      	adds	r3, #0
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
	dt[0] = reg;
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	221e      	movs	r2, #30
 800401a:	18ba      	adds	r2, r7, r2
 800401c:	7812      	ldrb	r2, [r2, #0]
 800401e:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8004020:	2317      	movs	r3, #23
 8004022:	2218      	movs	r2, #24
 8004024:	189b      	adds	r3, r3, r2
 8004026:	19db      	adds	r3, r3, r7
 8004028:	2201      	movs	r2, #1
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	e014      	b.n	8004058 <ssd1306_I2C_WriteMulti+0xc8>
		dt[i] = data[i-1];
 800402e:	2017      	movs	r0, #23
 8004030:	2418      	movs	r4, #24
 8004032:	1903      	adds	r3, r0, r4
 8004034:	19db      	adds	r3, r3, r7
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	3b01      	subs	r3, #1
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	18d2      	adds	r2, r2, r3
 800403e:	1903      	adds	r3, r0, r4
 8004040:	19db      	adds	r3, r3, r7
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	7811      	ldrb	r1, [r2, #0]
 8004046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004048:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 800404a:	1903      	adds	r3, r0, r4
 800404c:	19db      	adds	r3, r3, r7
 800404e:	781a      	ldrb	r2, [r3, #0]
 8004050:	1903      	adds	r3, r0, r4
 8004052:	19db      	adds	r3, r3, r7
 8004054:	3201      	adds	r2, #1
 8004056:	701a      	strb	r2, [r3, #0]
 8004058:	2317      	movs	r3, #23
 800405a:	2218      	movs	r2, #24
 800405c:	189b      	adds	r3, r3, r2
 800405e:	19db      	adds	r3, r3, r7
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	201c      	movs	r0, #28
 8004066:	183a      	adds	r2, r7, r0
 8004068:	8812      	ldrh	r2, [r2, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d2df      	bcs.n	800402e <ssd1306_I2C_WriteMulti+0x9e>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 800406e:	231f      	movs	r3, #31
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	b299      	uxth	r1, r3
 8004076:	183b      	adds	r3, r7, r0
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407c:	4805      	ldr	r0, [pc, #20]	; (8004094 <ssd1306_I2C_WriteMulti+0x104>)
 800407e:	240a      	movs	r4, #10
 8004080:	9400      	str	r4, [sp, #0]
 8004082:	f001 fc31 	bl	80058e8 <HAL_I2C_Master_Transmit>
 8004086:	46c5      	mov	sp, r8
}
 8004088:	46c0      	nop			; (mov r8, r8)
 800408a:	46bd      	mov	sp, r7
 800408c:	b00c      	add	sp, #48	; 0x30
 800408e:	bc80      	pop	{r7}
 8004090:	46b8      	mov	r8, r7
 8004092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004094:	200002c0 	.word	0x200002c0

08004098 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8004098:	b590      	push	{r4, r7, lr}
 800409a:	b087      	sub	sp, #28
 800409c:	af02      	add	r7, sp, #8
 800409e:	0004      	movs	r4, r0
 80040a0:	0008      	movs	r0, r1
 80040a2:	0011      	movs	r1, r2
 80040a4:	1dfb      	adds	r3, r7, #7
 80040a6:	1c22      	adds	r2, r4, #0
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	1dbb      	adds	r3, r7, #6
 80040ac:	1c02      	adds	r2, r0, #0
 80040ae:	701a      	strb	r2, [r3, #0]
 80040b0:	1d7b      	adds	r3, r7, #5
 80040b2:	1c0a      	adds	r2, r1, #0
 80040b4:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 80040b6:	200c      	movs	r0, #12
 80040b8:	183b      	adds	r3, r7, r0
 80040ba:	1dba      	adds	r2, r7, #6
 80040bc:	7812      	ldrb	r2, [r2, #0]
 80040be:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 80040c0:	183b      	adds	r3, r7, r0
 80040c2:	1d7a      	adds	r2, r7, #5
 80040c4:	7812      	ldrb	r2, [r2, #0]
 80040c6:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80040c8:	1dfb      	adds	r3, r7, #7
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	b299      	uxth	r1, r3
 80040ce:	183a      	adds	r2, r7, r0
 80040d0:	4804      	ldr	r0, [pc, #16]	; (80040e4 <ssd1306_I2C_Write+0x4c>)
 80040d2:	230a      	movs	r3, #10
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	2302      	movs	r3, #2
 80040d8:	f001 fc06 	bl	80058e8 <HAL_I2C_Master_Transmit>
}
 80040dc:	46c0      	nop			; (mov r8, r8)
 80040de:	46bd      	mov	sp, r7
 80040e0:	b005      	add	sp, #20
 80040e2:	bd90      	pop	{r4, r7, pc}
 80040e4:	200002c0 	.word	0x200002c0

080040e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ec:	4b07      	ldr	r3, [pc, #28]	; (800410c <HAL_MspInit+0x24>)
 80040ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <HAL_MspInit+0x24>)
 80040f2:	2101      	movs	r1, #1
 80040f4:	430a      	orrs	r2, r1
 80040f6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <HAL_MspInit+0x24>)
 80040fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040fc:	4b03      	ldr	r3, [pc, #12]	; (800410c <HAL_MspInit+0x24>)
 80040fe:	2180      	movs	r1, #128	; 0x80
 8004100:	0549      	lsls	r1, r1, #21
 8004102:	430a      	orrs	r2, r1
 8004104:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40021000 	.word	0x40021000

08004110 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004110:	b590      	push	{r4, r7, lr}
 8004112:	b089      	sub	sp, #36	; 0x24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004118:	240c      	movs	r4, #12
 800411a:	193b      	adds	r3, r7, r4
 800411c:	0018      	movs	r0, r3
 800411e:	2314      	movs	r3, #20
 8004120:	001a      	movs	r2, r3
 8004122:	2100      	movs	r1, #0
 8004124:	f004 fe58 	bl	8008dd8 <memset>
  if(hadc->Instance==ADC1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a2e      	ldr	r2, [pc, #184]	; (80041e8 <HAL_ADC_MspInit+0xd8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d155      	bne.n	80041de <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004132:	4b2e      	ldr	r3, [pc, #184]	; (80041ec <HAL_ADC_MspInit+0xdc>)
 8004134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004136:	4b2d      	ldr	r3, [pc, #180]	; (80041ec <HAL_ADC_MspInit+0xdc>)
 8004138:	2180      	movs	r1, #128	; 0x80
 800413a:	0089      	lsls	r1, r1, #2
 800413c:	430a      	orrs	r2, r1
 800413e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004140:	4b2a      	ldr	r3, [pc, #168]	; (80041ec <HAL_ADC_MspInit+0xdc>)
 8004142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004144:	4b29      	ldr	r3, [pc, #164]	; (80041ec <HAL_ADC_MspInit+0xdc>)
 8004146:	2101      	movs	r1, #1
 8004148:	430a      	orrs	r2, r1
 800414a:	62da      	str	r2, [r3, #44]	; 0x2c
 800414c:	4b27      	ldr	r3, [pc, #156]	; (80041ec <HAL_ADC_MspInit+0xdc>)
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	2201      	movs	r2, #1
 8004152:	4013      	ands	r3, r2
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8004158:	193b      	adds	r3, r7, r4
 800415a:	2213      	movs	r2, #19
 800415c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800415e:	193b      	adds	r3, r7, r4
 8004160:	2203      	movs	r2, #3
 8004162:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004164:	193b      	adds	r3, r7, r4
 8004166:	2200      	movs	r2, #0
 8004168:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800416a:	193a      	adds	r2, r7, r4
 800416c:	23a0      	movs	r3, #160	; 0xa0
 800416e:	05db      	lsls	r3, r3, #23
 8004170:	0011      	movs	r1, r2
 8004172:	0018      	movs	r0, r3
 8004174:	f001 f986 	bl	8005484 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8004178:	4b1d      	ldr	r3, [pc, #116]	; (80041f0 <HAL_ADC_MspInit+0xe0>)
 800417a:	4a1e      	ldr	r2, [pc, #120]	; (80041f4 <HAL_ADC_MspInit+0xe4>)
 800417c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800417e:	4b1c      	ldr	r3, [pc, #112]	; (80041f0 <HAL_ADC_MspInit+0xe0>)
 8004180:	2200      	movs	r2, #0
 8004182:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004184:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <HAL_ADC_MspInit+0xe0>)
 8004186:	2200      	movs	r2, #0
 8004188:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800418a:	4b19      	ldr	r3, [pc, #100]	; (80041f0 <HAL_ADC_MspInit+0xe0>)
 800418c:	2200      	movs	r2, #0
 800418e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8004190:	4b17      	ldr	r3, [pc, #92]	; (80041f0 <HAL_ADC_MspInit+0xe0>)
 8004192:	2280      	movs	r2, #128	; 0x80
 8004194:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004196:	4b16      	ldr	r3, [pc, #88]	; (80041f0 <HAL_ADC_MspInit+0xe0>)
 8004198:	2280      	movs	r2, #128	; 0x80
 800419a:	0052      	lsls	r2, r2, #1
 800419c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800419e:	4b14      	ldr	r3, [pc, #80]	; (80041f0 <HAL_ADC_MspInit+0xe0>)
 80041a0:	2280      	movs	r2, #128	; 0x80
 80041a2:	00d2      	lsls	r2, r2, #3
 80041a4:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80041a6:	4b12      	ldr	r3, [pc, #72]	; (80041f0 <HAL_ADC_MspInit+0xe0>)
 80041a8:	2220      	movs	r2, #32
 80041aa:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80041ac:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <HAL_ADC_MspInit+0xe0>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80041b2:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <HAL_ADC_MspInit+0xe0>)
 80041b4:	0018      	movs	r0, r3
 80041b6:	f000 ffab 	bl	8005110 <HAL_DMA_Init>
 80041ba:	1e03      	subs	r3, r0, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80041be:	f7ff fc91 	bl	8003ae4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a0a      	ldr	r2, [pc, #40]	; (80041f0 <HAL_ADC_MspInit+0xe0>)
 80041c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80041c8:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <HAL_ADC_MspInit+0xe0>)
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 1, 0);
 80041ce:	2200      	movs	r2, #0
 80041d0:	2101      	movs	r1, #1
 80041d2:	200c      	movs	r0, #12
 80041d4:	f000 ff6a 	bl	80050ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80041d8:	200c      	movs	r0, #12
 80041da:	f000 ff7c 	bl	80050d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b009      	add	sp, #36	; 0x24
 80041e4:	bd90      	pop	{r4, r7, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	40012400 	.word	0x40012400
 80041ec:	40021000 	.word	0x40021000
 80041f0:	20000278 	.word	0x20000278
 80041f4:	40020008 	.word	0x40020008

080041f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041f8:	b590      	push	{r4, r7, lr}
 80041fa:	b089      	sub	sp, #36	; 0x24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004200:	240c      	movs	r4, #12
 8004202:	193b      	adds	r3, r7, r4
 8004204:	0018      	movs	r0, r3
 8004206:	2314      	movs	r3, #20
 8004208:	001a      	movs	r2, r3
 800420a:	2100      	movs	r1, #0
 800420c:	f004 fde4 	bl	8008dd8 <memset>
  if(hi2c->Instance==I2C1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a18      	ldr	r2, [pc, #96]	; (8004278 <HAL_I2C_MspInit+0x80>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d12a      	bne.n	8004270 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800421a:	4b18      	ldr	r3, [pc, #96]	; (800427c <HAL_I2C_MspInit+0x84>)
 800421c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421e:	4b17      	ldr	r3, [pc, #92]	; (800427c <HAL_I2C_MspInit+0x84>)
 8004220:	2101      	movs	r1, #1
 8004222:	430a      	orrs	r2, r1
 8004224:	62da      	str	r2, [r3, #44]	; 0x2c
 8004226:	4b15      	ldr	r3, [pc, #84]	; (800427c <HAL_I2C_MspInit+0x84>)
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	2201      	movs	r2, #1
 800422c:	4013      	ands	r3, r2
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004232:	193b      	adds	r3, r7, r4
 8004234:	22c0      	movs	r2, #192	; 0xc0
 8004236:	00d2      	lsls	r2, r2, #3
 8004238:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800423a:	0021      	movs	r1, r4
 800423c:	187b      	adds	r3, r7, r1
 800423e:	2212      	movs	r2, #18
 8004240:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004242:	187b      	adds	r3, r7, r1
 8004244:	2200      	movs	r2, #0
 8004246:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004248:	187b      	adds	r3, r7, r1
 800424a:	2203      	movs	r2, #3
 800424c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800424e:	187b      	adds	r3, r7, r1
 8004250:	2206      	movs	r2, #6
 8004252:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004254:	187a      	adds	r2, r7, r1
 8004256:	23a0      	movs	r3, #160	; 0xa0
 8004258:	05db      	lsls	r3, r3, #23
 800425a:	0011      	movs	r1, r2
 800425c:	0018      	movs	r0, r3
 800425e:	f001 f911 	bl	8005484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004262:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_I2C_MspInit+0x84>)
 8004264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004266:	4b05      	ldr	r3, [pc, #20]	; (800427c <HAL_I2C_MspInit+0x84>)
 8004268:	2180      	movs	r1, #128	; 0x80
 800426a:	0389      	lsls	r1, r1, #14
 800426c:	430a      	orrs	r2, r1
 800426e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004270:	46c0      	nop			; (mov r8, r8)
 8004272:	46bd      	mov	sp, r7
 8004274:	b009      	add	sp, #36	; 0x24
 8004276:	bd90      	pop	{r4, r7, pc}
 8004278:	40005400 	.word	0x40005400
 800427c:	40021000 	.word	0x40021000

08004280 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <HAL_TIM_Base_MspInit+0x38>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d10d      	bne.n	80042ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004292:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <HAL_TIM_Base_MspInit+0x3c>)
 8004294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004296:	4b09      	ldr	r3, [pc, #36]	; (80042bc <HAL_TIM_Base_MspInit+0x3c>)
 8004298:	2110      	movs	r1, #16
 800429a:	430a      	orrs	r2, r1
 800429c:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800429e:	2200      	movs	r2, #0
 80042a0:	2100      	movs	r1, #0
 80042a2:	2011      	movs	r0, #17
 80042a4:	f000 ff02 	bl	80050ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80042a8:	2011      	movs	r0, #17
 80042aa:	f000 ff14 	bl	80050d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b002      	add	sp, #8
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	40001000 	.word	0x40001000
 80042bc:	40021000 	.word	0x40021000

080042c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042c0:	b590      	push	{r4, r7, lr}
 80042c2:	b089      	sub	sp, #36	; 0x24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c8:	240c      	movs	r4, #12
 80042ca:	193b      	adds	r3, r7, r4
 80042cc:	0018      	movs	r0, r3
 80042ce:	2314      	movs	r3, #20
 80042d0:	001a      	movs	r2, r3
 80042d2:	2100      	movs	r1, #0
 80042d4:	f004 fd80 	bl	8008dd8 <memset>
  if(huart->Instance==USART2)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a18      	ldr	r2, [pc, #96]	; (8004340 <HAL_UART_MspInit+0x80>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d129      	bne.n	8004336 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80042e2:	4b18      	ldr	r3, [pc, #96]	; (8004344 <HAL_UART_MspInit+0x84>)
 80042e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042e6:	4b17      	ldr	r3, [pc, #92]	; (8004344 <HAL_UART_MspInit+0x84>)
 80042e8:	2180      	movs	r1, #128	; 0x80
 80042ea:	0289      	lsls	r1, r1, #10
 80042ec:	430a      	orrs	r2, r1
 80042ee:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f0:	4b14      	ldr	r3, [pc, #80]	; (8004344 <HAL_UART_MspInit+0x84>)
 80042f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f4:	4b13      	ldr	r3, [pc, #76]	; (8004344 <HAL_UART_MspInit+0x84>)
 80042f6:	2101      	movs	r1, #1
 80042f8:	430a      	orrs	r2, r1
 80042fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80042fc:	4b11      	ldr	r3, [pc, #68]	; (8004344 <HAL_UART_MspInit+0x84>)
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	2201      	movs	r2, #1
 8004302:	4013      	ands	r3, r2
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004308:	0021      	movs	r1, r4
 800430a:	187b      	adds	r3, r7, r1
 800430c:	220c      	movs	r2, #12
 800430e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004310:	187b      	adds	r3, r7, r1
 8004312:	2202      	movs	r2, #2
 8004314:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004316:	187b      	adds	r3, r7, r1
 8004318:	2200      	movs	r2, #0
 800431a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800431c:	187b      	adds	r3, r7, r1
 800431e:	2203      	movs	r2, #3
 8004320:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8004322:	187b      	adds	r3, r7, r1
 8004324:	2204      	movs	r2, #4
 8004326:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004328:	187a      	adds	r2, r7, r1
 800432a:	23a0      	movs	r3, #160	; 0xa0
 800432c:	05db      	lsls	r3, r3, #23
 800432e:	0011      	movs	r1, r2
 8004330:	0018      	movs	r0, r3
 8004332:	f001 f8a7 	bl	8005484 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	46bd      	mov	sp, r7
 800433a:	b009      	add	sp, #36	; 0x24
 800433c:	bd90      	pop	{r4, r7, pc}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	40004400 	.word	0x40004400
 8004344:	40021000 	.word	0x40021000

08004348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800434c:	e7fe      	b.n	800434c <NMI_Handler+0x4>

0800434e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004352:	e7fe      	b.n	8004352 <HardFault_Handler+0x4>

08004354 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004358:	46c0      	nop			; (mov r8, r8)
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800436c:	f000 f96a 	bl	8004644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004370:	46c0      	nop			; (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800437c:	4b03      	ldr	r3, [pc, #12]	; (800438c <DMA1_Channel1_IRQHandler+0x14>)
 800437e:	0018      	movs	r0, r3
 8004380:	f000 ffa4 	bl	80052cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004384:	46c0      	nop			; (mov r8, r8)
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	20000278 	.word	0x20000278

08004390 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8004394:	4b03      	ldr	r3, [pc, #12]	; (80043a4 <ADC1_COMP_IRQHandler+0x14>)
 8004396:	0018      	movs	r0, r3
 8004398:	f000 fb66 	bl	8004a68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800439c:	46c0      	nop			; (mov r8, r8)
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	2000021c 	.word	0x2000021c

080043a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80043ac:	4b03      	ldr	r3, [pc, #12]	; (80043bc <TIM6_DAC_IRQHandler+0x14>)
 80043ae:	0018      	movs	r0, r3
 80043b0:	f002 ffb0 	bl	8007314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	20000314 	.word	0x20000314

080043c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  return 1;
 80043c4:	2301      	movs	r3, #1
}
 80043c6:	0018      	movs	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <_kill>:

int _kill(int pid, int sig)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80043d6:	f004 fd59 	bl	8008e8c <__errno>
 80043da:	0003      	movs	r3, r0
 80043dc:	2216      	movs	r2, #22
 80043de:	601a      	str	r2, [r3, #0]
  return -1;
 80043e0:	2301      	movs	r3, #1
 80043e2:	425b      	negs	r3, r3
}
 80043e4:	0018      	movs	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b002      	add	sp, #8
 80043ea:	bd80      	pop	{r7, pc}

080043ec <_exit>:

void _exit (int status)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80043f4:	2301      	movs	r3, #1
 80043f6:	425a      	negs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	0011      	movs	r1, r2
 80043fc:	0018      	movs	r0, r3
 80043fe:	f7ff ffe5 	bl	80043cc <_kill>
  while (1) {}    /* Make sure we hang here */
 8004402:	e7fe      	b.n	8004402 <_exit+0x16>

08004404 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	e00a      	b.n	800442c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004416:	e000      	b.n	800441a <_read+0x16>
 8004418:	bf00      	nop
 800441a:	0001      	movs	r1, r0
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	60ba      	str	r2, [r7, #8]
 8004422:	b2ca      	uxtb	r2, r1
 8004424:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	3301      	adds	r3, #1
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	429a      	cmp	r2, r3
 8004432:	dbf0      	blt.n	8004416 <_read+0x12>
  }

  return len;
 8004434:	687b      	ldr	r3, [r7, #4]
}
 8004436:	0018      	movs	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	b006      	add	sp, #24
 800443c:	bd80      	pop	{r7, pc}

0800443e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b086      	sub	sp, #24
 8004442:	af00      	add	r7, sp, #0
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	e009      	b.n	8004464 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	60ba      	str	r2, [r7, #8]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	0018      	movs	r0, r3
 800445a:	e000      	b.n	800445e <_write+0x20>
 800445c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	3301      	adds	r3, #1
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	429a      	cmp	r2, r3
 800446a:	dbf1      	blt.n	8004450 <_write+0x12>
  }
  return len;
 800446c:	687b      	ldr	r3, [r7, #4]
}
 800446e:	0018      	movs	r0, r3
 8004470:	46bd      	mov	sp, r7
 8004472:	b006      	add	sp, #24
 8004474:	bd80      	pop	{r7, pc}

08004476 <_close>:

int _close(int file)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800447e:	2301      	movs	r3, #1
 8004480:	425b      	negs	r3, r3
}
 8004482:	0018      	movs	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	b002      	add	sp, #8
 8004488:	bd80      	pop	{r7, pc}

0800448a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2280      	movs	r2, #128	; 0x80
 8004498:	0192      	lsls	r2, r2, #6
 800449a:	605a      	str	r2, [r3, #4]
  return 0;
 800449c:	2300      	movs	r3, #0
}
 800449e:	0018      	movs	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b002      	add	sp, #8
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <_isatty>:

int _isatty(int file)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b082      	sub	sp, #8
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80044ae:	2301      	movs	r3, #1
}
 80044b0:	0018      	movs	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b002      	add	sp, #8
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	0018      	movs	r0, r3
 80044c8:	46bd      	mov	sp, r7
 80044ca:	b004      	add	sp, #16
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044d8:	4a14      	ldr	r2, [pc, #80]	; (800452c <_sbrk+0x5c>)
 80044da:	4b15      	ldr	r3, [pc, #84]	; (8004530 <_sbrk+0x60>)
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044e4:	4b13      	ldr	r3, [pc, #76]	; (8004534 <_sbrk+0x64>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d102      	bne.n	80044f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044ec:	4b11      	ldr	r3, [pc, #68]	; (8004534 <_sbrk+0x64>)
 80044ee:	4a12      	ldr	r2, [pc, #72]	; (8004538 <_sbrk+0x68>)
 80044f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044f2:	4b10      	ldr	r3, [pc, #64]	; (8004534 <_sbrk+0x64>)
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	18d3      	adds	r3, r2, r3
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d207      	bcs.n	8004510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004500:	f004 fcc4 	bl	8008e8c <__errno>
 8004504:	0003      	movs	r3, r0
 8004506:	220c      	movs	r2, #12
 8004508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800450a:	2301      	movs	r3, #1
 800450c:	425b      	negs	r3, r3
 800450e:	e009      	b.n	8004524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004510:	4b08      	ldr	r3, [pc, #32]	; (8004534 <_sbrk+0x64>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004516:	4b07      	ldr	r3, [pc, #28]	; (8004534 <_sbrk+0x64>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	18d2      	adds	r2, r2, r3
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <_sbrk+0x64>)
 8004520:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004522:	68fb      	ldr	r3, [r7, #12]
}
 8004524:	0018      	movs	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	b006      	add	sp, #24
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20005000 	.word	0x20005000
 8004530:	00000400 	.word	0x00000400
 8004534:	20000878 	.word	0x20000878
 8004538:	200009d0 	.word	0x200009d0

0800453c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004540:	46c0      	nop			; (mov r8, r8)
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004548:	480d      	ldr	r0, [pc, #52]	; (8004580 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800454a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800454c:	f7ff fff6 	bl	800453c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004550:	480c      	ldr	r0, [pc, #48]	; (8004584 <LoopForever+0x6>)
  ldr r1, =_edata
 8004552:	490d      	ldr	r1, [pc, #52]	; (8004588 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004554:	4a0d      	ldr	r2, [pc, #52]	; (800458c <LoopForever+0xe>)
  movs r3, #0
 8004556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004558:	e002      	b.n	8004560 <LoopCopyDataInit>

0800455a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800455a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800455c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800455e:	3304      	adds	r3, #4

08004560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004564:	d3f9      	bcc.n	800455a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004566:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004568:	4c0a      	ldr	r4, [pc, #40]	; (8004594 <LoopForever+0x16>)
  movs r3, #0
 800456a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800456c:	e001      	b.n	8004572 <LoopFillZerobss>

0800456e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800456e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004570:	3204      	adds	r2, #4

08004572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004574:	d3fb      	bcc.n	800456e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8004576:	f004 fc8f 	bl	8008e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800457a:	f7fe fd33 	bl	8002fe4 <main>

0800457e <LoopForever>:

LoopForever:
    b LoopForever
 800457e:	e7fe      	b.n	800457e <LoopForever>
   ldr   r0, =_estack
 8004580:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004588:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800458c:	0800d720 	.word	0x0800d720
  ldr r2, =_sbss
 8004590:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8004594:	200009cc 	.word	0x200009cc

08004598 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004598:	e7fe      	b.n	8004598 <DMA1_Channel2_3_IRQHandler>
	...

0800459c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80045a2:	1dfb      	adds	r3, r7, #7
 80045a4:	2200      	movs	r2, #0
 80045a6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_Init+0x3c>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <HAL_Init+0x3c>)
 80045ae:	2140      	movs	r1, #64	; 0x40
 80045b0:	430a      	orrs	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80045b4:	2003      	movs	r0, #3
 80045b6:	f000 f811 	bl	80045dc <HAL_InitTick>
 80045ba:	1e03      	subs	r3, r0, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80045be:	1dfb      	adds	r3, r7, #7
 80045c0:	2201      	movs	r2, #1
 80045c2:	701a      	strb	r2, [r3, #0]
 80045c4:	e001      	b.n	80045ca <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80045c6:	f7ff fd8f 	bl	80040e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80045ca:	1dfb      	adds	r3, r7, #7
 80045cc:	781b      	ldrb	r3, [r3, #0]
}
 80045ce:	0018      	movs	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b002      	add	sp, #8
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	40022000 	.word	0x40022000

080045dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045dc:	b590      	push	{r4, r7, lr}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045e4:	4b14      	ldr	r3, [pc, #80]	; (8004638 <HAL_InitTick+0x5c>)
 80045e6:	681c      	ldr	r4, [r3, #0]
 80045e8:	4b14      	ldr	r3, [pc, #80]	; (800463c <HAL_InitTick+0x60>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	0019      	movs	r1, r3
 80045ee:	23fa      	movs	r3, #250	; 0xfa
 80045f0:	0098      	lsls	r0, r3, #2
 80045f2:	f7fb fda5 	bl	8000140 <__udivsi3>
 80045f6:	0003      	movs	r3, r0
 80045f8:	0019      	movs	r1, r3
 80045fa:	0020      	movs	r0, r4
 80045fc:	f7fb fda0 	bl	8000140 <__udivsi3>
 8004600:	0003      	movs	r3, r0
 8004602:	0018      	movs	r0, r3
 8004604:	f000 fd77 	bl	80050f6 <HAL_SYSTICK_Config>
 8004608:	1e03      	subs	r3, r0, #0
 800460a:	d001      	beq.n	8004610 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e00f      	b.n	8004630 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b03      	cmp	r3, #3
 8004614:	d80b      	bhi.n	800462e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	2301      	movs	r3, #1
 800461a:	425b      	negs	r3, r3
 800461c:	2200      	movs	r2, #0
 800461e:	0018      	movs	r0, r3
 8004620:	f000 fd44 	bl	80050ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004624:	4b06      	ldr	r3, [pc, #24]	; (8004640 <HAL_InitTick+0x64>)
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	e000      	b.n	8004630 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
}
 8004630:	0018      	movs	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	b003      	add	sp, #12
 8004636:	bd90      	pop	{r4, r7, pc}
 8004638:	2000001c 	.word	0x2000001c
 800463c:	20000024 	.word	0x20000024
 8004640:	20000020 	.word	0x20000020

08004644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004648:	4b05      	ldr	r3, [pc, #20]	; (8004660 <HAL_IncTick+0x1c>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	001a      	movs	r2, r3
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_IncTick+0x20>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	18d2      	adds	r2, r2, r3
 8004654:	4b03      	ldr	r3, [pc, #12]	; (8004664 <HAL_IncTick+0x20>)
 8004656:	601a      	str	r2, [r3, #0]
}
 8004658:	46c0      	nop			; (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	20000024 	.word	0x20000024
 8004664:	2000087c 	.word	0x2000087c

08004668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  return uwTick;
 800466c:	4b02      	ldr	r3, [pc, #8]	; (8004678 <HAL_GetTick+0x10>)
 800466e:	681b      	ldr	r3, [r3, #0]
}
 8004670:	0018      	movs	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	2000087c 	.word	0x2000087c

0800467c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e159      	b.n	8004942 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10a      	bne.n	80046ac <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2250      	movs	r2, #80	; 0x50
 80046a0:	2100      	movs	r1, #0
 80046a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	0018      	movs	r0, r3
 80046a8:	f7ff fd32 	bl	8004110 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b0:	2210      	movs	r2, #16
 80046b2:	4013      	ands	r3, r2
 80046b4:	2b10      	cmp	r3, #16
 80046b6:	d005      	beq.n	80046c4 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2204      	movs	r2, #4
 80046c0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80046c2:	d00b      	beq.n	80046dc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c8:	2210      	movs	r2, #16
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2250      	movs	r2, #80	; 0x50
 80046d4:	2100      	movs	r1, #0
 80046d6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e132      	b.n	8004942 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e0:	4a9a      	ldr	r2, [pc, #616]	; (800494c <HAL_ADC_Init+0x2d0>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	2202      	movs	r2, #2
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2203      	movs	r2, #3
 80046f4:	4013      	ands	r3, r2
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d108      	bne.n	800470c <HAL_ADC_Init+0x90>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2201      	movs	r2, #1
 8004702:	4013      	ands	r3, r2
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_ADC_Init+0x90>
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <HAL_ADC_Init+0x92>
 800470c:	2300      	movs	r3, #0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d149      	bne.n	80047a6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	23c0      	movs	r3, #192	; 0xc0
 8004718:	061b      	lsls	r3, r3, #24
 800471a:	429a      	cmp	r2, r3
 800471c:	d00b      	beq.n	8004736 <HAL_ADC_Init+0xba>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	2380      	movs	r3, #128	; 0x80
 8004724:	05db      	lsls	r3, r3, #23
 8004726:	429a      	cmp	r2, r3
 8004728:	d005      	beq.n	8004736 <HAL_ADC_Init+0xba>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	2380      	movs	r3, #128	; 0x80
 8004730:	061b      	lsls	r3, r3, #24
 8004732:	429a      	cmp	r2, r3
 8004734:	d111      	bne.n	800475a <HAL_ADC_Init+0xde>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	0092      	lsls	r2, r2, #2
 8004742:	0892      	lsrs	r2, r2, #2
 8004744:	611a      	str	r2, [r3, #16]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6919      	ldr	r1, [r3, #16]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	611a      	str	r2, [r3, #16]
 8004758:	e014      	b.n	8004784 <HAL_ADC_Init+0x108>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	0092      	lsls	r2, r2, #2
 8004766:	0892      	lsrs	r2, r2, #2
 8004768:	611a      	str	r2, [r3, #16]
 800476a:	4b79      	ldr	r3, [pc, #484]	; (8004950 <HAL_ADC_Init+0x2d4>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b78      	ldr	r3, [pc, #480]	; (8004950 <HAL_ADC_Init+0x2d4>)
 8004770:	4978      	ldr	r1, [pc, #480]	; (8004954 <HAL_ADC_Init+0x2d8>)
 8004772:	400a      	ands	r2, r1
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	4b76      	ldr	r3, [pc, #472]	; (8004950 <HAL_ADC_Init+0x2d4>)
 8004778:	6819      	ldr	r1, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	4b74      	ldr	r3, [pc, #464]	; (8004950 <HAL_ADC_Init+0x2d4>)
 8004780:	430a      	orrs	r2, r1
 8004782:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2118      	movs	r1, #24
 8004790:	438a      	bics	r2, r1
 8004792:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68d9      	ldr	r1, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80047a6:	4b6a      	ldr	r3, [pc, #424]	; (8004950 <HAL_ADC_Init+0x2d4>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4b69      	ldr	r3, [pc, #420]	; (8004950 <HAL_ADC_Init+0x2d4>)
 80047ac:	496a      	ldr	r1, [pc, #424]	; (8004958 <HAL_ADC_Init+0x2dc>)
 80047ae:	400a      	ands	r2, r1
 80047b0:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80047b2:	4b67      	ldr	r3, [pc, #412]	; (8004950 <HAL_ADC_Init+0x2d4>)
 80047b4:	6819      	ldr	r1, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ba:	065a      	lsls	r2, r3, #25
 80047bc:	4b64      	ldr	r3, [pc, #400]	; (8004950 <HAL_ADC_Init+0x2d4>)
 80047be:	430a      	orrs	r2, r1
 80047c0:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	2380      	movs	r3, #128	; 0x80
 80047ca:	055b      	lsls	r3, r3, #21
 80047cc:	4013      	ands	r3, r2
 80047ce:	d108      	bne.n	80047e2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2180      	movs	r1, #128	; 0x80
 80047dc:	0549      	lsls	r1, r1, #21
 80047de:	430a      	orrs	r2, r1
 80047e0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	495b      	ldr	r1, [pc, #364]	; (800495c <HAL_ADC_Init+0x2e0>)
 80047ee:	400a      	ands	r2, r1
 80047f0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68d9      	ldr	r1, [r3, #12]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b02      	cmp	r3, #2
 8004802:	d101      	bne.n	8004808 <HAL_ADC_Init+0x18c>
 8004804:	2304      	movs	r3, #4
 8004806:	e000      	b.n	800480a <HAL_ADC_Init+0x18e>
 8004808:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800480a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2020      	movs	r0, #32
 8004810:	5c1b      	ldrb	r3, [r3, r0]
 8004812:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004814:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	202c      	movs	r0, #44	; 0x2c
 800481a:	5c1b      	ldrb	r3, [r3, r0]
 800481c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800481e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004824:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800482c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004834:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004842:	23c2      	movs	r3, #194	; 0xc2
 8004844:	33ff      	adds	r3, #255	; 0xff
 8004846:	429a      	cmp	r2, r3
 8004848:	d00b      	beq.n	8004862 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68d9      	ldr	r1, [r3, #12]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004858:	431a      	orrs	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2221      	movs	r2, #33	; 0x21
 8004866:	5c9b      	ldrb	r3, [r3, r2]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d11a      	bne.n	80048a2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	5c9b      	ldrb	r3, [r3, r2]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2180      	movs	r1, #128	; 0x80
 8004882:	0249      	lsls	r1, r1, #9
 8004884:	430a      	orrs	r2, r1
 8004886:	60da      	str	r2, [r3, #12]
 8004888:	e00b      	b.n	80048a2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488e:	2220      	movs	r2, #32
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489a:	2201      	movs	r2, #1
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d11f      	bne.n	80048ea <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	691a      	ldr	r2, [r3, #16]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	492a      	ldr	r1, [pc, #168]	; (8004960 <HAL_ADC_Init+0x2e4>)
 80048b6:	400a      	ands	r2, r1
 80048b8:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6919      	ldr	r1, [r3, #16]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80048c8:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80048ce:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2101      	movs	r1, #1
 80048e4:	430a      	orrs	r2, r1
 80048e6:	611a      	str	r2, [r3, #16]
 80048e8:	e00e      	b.n	8004908 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	2201      	movs	r2, #1
 80048f2:	4013      	ands	r3, r2
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d107      	bne.n	8004908 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2101      	movs	r1, #1
 8004904:	438a      	bics	r2, r1
 8004906:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695a      	ldr	r2, [r3, #20]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2107      	movs	r1, #7
 8004914:	438a      	bics	r2, r1
 8004916:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6959      	ldr	r1, [r3, #20]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004934:	2203      	movs	r2, #3
 8004936:	4393      	bics	r3, r2
 8004938:	2201      	movs	r2, #1
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	0018      	movs	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	b002      	add	sp, #8
 8004948:	bd80      	pop	{r7, pc}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	fffffefd 	.word	0xfffffefd
 8004950:	40012708 	.word	0x40012708
 8004954:	ffc3ffff 	.word	0xffc3ffff
 8004958:	fdffffff 	.word	0xfdffffff
 800495c:	fffe0219 	.word	0xfffe0219
 8004960:	fffffc03 	.word	0xfffffc03

08004964 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004964:	b590      	push	{r4, r7, lr}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004970:	2317      	movs	r3, #23
 8004972:	18fb      	adds	r3, r7, r3
 8004974:	2200      	movs	r2, #0
 8004976:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2204      	movs	r2, #4
 8004980:	4013      	ands	r3, r2
 8004982:	d15e      	bne.n	8004a42 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2250      	movs	r2, #80	; 0x50
 8004988:	5c9b      	ldrb	r3, [r3, r2]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d101      	bne.n	8004992 <HAL_ADC_Start_DMA+0x2e>
 800498e:	2302      	movs	r3, #2
 8004990:	e05e      	b.n	8004a50 <HAL_ADC_Start_DMA+0xec>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2250      	movs	r2, #80	; 0x50
 8004996:	2101      	movs	r1, #1
 8004998:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2101      	movs	r1, #1
 80049a6:	430a      	orrs	r2, r1
 80049a8:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d007      	beq.n	80049c2 <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80049b2:	2317      	movs	r3, #23
 80049b4:	18fc      	adds	r4, r7, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	0018      	movs	r0, r3
 80049ba:	f000 f9bf 	bl	8004d3c <ADC_Enable>
 80049be:	0003      	movs	r3, r0
 80049c0:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80049c2:	2317      	movs	r3, #23
 80049c4:	18fb      	adds	r3, r7, r3
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d13e      	bne.n	8004a4a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d0:	4a21      	ldr	r2, [pc, #132]	; (8004a58 <HAL_ADC_Start_DMA+0xf4>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	2280      	movs	r2, #128	; 0x80
 80049d6:	0052      	lsls	r2, r2, #1
 80049d8:	431a      	orrs	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2250      	movs	r2, #80	; 0x50
 80049e8:	2100      	movs	r1, #0
 80049ea:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f0:	4a1a      	ldr	r2, [pc, #104]	; (8004a5c <HAL_ADC_Start_DMA+0xf8>)
 80049f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f8:	4a19      	ldr	r2, [pc, #100]	; (8004a60 <HAL_ADC_Start_DMA+0xfc>)
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a00:	4a18      	ldr	r2, [pc, #96]	; (8004a64 <HAL_ADC_Start_DMA+0x100>)
 8004a02:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	221c      	movs	r2, #28
 8004a0a:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2110      	movs	r1, #16
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3340      	adds	r3, #64	; 0x40
 8004a26:	0019      	movs	r1, r3
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f000 fbe8 	bl	8005200 <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2104      	movs	r1, #4
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	609a      	str	r2, [r3, #8]
 8004a40:	e003      	b.n	8004a4a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a42:	2317      	movs	r3, #23
 8004a44:	18fb      	adds	r3, r7, r3
 8004a46:	2202      	movs	r2, #2
 8004a48:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a4a:	2317      	movs	r3, #23
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	781b      	ldrb	r3, [r3, #0]
}
 8004a50:	0018      	movs	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	b007      	add	sp, #28
 8004a56:	bd90      	pop	{r4, r7, pc}
 8004a58:	fffff0fe 	.word	0xfffff0fe
 8004a5c:	08004e0d 	.word	0x08004e0d
 8004a60:	08004ec1 	.word	0x08004ec1
 8004a64:	08004edf 	.word	0x08004edf

08004a68 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2204      	movs	r2, #4
 8004a84:	4013      	ands	r3, r2
 8004a86:	d003      	beq.n	8004a90 <HAL_ADC_IRQHandler+0x28>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2204      	movs	r2, #4
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d107      	bne.n	8004aa0 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2208      	movs	r2, #8
 8004a94:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004a96:	d04e      	beq.n	8004b36 <HAL_ADC_IRQHandler+0xce>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2208      	movs	r2, #8
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d04a      	beq.n	8004b36 <HAL_ADC_IRQHandler+0xce>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa4:	2210      	movs	r2, #16
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d106      	bne.n	8004ab8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aae:	2280      	movs	r2, #128	; 0x80
 8004ab0:	0092      	lsls	r2, r2, #2
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	23c0      	movs	r3, #192	; 0xc0
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d12b      	bne.n	8004b1e <HAL_ADC_IRQHandler+0xb6>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d126      	bne.n	8004b1e <HAL_ADC_IRQHandler+0xb6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if ((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2208      	movs	r2, #8
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d022      	beq.n	8004b1e <HAL_ADC_IRQHandler+0xb6>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2204      	movs	r2, #4
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	d110      	bne.n	8004b06 <HAL_ADC_IRQHandler+0x9e>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	210c      	movs	r1, #12
 8004af0:	438a      	bics	r2, r1
 8004af2:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af8:	4a2f      	ldr	r2, [pc, #188]	; (8004bb8 <HAL_ADC_IRQHandler+0x150>)
 8004afa:	4013      	ands	r3, r2
 8004afc:	2201      	movs	r2, #1
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	655a      	str	r2, [r3, #84]	; 0x54
 8004b04:	e00b      	b.n	8004b1e <HAL_ADC_IRQHandler+0xb6>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b16:	2201      	movs	r2, #1
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	0018      	movs	r0, r3
 8004b22:	f000 f84b 	bl	8004bbc <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d003      	beq.n	8004b36 <HAL_ADC_IRQHandler+0xce>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	220c      	movs	r2, #12
 8004b34:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2280      	movs	r2, #128	; 0x80
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d012      	beq.n	8004b64 <HAL_ADC_IRQHandler+0xfc>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2280      	movs	r2, #128	; 0x80
 8004b42:	4013      	ands	r3, r2
 8004b44:	d00e      	beq.n	8004b64 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4a:	2280      	movs	r2, #128	; 0x80
 8004b4c:	0252      	lsls	r2, r2, #9
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	0018      	movs	r0, r3
 8004b58:	f000 f840 	bl	8004bdc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2280      	movs	r2, #128	; 0x80
 8004b62:	601a      	str	r2, [r3, #0]

  }


  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2210      	movs	r2, #16
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d020      	beq.n	8004bae <HAL_ADC_IRQHandler+0x146>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2210      	movs	r2, #16
 8004b70:	4013      	ands	r3, r2
 8004b72:	d01c      	beq.n	8004bae <HAL_ADC_IRQHandler+0x146>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d006      	beq.n	8004b8a <HAL_ADC_IRQHandler+0x122>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	2201      	movs	r2, #1
 8004b84:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d10d      	bne.n	8004ba6 <HAL_ADC_IRQHandler+0x13e>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8e:	2202      	movs	r2, #2
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2210      	movs	r2, #16
 8004b9c:	601a      	str	r2, [r3, #0]

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f000 f823 	bl	8004bec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2210      	movs	r2, #16
 8004bac:	601a      	str	r2, [r3, #0]
  }

}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	b004      	add	sp, #16
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	fffffefe 	.word	0xfffffefe

08004bbc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004bc4:	46c0      	nop			; (mov r8, r8)
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b002      	add	sp, #8
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004bd4:	46c0      	nop			; (mov r8, r8)
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	b002      	add	sp, #8
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004be4:	46c0      	nop			; (mov r8, r8)
 8004be6:	46bd      	mov	sp, r7
 8004be8:	b002      	add	sp, #8
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004bf4:	46c0      	nop			; (mov r8, r8)
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b002      	add	sp, #8
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2250      	movs	r2, #80	; 0x50
 8004c0a:	5c9b      	ldrb	r3, [r3, r2]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_ADC_ConfigChannel+0x18>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e085      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x124>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2250      	movs	r2, #80	; 0x50
 8004c18:	2101      	movs	r1, #1
 8004c1a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	2204      	movs	r2, #4
 8004c24:	4013      	ands	r3, r2
 8004c26:	d00b      	beq.n	8004c40 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2250      	movs	r2, #80	; 0x50
 8004c38:	2100      	movs	r1, #0
 8004c3a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e06f      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	4a38      	ldr	r2, [pc, #224]	; (8004d28 <HAL_ADC_ConfigChannel+0x12c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d035      	beq.n	8004cb6 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	035b      	lsls	r3, r3, #13
 8004c56:	0b5a      	lsrs	r2, r3, #13
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	2380      	movs	r3, #128	; 0x80
 8004c66:	02db      	lsls	r3, r3, #11
 8004c68:	4013      	ands	r3, r2
 8004c6a:	d009      	beq.n	8004c80 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8004c6c:	4b2f      	ldr	r3, [pc, #188]	; (8004d2c <HAL_ADC_ConfigChannel+0x130>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	4b2e      	ldr	r3, [pc, #184]	; (8004d2c <HAL_ADC_ConfigChannel+0x130>)
 8004c72:	2180      	movs	r1, #128	; 0x80
 8004c74:	0409      	lsls	r1, r1, #16
 8004c76:	430a      	orrs	r2, r1
 8004c78:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004c7a:	200a      	movs	r0, #10
 8004c7c:	f000 f94a 	bl	8004f14 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	2380      	movs	r3, #128	; 0x80
 8004c86:	029b      	lsls	r3, r3, #10
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d006      	beq.n	8004c9a <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8004c8c:	4b27      	ldr	r3, [pc, #156]	; (8004d2c <HAL_ADC_ConfigChannel+0x130>)
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	4b26      	ldr	r3, [pc, #152]	; (8004d2c <HAL_ADC_ConfigChannel+0x130>)
 8004c92:	2180      	movs	r1, #128	; 0x80
 8004c94:	03c9      	lsls	r1, r1, #15
 8004c96:	430a      	orrs	r2, r1
 8004c98:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	2380      	movs	r3, #128	; 0x80
 8004ca0:	025b      	lsls	r3, r3, #9
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d037      	beq.n	8004d16 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8004ca6:	4b21      	ldr	r3, [pc, #132]	; (8004d2c <HAL_ADC_ConfigChannel+0x130>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4b20      	ldr	r3, [pc, #128]	; (8004d2c <HAL_ADC_ConfigChannel+0x130>)
 8004cac:	2180      	movs	r1, #128	; 0x80
 8004cae:	0449      	lsls	r1, r1, #17
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	e02f      	b.n	8004d16 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	035b      	lsls	r3, r3, #13
 8004cc2:	0b5b      	lsrs	r3, r3, #13
 8004cc4:	43d9      	mvns	r1, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	400a      	ands	r2, r1
 8004ccc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	2380      	movs	r3, #128	; 0x80
 8004cd4:	02db      	lsls	r3, r3, #11
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	d005      	beq.n	8004ce6 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8004cda:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <HAL_ADC_ConfigChannel+0x130>)
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	4b13      	ldr	r3, [pc, #76]	; (8004d2c <HAL_ADC_ConfigChannel+0x130>)
 8004ce0:	4913      	ldr	r1, [pc, #76]	; (8004d30 <HAL_ADC_ConfigChannel+0x134>)
 8004ce2:	400a      	ands	r2, r1
 8004ce4:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	2380      	movs	r3, #128	; 0x80
 8004cec:	029b      	lsls	r3, r3, #10
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d005      	beq.n	8004cfe <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8004cf2:	4b0e      	ldr	r3, [pc, #56]	; (8004d2c <HAL_ADC_ConfigChannel+0x130>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <HAL_ADC_ConfigChannel+0x130>)
 8004cf8:	490e      	ldr	r1, [pc, #56]	; (8004d34 <HAL_ADC_ConfigChannel+0x138>)
 8004cfa:	400a      	ands	r2, r1
 8004cfc:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	2380      	movs	r3, #128	; 0x80
 8004d04:	025b      	lsls	r3, r3, #9
 8004d06:	4013      	ands	r3, r2
 8004d08:	d005      	beq.n	8004d16 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8004d0a:	4b08      	ldr	r3, [pc, #32]	; (8004d2c <HAL_ADC_ConfigChannel+0x130>)
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4b07      	ldr	r3, [pc, #28]	; (8004d2c <HAL_ADC_ConfigChannel+0x130>)
 8004d10:	4909      	ldr	r1, [pc, #36]	; (8004d38 <HAL_ADC_ConfigChannel+0x13c>)
 8004d12:	400a      	ands	r2, r1
 8004d14:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2250      	movs	r2, #80	; 0x50
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	0018      	movs	r0, r3
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b002      	add	sp, #8
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	00001001 	.word	0x00001001
 8004d2c:	40012708 	.word	0x40012708
 8004d30:	ff7fffff 	.word	0xff7fffff
 8004d34:	ffbfffff 	.word	0xffbfffff
 8004d38:	feffffff 	.word	0xfeffffff

08004d3c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2203      	movs	r2, #3
 8004d50:	4013      	ands	r3, r2
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d108      	bne.n	8004d68 <ADC_Enable+0x2c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	4013      	ands	r3, r2
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <ADC_Enable+0x2c>
 8004d64:	2301      	movs	r3, #1
 8004d66:	e000      	b.n	8004d6a <ADC_Enable+0x2e>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d146      	bne.n	8004dfc <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	4a24      	ldr	r2, [pc, #144]	; (8004e08 <ADC_Enable+0xcc>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	d00d      	beq.n	8004d96 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7e:	2210      	movs	r2, #16
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e033      	b.n	8004dfe <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2101      	movs	r1, #1
 8004da2:	430a      	orrs	r2, r1
 8004da4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004da6:	2001      	movs	r0, #1
 8004da8:	f000 f8b4 	bl	8004f14 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004dac:	f7ff fc5c 	bl	8004668 <HAL_GetTick>
 8004db0:	0003      	movs	r3, r0
 8004db2:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004db4:	e01b      	b.n	8004dee <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004db6:	f7ff fc57 	bl	8004668 <HAL_GetTick>
 8004dba:	0002      	movs	r2, r0
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b0a      	cmp	r3, #10
 8004dc2:	d914      	bls.n	8004dee <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	4013      	ands	r3, r2
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d00d      	beq.n	8004dee <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd6:	2210      	movs	r2, #16
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de2:	2201      	movs	r2, #1
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e007      	b.n	8004dfe <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2201      	movs	r2, #1
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d1dc      	bne.n	8004db6 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	0018      	movs	r0, r3
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b004      	add	sp, #16
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	80000017 	.word	0x80000017

08004e0c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1e:	2250      	movs	r2, #80	; 0x50
 8004e20:	4013      	ands	r3, r2
 8004e22:	d141      	bne.n	8004ea8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e28:	2280      	movs	r2, #128	; 0x80
 8004e2a:	0092      	lsls	r2, r2, #2
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	23c0      	movs	r3, #192	; 0xc0
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d12e      	bne.n	8004e9e <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d129      	bne.n	8004e9e <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2208      	movs	r2, #8
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d122      	bne.n	8004e9e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2204      	movs	r2, #4
 8004e60:	4013      	ands	r3, r2
 8004e62:	d110      	bne.n	8004e86 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	210c      	movs	r1, #12
 8004e70:	438a      	bics	r2, r1
 8004e72:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e78:	4a10      	ldr	r2, [pc, #64]	; (8004ebc <ADC_DMAConvCplt+0xb0>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	655a      	str	r2, [r3, #84]	; 0x54
 8004e84:	e00b      	b.n	8004e9e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e96:	2201      	movs	r2, #1
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f7ff fe8b 	bl	8004bbc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004ea6:	e005      	b.n	8004eb4 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	0010      	movs	r0, r2
 8004eb2:	4798      	blx	r3
}
 8004eb4:	46c0      	nop			; (mov r8, r8)
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b004      	add	sp, #16
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	fffffefe 	.word	0xfffffefe

08004ec0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f7ff fe7b 	bl	8004bcc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	b004      	add	sp, #16
 8004edc:	bd80      	pop	{r7, pc}

08004ede <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef0:	2240      	movs	r2, #64	; 0x40
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efc:	2204      	movs	r2, #4
 8004efe:	431a      	orrs	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	0018      	movs	r0, r3
 8004f08:	f7ff fe70 	bl	8004bec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f0c:	46c0      	nop			; (mov r8, r8)
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	b004      	add	sp, #16
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004f1c:	4b0b      	ldr	r3, [pc, #44]	; (8004f4c <ADC_DelayMicroSecond+0x38>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	490b      	ldr	r1, [pc, #44]	; (8004f50 <ADC_DelayMicroSecond+0x3c>)
 8004f22:	0018      	movs	r0, r3
 8004f24:	f7fb f90c 	bl	8000140 <__udivsi3>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	001a      	movs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4353      	muls	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8004f32:	e002      	b.n	8004f3a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1f9      	bne.n	8004f34 <ADC_DelayMicroSecond+0x20>
  }
}
 8004f40:	46c0      	nop			; (mov r8, r8)
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	46bd      	mov	sp, r7
 8004f46:	b004      	add	sp, #16
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	2000001c 	.word	0x2000001c
 8004f50:	000f4240 	.word	0x000f4240

08004f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	0002      	movs	r2, r0
 8004f5c:	1dfb      	adds	r3, r7, #7
 8004f5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004f60:	1dfb      	adds	r3, r7, #7
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b7f      	cmp	r3, #127	; 0x7f
 8004f66:	d809      	bhi.n	8004f7c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f68:	1dfb      	adds	r3, r7, #7
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	001a      	movs	r2, r3
 8004f6e:	231f      	movs	r3, #31
 8004f70:	401a      	ands	r2, r3
 8004f72:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <__NVIC_EnableIRQ+0x30>)
 8004f74:	2101      	movs	r1, #1
 8004f76:	4091      	lsls	r1, r2
 8004f78:	000a      	movs	r2, r1
 8004f7a:	601a      	str	r2, [r3, #0]
  }
}
 8004f7c:	46c0      	nop			; (mov r8, r8)
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b002      	add	sp, #8
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	e000e100 	.word	0xe000e100

08004f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f88:	b590      	push	{r4, r7, lr}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	0002      	movs	r2, r0
 8004f90:	6039      	str	r1, [r7, #0]
 8004f92:	1dfb      	adds	r3, r7, #7
 8004f94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004f96:	1dfb      	adds	r3, r7, #7
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f9c:	d828      	bhi.n	8004ff0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f9e:	4a2f      	ldr	r2, [pc, #188]	; (800505c <__NVIC_SetPriority+0xd4>)
 8004fa0:	1dfb      	adds	r3, r7, #7
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	b25b      	sxtb	r3, r3
 8004fa6:	089b      	lsrs	r3, r3, #2
 8004fa8:	33c0      	adds	r3, #192	; 0xc0
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	589b      	ldr	r3, [r3, r2]
 8004fae:	1dfa      	adds	r2, r7, #7
 8004fb0:	7812      	ldrb	r2, [r2, #0]
 8004fb2:	0011      	movs	r1, r2
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	400a      	ands	r2, r1
 8004fb8:	00d2      	lsls	r2, r2, #3
 8004fba:	21ff      	movs	r1, #255	; 0xff
 8004fbc:	4091      	lsls	r1, r2
 8004fbe:	000a      	movs	r2, r1
 8004fc0:	43d2      	mvns	r2, r2
 8004fc2:	401a      	ands	r2, r3
 8004fc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	019b      	lsls	r3, r3, #6
 8004fca:	22ff      	movs	r2, #255	; 0xff
 8004fcc:	401a      	ands	r2, r3
 8004fce:	1dfb      	adds	r3, r7, #7
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	4003      	ands	r3, r0
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004fdc:	481f      	ldr	r0, [pc, #124]	; (800505c <__NVIC_SetPriority+0xd4>)
 8004fde:	1dfb      	adds	r3, r7, #7
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	b25b      	sxtb	r3, r3
 8004fe4:	089b      	lsrs	r3, r3, #2
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	33c0      	adds	r3, #192	; 0xc0
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004fee:	e031      	b.n	8005054 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ff0:	4a1b      	ldr	r2, [pc, #108]	; (8005060 <__NVIC_SetPriority+0xd8>)
 8004ff2:	1dfb      	adds	r3, r7, #7
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	0019      	movs	r1, r3
 8004ff8:	230f      	movs	r3, #15
 8004ffa:	400b      	ands	r3, r1
 8004ffc:	3b08      	subs	r3, #8
 8004ffe:	089b      	lsrs	r3, r3, #2
 8005000:	3306      	adds	r3, #6
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	18d3      	adds	r3, r2, r3
 8005006:	3304      	adds	r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	1dfa      	adds	r2, r7, #7
 800500c:	7812      	ldrb	r2, [r2, #0]
 800500e:	0011      	movs	r1, r2
 8005010:	2203      	movs	r2, #3
 8005012:	400a      	ands	r2, r1
 8005014:	00d2      	lsls	r2, r2, #3
 8005016:	21ff      	movs	r1, #255	; 0xff
 8005018:	4091      	lsls	r1, r2
 800501a:	000a      	movs	r2, r1
 800501c:	43d2      	mvns	r2, r2
 800501e:	401a      	ands	r2, r3
 8005020:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	019b      	lsls	r3, r3, #6
 8005026:	22ff      	movs	r2, #255	; 0xff
 8005028:	401a      	ands	r2, r3
 800502a:	1dfb      	adds	r3, r7, #7
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	0018      	movs	r0, r3
 8005030:	2303      	movs	r3, #3
 8005032:	4003      	ands	r3, r0
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005038:	4809      	ldr	r0, [pc, #36]	; (8005060 <__NVIC_SetPriority+0xd8>)
 800503a:	1dfb      	adds	r3, r7, #7
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	001c      	movs	r4, r3
 8005040:	230f      	movs	r3, #15
 8005042:	4023      	ands	r3, r4
 8005044:	3b08      	subs	r3, #8
 8005046:	089b      	lsrs	r3, r3, #2
 8005048:	430a      	orrs	r2, r1
 800504a:	3306      	adds	r3, #6
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	18c3      	adds	r3, r0, r3
 8005050:	3304      	adds	r3, #4
 8005052:	601a      	str	r2, [r3, #0]
}
 8005054:	46c0      	nop			; (mov r8, r8)
 8005056:	46bd      	mov	sp, r7
 8005058:	b003      	add	sp, #12
 800505a:	bd90      	pop	{r4, r7, pc}
 800505c:	e000e100 	.word	0xe000e100
 8005060:	e000ed00 	.word	0xe000ed00

08005064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	1e5a      	subs	r2, r3, #1
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	045b      	lsls	r3, r3, #17
 8005074:	429a      	cmp	r2, r3
 8005076:	d301      	bcc.n	800507c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005078:	2301      	movs	r3, #1
 800507a:	e010      	b.n	800509e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <SysTick_Config+0x44>)
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	3a01      	subs	r2, #1
 8005082:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005084:	2301      	movs	r3, #1
 8005086:	425b      	negs	r3, r3
 8005088:	2103      	movs	r1, #3
 800508a:	0018      	movs	r0, r3
 800508c:	f7ff ff7c 	bl	8004f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <SysTick_Config+0x44>)
 8005092:	2200      	movs	r2, #0
 8005094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005096:	4b04      	ldr	r3, [pc, #16]	; (80050a8 <SysTick_Config+0x44>)
 8005098:	2207      	movs	r2, #7
 800509a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800509c:	2300      	movs	r3, #0
}
 800509e:	0018      	movs	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b002      	add	sp, #8
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	46c0      	nop			; (mov r8, r8)
 80050a8:	e000e010 	.word	0xe000e010

080050ac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]
 80050b6:	210f      	movs	r1, #15
 80050b8:	187b      	adds	r3, r7, r1
 80050ba:	1c02      	adds	r2, r0, #0
 80050bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	187b      	adds	r3, r7, r1
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	b25b      	sxtb	r3, r3
 80050c6:	0011      	movs	r1, r2
 80050c8:	0018      	movs	r0, r3
 80050ca:	f7ff ff5d 	bl	8004f88 <__NVIC_SetPriority>
}
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b004      	add	sp, #16
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b082      	sub	sp, #8
 80050da:	af00      	add	r7, sp, #0
 80050dc:	0002      	movs	r2, r0
 80050de:	1dfb      	adds	r3, r7, #7
 80050e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050e2:	1dfb      	adds	r3, r7, #7
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	b25b      	sxtb	r3, r3
 80050e8:	0018      	movs	r0, r3
 80050ea:	f7ff ff33 	bl	8004f54 <__NVIC_EnableIRQ>
}
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	46bd      	mov	sp, r7
 80050f2:	b002      	add	sp, #8
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	0018      	movs	r0, r3
 8005102:	f7ff ffaf 	bl	8005064 <SysTick_Config>
 8005106:	0003      	movs	r3, r0
}
 8005108:	0018      	movs	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	b002      	add	sp, #8
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e061      	b.n	80051e6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a32      	ldr	r2, [pc, #200]	; (80051f0 <HAL_DMA_Init+0xe0>)
 8005128:	4694      	mov	ip, r2
 800512a:	4463      	add	r3, ip
 800512c:	2114      	movs	r1, #20
 800512e:	0018      	movs	r0, r3
 8005130:	f7fb f806 	bl	8000140 <__udivsi3>
 8005134:	0003      	movs	r3, r0
 8005136:	009a      	lsls	r2, r3, #2
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a2d      	ldr	r2, [pc, #180]	; (80051f4 <HAL_DMA_Init+0xe4>)
 8005140:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2225      	movs	r2, #37	; 0x25
 8005146:	2102      	movs	r1, #2
 8005148:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4a28      	ldr	r2, [pc, #160]	; (80051f8 <HAL_DMA_Init+0xe8>)
 8005156:	4013      	ands	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005162:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800516e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800517a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	2380      	movs	r3, #128	; 0x80
 8005196:	01db      	lsls	r3, r3, #7
 8005198:	429a      	cmp	r2, r3
 800519a:	d018      	beq.n	80051ce <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800519c:	4b17      	ldr	r3, [pc, #92]	; (80051fc <HAL_DMA_Init+0xec>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a4:	211c      	movs	r1, #28
 80051a6:	400b      	ands	r3, r1
 80051a8:	210f      	movs	r1, #15
 80051aa:	4099      	lsls	r1, r3
 80051ac:	000b      	movs	r3, r1
 80051ae:	43d9      	mvns	r1, r3
 80051b0:	4b12      	ldr	r3, [pc, #72]	; (80051fc <HAL_DMA_Init+0xec>)
 80051b2:	400a      	ands	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80051b6:	4b11      	ldr	r3, [pc, #68]	; (80051fc <HAL_DMA_Init+0xec>)
 80051b8:	6819      	ldr	r1, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c2:	201c      	movs	r0, #28
 80051c4:	4003      	ands	r3, r0
 80051c6:	409a      	lsls	r2, r3
 80051c8:	4b0c      	ldr	r3, [pc, #48]	; (80051fc <HAL_DMA_Init+0xec>)
 80051ca:	430a      	orrs	r2, r1
 80051cc:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2225      	movs	r2, #37	; 0x25
 80051d8:	2101      	movs	r1, #1
 80051da:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2224      	movs	r2, #36	; 0x24
 80051e0:	2100      	movs	r1, #0
 80051e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	0018      	movs	r0, r3
 80051e8:	46bd      	mov	sp, r7
 80051ea:	b004      	add	sp, #16
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	bffdfff8 	.word	0xbffdfff8
 80051f4:	40020000 	.word	0x40020000
 80051f8:	ffff800f 	.word	0xffff800f
 80051fc:	400200a8 	.word	0x400200a8

08005200 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800520e:	2317      	movs	r3, #23
 8005210:	18fb      	adds	r3, r7, r3
 8005212:	2200      	movs	r2, #0
 8005214:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2224      	movs	r2, #36	; 0x24
 800521a:	5c9b      	ldrb	r3, [r3, r2]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d101      	bne.n	8005224 <HAL_DMA_Start_IT+0x24>
 8005220:	2302      	movs	r3, #2
 8005222:	e04f      	b.n	80052c4 <HAL_DMA_Start_IT+0xc4>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2224      	movs	r2, #36	; 0x24
 8005228:	2101      	movs	r1, #1
 800522a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2225      	movs	r2, #37	; 0x25
 8005230:	5c9b      	ldrb	r3, [r3, r2]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b01      	cmp	r3, #1
 8005236:	d13a      	bne.n	80052ae <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2225      	movs	r2, #37	; 0x25
 800523c:	2102      	movs	r1, #2
 800523e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2101      	movs	r1, #1
 8005252:	438a      	bics	r2, r1
 8005254:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	68b9      	ldr	r1, [r7, #8]
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 f8e3 	bl	8005428 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	2b00      	cmp	r3, #0
 8005268:	d008      	beq.n	800527c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	210e      	movs	r1, #14
 8005276:	430a      	orrs	r2, r1
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	e00f      	b.n	800529c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2104      	movs	r1, #4
 8005288:	438a      	bics	r2, r1
 800528a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	210a      	movs	r1, #10
 8005298:	430a      	orrs	r2, r1
 800529a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2101      	movs	r1, #1
 80052a8:	430a      	orrs	r2, r1
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	e007      	b.n	80052be <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2224      	movs	r2, #36	; 0x24
 80052b2:	2100      	movs	r1, #0
 80052b4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80052b6:	2317      	movs	r3, #23
 80052b8:	18fb      	adds	r3, r7, r3
 80052ba:	2202      	movs	r2, #2
 80052bc:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80052be:	2317      	movs	r3, #23
 80052c0:	18fb      	adds	r3, r7, r3
 80052c2:	781b      	ldrb	r3, [r3, #0]
}
 80052c4:	0018      	movs	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	b006      	add	sp, #24
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e8:	221c      	movs	r2, #28
 80052ea:	4013      	ands	r3, r2
 80052ec:	2204      	movs	r2, #4
 80052ee:	409a      	lsls	r2, r3
 80052f0:	0013      	movs	r3, r2
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	4013      	ands	r3, r2
 80052f6:	d026      	beq.n	8005346 <HAL_DMA_IRQHandler+0x7a>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2204      	movs	r2, #4
 80052fc:	4013      	ands	r3, r2
 80052fe:	d022      	beq.n	8005346 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2220      	movs	r2, #32
 8005308:	4013      	ands	r3, r2
 800530a:	d107      	bne.n	800531c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2104      	movs	r1, #4
 8005318:	438a      	bics	r2, r1
 800531a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005320:	221c      	movs	r2, #28
 8005322:	401a      	ands	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	2104      	movs	r1, #4
 800532a:	4091      	lsls	r1, r2
 800532c:	000a      	movs	r2, r1
 800532e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	2b00      	cmp	r3, #0
 8005336:	d100      	bne.n	800533a <HAL_DMA_IRQHandler+0x6e>
 8005338:	e071      	b.n	800541e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	0010      	movs	r0, r2
 8005342:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8005344:	e06b      	b.n	800541e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534a:	221c      	movs	r2, #28
 800534c:	4013      	ands	r3, r2
 800534e:	2202      	movs	r2, #2
 8005350:	409a      	lsls	r2, r3
 8005352:	0013      	movs	r3, r2
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4013      	ands	r3, r2
 8005358:	d02d      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xea>
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2202      	movs	r2, #2
 800535e:	4013      	ands	r3, r2
 8005360:	d029      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2220      	movs	r2, #32
 800536a:	4013      	ands	r3, r2
 800536c:	d10b      	bne.n	8005386 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	210a      	movs	r1, #10
 800537a:	438a      	bics	r2, r1
 800537c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2225      	movs	r2, #37	; 0x25
 8005382:	2101      	movs	r1, #1
 8005384:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538a:	221c      	movs	r2, #28
 800538c:	401a      	ands	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	2102      	movs	r1, #2
 8005394:	4091      	lsls	r1, r2
 8005396:	000a      	movs	r2, r1
 8005398:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2224      	movs	r2, #36	; 0x24
 800539e:	2100      	movs	r1, #0
 80053a0:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d039      	beq.n	800541e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	0010      	movs	r0, r2
 80053b2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80053b4:	e033      	b.n	800541e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ba:	221c      	movs	r2, #28
 80053bc:	4013      	ands	r3, r2
 80053be:	2208      	movs	r2, #8
 80053c0:	409a      	lsls	r2, r3
 80053c2:	0013      	movs	r3, r2
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4013      	ands	r3, r2
 80053c8:	d02a      	beq.n	8005420 <HAL_DMA_IRQHandler+0x154>
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2208      	movs	r2, #8
 80053ce:	4013      	ands	r3, r2
 80053d0:	d026      	beq.n	8005420 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	210e      	movs	r1, #14
 80053de:	438a      	bics	r2, r1
 80053e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e6:	221c      	movs	r2, #28
 80053e8:	401a      	ands	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	2101      	movs	r1, #1
 80053f0:	4091      	lsls	r1, r2
 80053f2:	000a      	movs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2225      	movs	r2, #37	; 0x25
 8005400:	2101      	movs	r1, #1
 8005402:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2224      	movs	r2, #36	; 0x24
 8005408:	2100      	movs	r1, #0
 800540a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	0010      	movs	r0, r2
 800541c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	46c0      	nop			; (mov r8, r8)
}
 8005422:	46bd      	mov	sp, r7
 8005424:	b004      	add	sp, #16
 8005426:	bd80      	pop	{r7, pc}

08005428 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543a:	221c      	movs	r2, #28
 800543c:	401a      	ands	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	2101      	movs	r1, #1
 8005444:	4091      	lsls	r1, r2
 8005446:	000a      	movs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2b10      	cmp	r3, #16
 8005458:	d108      	bne.n	800546c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800546a:	e007      	b.n	800547c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	60da      	str	r2, [r3, #12]
}
 800547c:	46c0      	nop			; (mov r8, r8)
 800547e:	46bd      	mov	sp, r7
 8005480:	b004      	add	sp, #16
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800548e:	2300      	movs	r3, #0
 8005490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005492:	2300      	movs	r3, #0
 8005494:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8005496:	2300      	movs	r3, #0
 8005498:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800549a:	e155      	b.n	8005748 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2101      	movs	r1, #1
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4091      	lsls	r1, r2
 80054a6:	000a      	movs	r2, r1
 80054a8:	4013      	ands	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d100      	bne.n	80054b4 <HAL_GPIO_Init+0x30>
 80054b2:	e146      	b.n	8005742 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2203      	movs	r2, #3
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d005      	beq.n	80054cc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2203      	movs	r2, #3
 80054c6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d130      	bne.n	800552e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	2203      	movs	r2, #3
 80054d8:	409a      	lsls	r2, r3
 80054da:	0013      	movs	r3, r2
 80054dc:	43da      	mvns	r2, r3
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	4013      	ands	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	409a      	lsls	r2, r3
 80054ee:	0013      	movs	r3, r2
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005502:	2201      	movs	r2, #1
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	409a      	lsls	r2, r3
 8005508:	0013      	movs	r3, r2
 800550a:	43da      	mvns	r2, r3
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	4013      	ands	r3, r2
 8005510:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	091b      	lsrs	r3, r3, #4
 8005518:	2201      	movs	r2, #1
 800551a:	401a      	ands	r2, r3
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	409a      	lsls	r2, r3
 8005520:	0013      	movs	r3, r2
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2203      	movs	r2, #3
 8005534:	4013      	ands	r3, r2
 8005536:	2b03      	cmp	r3, #3
 8005538:	d017      	beq.n	800556a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	2203      	movs	r2, #3
 8005546:	409a      	lsls	r2, r3
 8005548:	0013      	movs	r3, r2
 800554a:	43da      	mvns	r2, r3
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	4013      	ands	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	409a      	lsls	r2, r3
 800555c:	0013      	movs	r3, r2
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2203      	movs	r2, #3
 8005570:	4013      	ands	r3, r2
 8005572:	2b02      	cmp	r3, #2
 8005574:	d123      	bne.n	80055be <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	08da      	lsrs	r2, r3, #3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3208      	adds	r2, #8
 800557e:	0092      	lsls	r2, r2, #2
 8005580:	58d3      	ldr	r3, [r2, r3]
 8005582:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2207      	movs	r2, #7
 8005588:	4013      	ands	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	220f      	movs	r2, #15
 800558e:	409a      	lsls	r2, r3
 8005590:	0013      	movs	r3, r2
 8005592:	43da      	mvns	r2, r3
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	4013      	ands	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	691a      	ldr	r2, [r3, #16]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	2107      	movs	r1, #7
 80055a2:	400b      	ands	r3, r1
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	409a      	lsls	r2, r3
 80055a8:	0013      	movs	r3, r2
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	08da      	lsrs	r2, r3, #3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3208      	adds	r2, #8
 80055b8:	0092      	lsls	r2, r2, #2
 80055ba:	6939      	ldr	r1, [r7, #16]
 80055bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	2203      	movs	r2, #3
 80055ca:	409a      	lsls	r2, r3
 80055cc:	0013      	movs	r3, r2
 80055ce:	43da      	mvns	r2, r3
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	4013      	ands	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2203      	movs	r2, #3
 80055dc:	401a      	ands	r2, r3
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	409a      	lsls	r2, r3
 80055e4:	0013      	movs	r3, r2
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	23c0      	movs	r3, #192	; 0xc0
 80055f8:	029b      	lsls	r3, r3, #10
 80055fa:	4013      	ands	r3, r2
 80055fc:	d100      	bne.n	8005600 <HAL_GPIO_Init+0x17c>
 80055fe:	e0a0      	b.n	8005742 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005600:	4b57      	ldr	r3, [pc, #348]	; (8005760 <HAL_GPIO_Init+0x2dc>)
 8005602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005604:	4b56      	ldr	r3, [pc, #344]	; (8005760 <HAL_GPIO_Init+0x2dc>)
 8005606:	2101      	movs	r1, #1
 8005608:	430a      	orrs	r2, r1
 800560a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800560c:	4a55      	ldr	r2, [pc, #340]	; (8005764 <HAL_GPIO_Init+0x2e0>)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	089b      	lsrs	r3, r3, #2
 8005612:	3302      	adds	r3, #2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	589b      	ldr	r3, [r3, r2]
 8005618:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2203      	movs	r2, #3
 800561e:	4013      	ands	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	220f      	movs	r2, #15
 8005624:	409a      	lsls	r2, r3
 8005626:	0013      	movs	r3, r2
 8005628:	43da      	mvns	r2, r3
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	4013      	ands	r3, r2
 800562e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	23a0      	movs	r3, #160	; 0xa0
 8005634:	05db      	lsls	r3, r3, #23
 8005636:	429a      	cmp	r2, r3
 8005638:	d01f      	beq.n	800567a <HAL_GPIO_Init+0x1f6>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a4a      	ldr	r2, [pc, #296]	; (8005768 <HAL_GPIO_Init+0x2e4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d019      	beq.n	8005676 <HAL_GPIO_Init+0x1f2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a49      	ldr	r2, [pc, #292]	; (800576c <HAL_GPIO_Init+0x2e8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <HAL_GPIO_Init+0x1ee>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a48      	ldr	r2, [pc, #288]	; (8005770 <HAL_GPIO_Init+0x2ec>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00d      	beq.n	800566e <HAL_GPIO_Init+0x1ea>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a47      	ldr	r2, [pc, #284]	; (8005774 <HAL_GPIO_Init+0x2f0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d007      	beq.n	800566a <HAL_GPIO_Init+0x1e6>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a46      	ldr	r2, [pc, #280]	; (8005778 <HAL_GPIO_Init+0x2f4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d101      	bne.n	8005666 <HAL_GPIO_Init+0x1e2>
 8005662:	2305      	movs	r3, #5
 8005664:	e00a      	b.n	800567c <HAL_GPIO_Init+0x1f8>
 8005666:	2306      	movs	r3, #6
 8005668:	e008      	b.n	800567c <HAL_GPIO_Init+0x1f8>
 800566a:	2304      	movs	r3, #4
 800566c:	e006      	b.n	800567c <HAL_GPIO_Init+0x1f8>
 800566e:	2303      	movs	r3, #3
 8005670:	e004      	b.n	800567c <HAL_GPIO_Init+0x1f8>
 8005672:	2302      	movs	r3, #2
 8005674:	e002      	b.n	800567c <HAL_GPIO_Init+0x1f8>
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <HAL_GPIO_Init+0x1f8>
 800567a:	2300      	movs	r3, #0
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	2103      	movs	r1, #3
 8005680:	400a      	ands	r2, r1
 8005682:	0092      	lsls	r2, r2, #2
 8005684:	4093      	lsls	r3, r2
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800568c:	4935      	ldr	r1, [pc, #212]	; (8005764 <HAL_GPIO_Init+0x2e0>)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	089b      	lsrs	r3, r3, #2
 8005692:	3302      	adds	r3, #2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800569a:	4b38      	ldr	r3, [pc, #224]	; (800577c <HAL_GPIO_Init+0x2f8>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	43da      	mvns	r2, r3
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	4013      	ands	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	2380      	movs	r3, #128	; 0x80
 80056b0:	035b      	lsls	r3, r3, #13
 80056b2:	4013      	ands	r3, r2
 80056b4:	d003      	beq.n	80056be <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80056be:	4b2f      	ldr	r3, [pc, #188]	; (800577c <HAL_GPIO_Init+0x2f8>)
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80056c4:	4b2d      	ldr	r3, [pc, #180]	; (800577c <HAL_GPIO_Init+0x2f8>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	43da      	mvns	r2, r3
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	4013      	ands	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	2380      	movs	r3, #128	; 0x80
 80056da:	039b      	lsls	r3, r3, #14
 80056dc:	4013      	ands	r3, r2
 80056de:	d003      	beq.n	80056e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80056e8:	4b24      	ldr	r3, [pc, #144]	; (800577c <HAL_GPIO_Init+0x2f8>)
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80056ee:	4b23      	ldr	r3, [pc, #140]	; (800577c <HAL_GPIO_Init+0x2f8>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	43da      	mvns	r2, r3
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	4013      	ands	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	2380      	movs	r3, #128	; 0x80
 8005704:	029b      	lsls	r3, r3, #10
 8005706:	4013      	ands	r3, r2
 8005708:	d003      	beq.n	8005712 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005712:	4b1a      	ldr	r3, [pc, #104]	; (800577c <HAL_GPIO_Init+0x2f8>)
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005718:	4b18      	ldr	r3, [pc, #96]	; (800577c <HAL_GPIO_Init+0x2f8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	43da      	mvns	r2, r3
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	4013      	ands	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	2380      	movs	r3, #128	; 0x80
 800572e:	025b      	lsls	r3, r3, #9
 8005730:	4013      	ands	r3, r2
 8005732:	d003      	beq.n	800573c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4313      	orrs	r3, r2
 800573a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800573c:	4b0f      	ldr	r3, [pc, #60]	; (800577c <HAL_GPIO_Init+0x2f8>)
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	3301      	adds	r3, #1
 8005746:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	40da      	lsrs	r2, r3
 8005750:	1e13      	subs	r3, r2, #0
 8005752:	d000      	beq.n	8005756 <HAL_GPIO_Init+0x2d2>
 8005754:	e6a2      	b.n	800549c <HAL_GPIO_Init+0x18>
  }
}
 8005756:	46c0      	nop			; (mov r8, r8)
 8005758:	46c0      	nop			; (mov r8, r8)
 800575a:	46bd      	mov	sp, r7
 800575c:	b006      	add	sp, #24
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40021000 	.word	0x40021000
 8005764:	40010000 	.word	0x40010000
 8005768:	50000400 	.word	0x50000400
 800576c:	50000800 	.word	0x50000800
 8005770:	50000c00 	.word	0x50000c00
 8005774:	50001000 	.word	0x50001000
 8005778:	50001c00 	.word	0x50001c00
 800577c:	40010400 	.word	0x40010400

08005780 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	000a      	movs	r2, r1
 800578a:	1cbb      	adds	r3, r7, #2
 800578c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	1cba      	adds	r2, r7, #2
 8005794:	8812      	ldrh	r2, [r2, #0]
 8005796:	4013      	ands	r3, r2
 8005798:	d004      	beq.n	80057a4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800579a:	230f      	movs	r3, #15
 800579c:	18fb      	adds	r3, r7, r3
 800579e:	2201      	movs	r2, #1
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	e003      	b.n	80057ac <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057a4:	230f      	movs	r3, #15
 80057a6:	18fb      	adds	r3, r7, r3
 80057a8:	2200      	movs	r2, #0
 80057aa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80057ac:	230f      	movs	r3, #15
 80057ae:	18fb      	adds	r3, r7, r3
 80057b0:	781b      	ldrb	r3, [r3, #0]
}
 80057b2:	0018      	movs	r0, r3
 80057b4:	46bd      	mov	sp, r7
 80057b6:	b004      	add	sp, #16
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e082      	b.n	80058d4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2241      	movs	r2, #65	; 0x41
 80057d2:	5c9b      	ldrb	r3, [r3, r2]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d107      	bne.n	80057ea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2240      	movs	r2, #64	; 0x40
 80057de:	2100      	movs	r1, #0
 80057e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	0018      	movs	r0, r3
 80057e6:	f7fe fd07 	bl	80041f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2241      	movs	r2, #65	; 0x41
 80057ee:	2124      	movs	r1, #36	; 0x24
 80057f0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2101      	movs	r1, #1
 80057fe:	438a      	bics	r2, r1
 8005800:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4934      	ldr	r1, [pc, #208]	; (80058dc <HAL_I2C_Init+0x120>)
 800580c:	400a      	ands	r2, r1
 800580e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4931      	ldr	r1, [pc, #196]	; (80058e0 <HAL_I2C_Init+0x124>)
 800581c:	400a      	ands	r2, r1
 800581e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d108      	bne.n	800583a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2180      	movs	r1, #128	; 0x80
 8005832:	0209      	lsls	r1, r1, #8
 8005834:	430a      	orrs	r2, r1
 8005836:	609a      	str	r2, [r3, #8]
 8005838:	e007      	b.n	800584a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2184      	movs	r1, #132	; 0x84
 8005844:	0209      	lsls	r1, r1, #8
 8005846:	430a      	orrs	r2, r1
 8005848:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	2b02      	cmp	r3, #2
 8005850:	d104      	bne.n	800585c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2280      	movs	r2, #128	; 0x80
 8005858:	0112      	lsls	r2, r2, #4
 800585a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	491f      	ldr	r1, [pc, #124]	; (80058e4 <HAL_I2C_Init+0x128>)
 8005868:	430a      	orrs	r2, r1
 800586a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	491a      	ldr	r1, [pc, #104]	; (80058e0 <HAL_I2C_Init+0x124>)
 8005878:	400a      	ands	r2, r1
 800587a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691a      	ldr	r2, [r3, #16]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	431a      	orrs	r2, r3
 8005886:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69d9      	ldr	r1, [r3, #28]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1a      	ldr	r2, [r3, #32]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2101      	movs	r1, #1
 80058b2:	430a      	orrs	r2, r1
 80058b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2241      	movs	r2, #65	; 0x41
 80058c0:	2120      	movs	r1, #32
 80058c2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2242      	movs	r2, #66	; 0x42
 80058ce:	2100      	movs	r1, #0
 80058d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	0018      	movs	r0, r3
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b002      	add	sp, #8
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	f0ffffff 	.word	0xf0ffffff
 80058e0:	ffff7fff 	.word	0xffff7fff
 80058e4:	02008000 	.word	0x02008000

080058e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80058e8:	b590      	push	{r4, r7, lr}
 80058ea:	b089      	sub	sp, #36	; 0x24
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	0008      	movs	r0, r1
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	0019      	movs	r1, r3
 80058f6:	230a      	movs	r3, #10
 80058f8:	18fb      	adds	r3, r7, r3
 80058fa:	1c02      	adds	r2, r0, #0
 80058fc:	801a      	strh	r2, [r3, #0]
 80058fe:	2308      	movs	r3, #8
 8005900:	18fb      	adds	r3, r7, r3
 8005902:	1c0a      	adds	r2, r1, #0
 8005904:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2241      	movs	r2, #65	; 0x41
 800590a:	5c9b      	ldrb	r3, [r3, r2]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b20      	cmp	r3, #32
 8005910:	d000      	beq.n	8005914 <HAL_I2C_Master_Transmit+0x2c>
 8005912:	e0e7      	b.n	8005ae4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2240      	movs	r2, #64	; 0x40
 8005918:	5c9b      	ldrb	r3, [r3, r2]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d101      	bne.n	8005922 <HAL_I2C_Master_Transmit+0x3a>
 800591e:	2302      	movs	r3, #2
 8005920:	e0e1      	b.n	8005ae6 <HAL_I2C_Master_Transmit+0x1fe>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2240      	movs	r2, #64	; 0x40
 8005926:	2101      	movs	r1, #1
 8005928:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800592a:	f7fe fe9d 	bl	8004668 <HAL_GetTick>
 800592e:	0003      	movs	r3, r0
 8005930:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005932:	2380      	movs	r3, #128	; 0x80
 8005934:	0219      	lsls	r1, r3, #8
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	2319      	movs	r3, #25
 800593e:	2201      	movs	r2, #1
 8005940:	f000 fa16 	bl	8005d70 <I2C_WaitOnFlagUntilTimeout>
 8005944:	1e03      	subs	r3, r0, #0
 8005946:	d001      	beq.n	800594c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e0cc      	b.n	8005ae6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2241      	movs	r2, #65	; 0x41
 8005950:	2121      	movs	r1, #33	; 0x21
 8005952:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2242      	movs	r2, #66	; 0x42
 8005958:	2110      	movs	r1, #16
 800595a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2208      	movs	r2, #8
 800596c:	18ba      	adds	r2, r7, r2
 800596e:	8812      	ldrh	r2, [r2, #0]
 8005970:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597c:	b29b      	uxth	r3, r3
 800597e:	2bff      	cmp	r3, #255	; 0xff
 8005980:	d911      	bls.n	80059a6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	22ff      	movs	r2, #255	; 0xff
 8005986:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598c:	b2da      	uxtb	r2, r3
 800598e:	2380      	movs	r3, #128	; 0x80
 8005990:	045c      	lsls	r4, r3, #17
 8005992:	230a      	movs	r3, #10
 8005994:	18fb      	adds	r3, r7, r3
 8005996:	8819      	ldrh	r1, [r3, #0]
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	4b55      	ldr	r3, [pc, #340]	; (8005af0 <HAL_I2C_Master_Transmit+0x208>)
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	0023      	movs	r3, r4
 80059a0:	f000 fbbe 	bl	8006120 <I2C_TransferConfig>
 80059a4:	e075      	b.n	8005a92 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	2380      	movs	r3, #128	; 0x80
 80059b8:	049c      	lsls	r4, r3, #18
 80059ba:	230a      	movs	r3, #10
 80059bc:	18fb      	adds	r3, r7, r3
 80059be:	8819      	ldrh	r1, [r3, #0]
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	4b4b      	ldr	r3, [pc, #300]	; (8005af0 <HAL_I2C_Master_Transmit+0x208>)
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	0023      	movs	r3, r4
 80059c8:	f000 fbaa 	bl	8006120 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80059cc:	e061      	b.n	8005a92 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	0018      	movs	r0, r3
 80059d6:	f000 fa19 	bl	8005e0c <I2C_WaitOnTXISFlagUntilTimeout>
 80059da:	1e03      	subs	r3, r0, #0
 80059dc:	d001      	beq.n	80059e2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e081      	b.n	8005ae6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	781a      	ldrb	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d03a      	beq.n	8005a92 <HAL_I2C_Master_Transmit+0x1aa>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d136      	bne.n	8005a92 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	0013      	movs	r3, r2
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2180      	movs	r1, #128	; 0x80
 8005a32:	f000 f99d 	bl	8005d70 <I2C_WaitOnFlagUntilTimeout>
 8005a36:	1e03      	subs	r3, r0, #0
 8005a38:	d001      	beq.n	8005a3e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e053      	b.n	8005ae6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2bff      	cmp	r3, #255	; 0xff
 8005a46:	d911      	bls.n	8005a6c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	22ff      	movs	r2, #255	; 0xff
 8005a4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	2380      	movs	r3, #128	; 0x80
 8005a56:	045c      	lsls	r4, r3, #17
 8005a58:	230a      	movs	r3, #10
 8005a5a:	18fb      	adds	r3, r7, r3
 8005a5c:	8819      	ldrh	r1, [r3, #0]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	2300      	movs	r3, #0
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	0023      	movs	r3, r4
 8005a66:	f000 fb5b 	bl	8006120 <I2C_TransferConfig>
 8005a6a:	e012      	b.n	8005a92 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	049c      	lsls	r4, r3, #18
 8005a80:	230a      	movs	r3, #10
 8005a82:	18fb      	adds	r3, r7, r3
 8005a84:	8819      	ldrh	r1, [r3, #0]
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	0023      	movs	r3, r4
 8005a8e:	f000 fb47 	bl	8006120 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d198      	bne.n	80059ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	f000 f9f8 	bl	8005e98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005aa8:	1e03      	subs	r3, r0, #0
 8005aaa:	d001      	beq.n	8005ab0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e01a      	b.n	8005ae6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	490c      	ldr	r1, [pc, #48]	; (8005af4 <HAL_I2C_Master_Transmit+0x20c>)
 8005ac4:	400a      	ands	r2, r1
 8005ac6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2241      	movs	r2, #65	; 0x41
 8005acc:	2120      	movs	r1, #32
 8005ace:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2242      	movs	r2, #66	; 0x42
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2240      	movs	r2, #64	; 0x40
 8005adc:	2100      	movs	r1, #0
 8005ade:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	e000      	b.n	8005ae6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005ae4:	2302      	movs	r3, #2
  }
}
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	b007      	add	sp, #28
 8005aec:	bd90      	pop	{r4, r7, pc}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	80002000 	.word	0x80002000
 8005af4:	fe00e800 	.word	0xfe00e800

08005af8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08a      	sub	sp, #40	; 0x28
 8005afc:	af02      	add	r7, sp, #8
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	607a      	str	r2, [r7, #4]
 8005b02:	603b      	str	r3, [r7, #0]
 8005b04:	230a      	movs	r3, #10
 8005b06:	18fb      	adds	r3, r7, r3
 8005b08:	1c0a      	adds	r2, r1, #0
 8005b0a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2241      	movs	r2, #65	; 0x41
 8005b14:	5c9b      	ldrb	r3, [r3, r2]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d000      	beq.n	8005b1e <HAL_I2C_IsDeviceReady+0x26>
 8005b1c:	e0fd      	b.n	8005d1a <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	699a      	ldr	r2, [r3, #24]
 8005b24:	2380      	movs	r3, #128	; 0x80
 8005b26:	021b      	lsls	r3, r3, #8
 8005b28:	401a      	ands	r2, r3
 8005b2a:	2380      	movs	r3, #128	; 0x80
 8005b2c:	021b      	lsls	r3, r3, #8
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d101      	bne.n	8005b36 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8005b32:	2302      	movs	r3, #2
 8005b34:	e0f2      	b.n	8005d1c <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2240      	movs	r2, #64	; 0x40
 8005b3a:	5c9b      	ldrb	r3, [r3, r2]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_I2C_IsDeviceReady+0x4c>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e0eb      	b.n	8005d1c <HAL_I2C_IsDeviceReady+0x224>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2240      	movs	r2, #64	; 0x40
 8005b48:	2101      	movs	r1, #1
 8005b4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2241      	movs	r2, #65	; 0x41
 8005b50:	2124      	movs	r1, #36	; 0x24
 8005b52:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d107      	bne.n	8005b72 <HAL_I2C_IsDeviceReady+0x7a>
 8005b62:	230a      	movs	r3, #10
 8005b64:	18fb      	adds	r3, r7, r3
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	059b      	lsls	r3, r3, #22
 8005b6a:	0d9b      	lsrs	r3, r3, #22
 8005b6c:	4a6d      	ldr	r2, [pc, #436]	; (8005d24 <HAL_I2C_IsDeviceReady+0x22c>)
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	e006      	b.n	8005b80 <HAL_I2C_IsDeviceReady+0x88>
 8005b72:	230a      	movs	r3, #10
 8005b74:	18fb      	adds	r3, r7, r3
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	059b      	lsls	r3, r3, #22
 8005b7a:	0d9b      	lsrs	r3, r3, #22
 8005b7c:	4a6a      	ldr	r2, [pc, #424]	; (8005d28 <HAL_I2C_IsDeviceReady+0x230>)
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005b86:	f7fe fd6f 	bl	8004668 <HAL_GetTick>
 8005b8a:	0003      	movs	r3, r0
 8005b8c:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	2220      	movs	r2, #32
 8005b96:	4013      	ands	r3, r2
 8005b98:	3b20      	subs	r3, #32
 8005b9a:	425a      	negs	r2, r3
 8005b9c:	4153      	adcs	r3, r2
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	231f      	movs	r3, #31
 8005ba2:	18fb      	adds	r3, r7, r3
 8005ba4:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	2210      	movs	r2, #16
 8005bae:	4013      	ands	r3, r2
 8005bb0:	3b10      	subs	r3, #16
 8005bb2:	425a      	negs	r2, r3
 8005bb4:	4153      	adcs	r3, r2
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	231e      	movs	r3, #30
 8005bba:	18fb      	adds	r3, r7, r3
 8005bbc:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005bbe:	e035      	b.n	8005c2c <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	d01a      	beq.n	8005bfc <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bc6:	f7fe fd4f 	bl	8004668 <HAL_GetTick>
 8005bca:	0002      	movs	r2, r0
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d302      	bcc.n	8005bdc <HAL_I2C_IsDeviceReady+0xe4>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10f      	bne.n	8005bfc <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2241      	movs	r2, #65	; 0x41
 8005be0:	2120      	movs	r1, #32
 8005be2:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be8:	2220      	movs	r2, #32
 8005bea:	431a      	orrs	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2240      	movs	r2, #64	; 0x40
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e08f      	b.n	8005d1c <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	2220      	movs	r2, #32
 8005c04:	4013      	ands	r3, r2
 8005c06:	3b20      	subs	r3, #32
 8005c08:	425a      	negs	r2, r3
 8005c0a:	4153      	adcs	r3, r2
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	231f      	movs	r3, #31
 8005c10:	18fb      	adds	r3, r7, r3
 8005c12:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	2210      	movs	r2, #16
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	3b10      	subs	r3, #16
 8005c20:	425a      	negs	r2, r3
 8005c22:	4153      	adcs	r3, r2
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	231e      	movs	r3, #30
 8005c28:	18fb      	adds	r3, r7, r3
 8005c2a:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005c2c:	231f      	movs	r3, #31
 8005c2e:	18fb      	adds	r3, r7, r3
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d104      	bne.n	8005c40 <HAL_I2C_IsDeviceReady+0x148>
 8005c36:	231e      	movs	r3, #30
 8005c38:	18fb      	adds	r3, r7, r3
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0bf      	beq.n	8005bc0 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	2210      	movs	r2, #16
 8005c48:	4013      	ands	r3, r2
 8005c4a:	2b10      	cmp	r3, #16
 8005c4c:	d01a      	beq.n	8005c84 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	0013      	movs	r3, r2
 8005c58:	2200      	movs	r2, #0
 8005c5a:	2120      	movs	r1, #32
 8005c5c:	f000 f888 	bl	8005d70 <I2C_WaitOnFlagUntilTimeout>
 8005c60:	1e03      	subs	r3, r0, #0
 8005c62:	d001      	beq.n	8005c68 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e059      	b.n	8005d1c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2241      	movs	r2, #65	; 0x41
 8005c74:	2120      	movs	r1, #32
 8005c76:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2240      	movs	r2, #64	; 0x40
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	e04b      	b.n	8005d1c <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	0013      	movs	r3, r2
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2120      	movs	r1, #32
 8005c92:	f000 f86d 	bl	8005d70 <I2C_WaitOnFlagUntilTimeout>
 8005c96:	1e03      	subs	r3, r0, #0
 8005c98:	d001      	beq.n	8005c9e <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e03e      	b.n	8005d1c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2210      	movs	r2, #16
 8005ca4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2220      	movs	r2, #32
 8005cac:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d119      	bne.n	8005cea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2180      	movs	r1, #128	; 0x80
 8005cc2:	01c9      	lsls	r1, r1, #7
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	0013      	movs	r3, r2
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	2120      	movs	r1, #32
 8005cd6:	f000 f84b 	bl	8005d70 <I2C_WaitOnFlagUntilTimeout>
 8005cda:	1e03      	subs	r3, r0, #0
 8005cdc:	d001      	beq.n	8005ce2 <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e01c      	b.n	8005d1c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	3301      	adds	r3, #1
 8005cee:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d900      	bls.n	8005cfa <HAL_I2C_IsDeviceReady+0x202>
 8005cf8:	e72f      	b.n	8005b5a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2241      	movs	r2, #65	; 0x41
 8005cfe:	2120      	movs	r1, #32
 8005d00:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d06:	2220      	movs	r2, #32
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2240      	movs	r2, #64	; 0x40
 8005d12:	2100      	movs	r1, #0
 8005d14:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005d1a:	2302      	movs	r3, #2
  }
}
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	b008      	add	sp, #32
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	02002000 	.word	0x02002000
 8005d28:	02002800 	.word	0x02002800

08005d2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d103      	bne.n	8005d4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2200      	movs	r2, #0
 8005d48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2201      	movs	r2, #1
 8005d52:	4013      	ands	r3, r2
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d007      	beq.n	8005d68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2101      	movs	r1, #1
 8005d64:	430a      	orrs	r2, r1
 8005d66:	619a      	str	r2, [r3, #24]
  }
}
 8005d68:	46c0      	nop			; (mov r8, r8)
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	b002      	add	sp, #8
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	603b      	str	r3, [r7, #0]
 8005d7c:	1dfb      	adds	r3, r7, #7
 8005d7e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d80:	e030      	b.n	8005de4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	3301      	adds	r3, #1
 8005d86:	d02d      	beq.n	8005de4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d88:	f7fe fc6e 	bl	8004668 <HAL_GetTick>
 8005d8c:	0002      	movs	r2, r0
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d302      	bcc.n	8005d9e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d122      	bne.n	8005de4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	4013      	ands	r3, r2
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	425a      	negs	r2, r3
 8005dae:	4153      	adcs	r3, r2
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	001a      	movs	r2, r3
 8005db4:	1dfb      	adds	r3, r7, #7
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d113      	bne.n	8005de4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2241      	movs	r2, #65	; 0x41
 8005dcc:	2120      	movs	r1, #32
 8005dce:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2242      	movs	r2, #66	; 0x42
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2240      	movs	r2, #64	; 0x40
 8005ddc:	2100      	movs	r1, #0
 8005dde:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e00f      	b.n	8005e04 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	4013      	ands	r3, r2
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	425a      	negs	r2, r3
 8005df4:	4153      	adcs	r3, r2
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	001a      	movs	r2, r3
 8005dfa:	1dfb      	adds	r3, r7, #7
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d0bf      	beq.n	8005d82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	0018      	movs	r0, r3
 8005e06:	46bd      	mov	sp, r7
 8005e08:	b004      	add	sp, #16
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e18:	e032      	b.n	8005e80 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	0018      	movs	r0, r3
 8005e22:	f000 f87d 	bl	8005f20 <I2C_IsErrorOccurred>
 8005e26:	1e03      	subs	r3, r0, #0
 8005e28:	d001      	beq.n	8005e2e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e030      	b.n	8005e90 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	3301      	adds	r3, #1
 8005e32:	d025      	beq.n	8005e80 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e34:	f7fe fc18 	bl	8004668 <HAL_GetTick>
 8005e38:	0002      	movs	r2, r0
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d302      	bcc.n	8005e4a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d11a      	bne.n	8005e80 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	2202      	movs	r2, #2
 8005e52:	4013      	ands	r3, r2
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d013      	beq.n	8005e80 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2241      	movs	r2, #65	; 0x41
 8005e68:	2120      	movs	r1, #32
 8005e6a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2242      	movs	r2, #66	; 0x42
 8005e70:	2100      	movs	r1, #0
 8005e72:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2240      	movs	r2, #64	; 0x40
 8005e78:	2100      	movs	r1, #0
 8005e7a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e007      	b.n	8005e90 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	2202      	movs	r2, #2
 8005e88:	4013      	ands	r3, r2
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d1c5      	bne.n	8005e1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	0018      	movs	r0, r3
 8005e92:	46bd      	mov	sp, r7
 8005e94:	b004      	add	sp, #16
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ea4:	e02f      	b.n	8005f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	68b9      	ldr	r1, [r7, #8]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	0018      	movs	r0, r3
 8005eae:	f000 f837 	bl	8005f20 <I2C_IsErrorOccurred>
 8005eb2:	1e03      	subs	r3, r0, #0
 8005eb4:	d001      	beq.n	8005eba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e02d      	b.n	8005f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eba:	f7fe fbd5 	bl	8004668 <HAL_GetTick>
 8005ebe:	0002      	movs	r2, r0
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d302      	bcc.n	8005ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d11a      	bne.n	8005f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	d013      	beq.n	8005f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2241      	movs	r2, #65	; 0x41
 8005eee:	2120      	movs	r1, #32
 8005ef0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2242      	movs	r2, #66	; 0x42
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2240      	movs	r2, #64	; 0x40
 8005efe:	2100      	movs	r1, #0
 8005f00:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e007      	b.n	8005f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	4013      	ands	r3, r2
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d1c8      	bne.n	8005ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	0018      	movs	r0, r3
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	b004      	add	sp, #16
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f20:	b590      	push	{r4, r7, lr}
 8005f22:	b08b      	sub	sp, #44	; 0x2c
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f2c:	2327      	movs	r3, #39	; 0x27
 8005f2e:	18fb      	adds	r3, r7, r3
 8005f30:	2200      	movs	r2, #0
 8005f32:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	2210      	movs	r2, #16
 8005f48:	4013      	ands	r3, r2
 8005f4a:	d100      	bne.n	8005f4e <I2C_IsErrorOccurred+0x2e>
 8005f4c:	e082      	b.n	8006054 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2210      	movs	r2, #16
 8005f54:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f56:	e060      	b.n	800601a <I2C_IsErrorOccurred+0xfa>
 8005f58:	2427      	movs	r4, #39	; 0x27
 8005f5a:	193b      	adds	r3, r7, r4
 8005f5c:	193a      	adds	r2, r7, r4
 8005f5e:	7812      	ldrb	r2, [r2, #0]
 8005f60:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	3301      	adds	r3, #1
 8005f66:	d058      	beq.n	800601a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f68:	f7fe fb7e 	bl	8004668 <HAL_GetTick>
 8005f6c:	0002      	movs	r2, r0
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d306      	bcc.n	8005f86 <I2C_IsErrorOccurred+0x66>
 8005f78:	193b      	adds	r3, r7, r4
 8005f7a:	193a      	adds	r2, r7, r4
 8005f7c:	7812      	ldrb	r2, [r2, #0]
 8005f7e:	701a      	strb	r2, [r3, #0]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d149      	bne.n	800601a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	2380      	movs	r3, #128	; 0x80
 8005f8e:	01db      	lsls	r3, r3, #7
 8005f90:	4013      	ands	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005f94:	2013      	movs	r0, #19
 8005f96:	183b      	adds	r3, r7, r0
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	2142      	movs	r1, #66	; 0x42
 8005f9c:	5c52      	ldrb	r2, [r2, r1]
 8005f9e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	2380      	movs	r3, #128	; 0x80
 8005fa8:	021b      	lsls	r3, r3, #8
 8005faa:	401a      	ands	r2, r3
 8005fac:	2380      	movs	r3, #128	; 0x80
 8005fae:	021b      	lsls	r3, r3, #8
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d126      	bne.n	8006002 <I2C_IsErrorOccurred+0xe2>
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	2380      	movs	r3, #128	; 0x80
 8005fb8:	01db      	lsls	r3, r3, #7
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d021      	beq.n	8006002 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8005fbe:	183b      	adds	r3, r7, r0
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	2b20      	cmp	r3, #32
 8005fc4:	d01d      	beq.n	8006002 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2180      	movs	r1, #128	; 0x80
 8005fd2:	01c9      	lsls	r1, r1, #7
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005fd8:	f7fe fb46 	bl	8004668 <HAL_GetTick>
 8005fdc:	0003      	movs	r3, r0
 8005fde:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fe0:	e00f      	b.n	8006002 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005fe2:	f7fe fb41 	bl	8004668 <HAL_GetTick>
 8005fe6:	0002      	movs	r2, r0
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b19      	cmp	r3, #25
 8005fee:	d908      	bls.n	8006002 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005ff8:	2327      	movs	r3, #39	; 0x27
 8005ffa:	18fb      	adds	r3, r7, r3
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	701a      	strb	r2, [r3, #0]

              break;
 8006000:	e00b      	b.n	800601a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	2220      	movs	r2, #32
 800600a:	4013      	ands	r3, r2
 800600c:	2127      	movs	r1, #39	; 0x27
 800600e:	187a      	adds	r2, r7, r1
 8006010:	1879      	adds	r1, r7, r1
 8006012:	7809      	ldrb	r1, [r1, #0]
 8006014:	7011      	strb	r1, [r2, #0]
 8006016:	2b20      	cmp	r3, #32
 8006018:	d1e3      	bne.n	8005fe2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	2220      	movs	r2, #32
 8006022:	4013      	ands	r3, r2
 8006024:	2b20      	cmp	r3, #32
 8006026:	d004      	beq.n	8006032 <I2C_IsErrorOccurred+0x112>
 8006028:	2327      	movs	r3, #39	; 0x27
 800602a:	18fb      	adds	r3, r7, r3
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d092      	beq.n	8005f58 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006032:	2327      	movs	r3, #39	; 0x27
 8006034:	18fb      	adds	r3, r7, r3
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d103      	bne.n	8006044 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2220      	movs	r2, #32
 8006042:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	2204      	movs	r2, #4
 8006048:	4313      	orrs	r3, r2
 800604a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800604c:	2327      	movs	r3, #39	; 0x27
 800604e:	18fb      	adds	r3, r7, r3
 8006050:	2201      	movs	r2, #1
 8006052:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	2380      	movs	r3, #128	; 0x80
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	4013      	ands	r3, r2
 8006064:	d00c      	beq.n	8006080 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	2201      	movs	r2, #1
 800606a:	4313      	orrs	r3, r2
 800606c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2280      	movs	r2, #128	; 0x80
 8006074:	0052      	lsls	r2, r2, #1
 8006076:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006078:	2327      	movs	r3, #39	; 0x27
 800607a:	18fb      	adds	r3, r7, r3
 800607c:	2201      	movs	r2, #1
 800607e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	2380      	movs	r3, #128	; 0x80
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	4013      	ands	r3, r2
 8006088:	d00c      	beq.n	80060a4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	2208      	movs	r2, #8
 800608e:	4313      	orrs	r3, r2
 8006090:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2280      	movs	r2, #128	; 0x80
 8006098:	00d2      	lsls	r2, r2, #3
 800609a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800609c:	2327      	movs	r3, #39	; 0x27
 800609e:	18fb      	adds	r3, r7, r3
 80060a0:	2201      	movs	r2, #1
 80060a2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	2380      	movs	r3, #128	; 0x80
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4013      	ands	r3, r2
 80060ac:	d00c      	beq.n	80060c8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	2202      	movs	r2, #2
 80060b2:	4313      	orrs	r3, r2
 80060b4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2280      	movs	r2, #128	; 0x80
 80060bc:	0092      	lsls	r2, r2, #2
 80060be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060c0:	2327      	movs	r3, #39	; 0x27
 80060c2:	18fb      	adds	r3, r7, r3
 80060c4:	2201      	movs	r2, #1
 80060c6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80060c8:	2327      	movs	r3, #39	; 0x27
 80060ca:	18fb      	adds	r3, r7, r3
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d01d      	beq.n	800610e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	0018      	movs	r0, r3
 80060d6:	f7ff fe29 	bl	8005d2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	490d      	ldr	r1, [pc, #52]	; (800611c <I2C_IsErrorOccurred+0x1fc>)
 80060e6:	400a      	ands	r2, r1
 80060e8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	431a      	orrs	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2241      	movs	r2, #65	; 0x41
 80060fa:	2120      	movs	r1, #32
 80060fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2242      	movs	r2, #66	; 0x42
 8006102:	2100      	movs	r1, #0
 8006104:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2240      	movs	r2, #64	; 0x40
 800610a:	2100      	movs	r1, #0
 800610c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800610e:	2327      	movs	r3, #39	; 0x27
 8006110:	18fb      	adds	r3, r7, r3
 8006112:	781b      	ldrb	r3, [r3, #0]
}
 8006114:	0018      	movs	r0, r3
 8006116:	46bd      	mov	sp, r7
 8006118:	b00b      	add	sp, #44	; 0x2c
 800611a:	bd90      	pop	{r4, r7, pc}
 800611c:	fe00e800 	.word	0xfe00e800

08006120 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006120:	b590      	push	{r4, r7, lr}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	0008      	movs	r0, r1
 800612a:	0011      	movs	r1, r2
 800612c:	607b      	str	r3, [r7, #4]
 800612e:	240a      	movs	r4, #10
 8006130:	193b      	adds	r3, r7, r4
 8006132:	1c02      	adds	r2, r0, #0
 8006134:	801a      	strh	r2, [r3, #0]
 8006136:	2009      	movs	r0, #9
 8006138:	183b      	adds	r3, r7, r0
 800613a:	1c0a      	adds	r2, r1, #0
 800613c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800613e:	193b      	adds	r3, r7, r4
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	059b      	lsls	r3, r3, #22
 8006144:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006146:	183b      	adds	r3, r7, r0
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	0419      	lsls	r1, r3, #16
 800614c:	23ff      	movs	r3, #255	; 0xff
 800614e:	041b      	lsls	r3, r3, #16
 8006150:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006152:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615a:	4313      	orrs	r3, r2
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	085b      	lsrs	r3, r3, #1
 8006160:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800616a:	0d51      	lsrs	r1, r2, #21
 800616c:	2280      	movs	r2, #128	; 0x80
 800616e:	00d2      	lsls	r2, r2, #3
 8006170:	400a      	ands	r2, r1
 8006172:	4907      	ldr	r1, [pc, #28]	; (8006190 <I2C_TransferConfig+0x70>)
 8006174:	430a      	orrs	r2, r1
 8006176:	43d2      	mvns	r2, r2
 8006178:	401a      	ands	r2, r3
 800617a:	0011      	movs	r1, r2
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006186:	46c0      	nop			; (mov r8, r8)
 8006188:	46bd      	mov	sp, r7
 800618a:	b007      	add	sp, #28
 800618c:	bd90      	pop	{r4, r7, pc}
 800618e:	46c0      	nop			; (mov r8, r8)
 8006190:	03ff63ff 	.word	0x03ff63ff

08006194 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2241      	movs	r2, #65	; 0x41
 80061a2:	5c9b      	ldrb	r3, [r3, r2]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d138      	bne.n	800621c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2240      	movs	r2, #64	; 0x40
 80061ae:	5c9b      	ldrb	r3, [r3, r2]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80061b4:	2302      	movs	r3, #2
 80061b6:	e032      	b.n	800621e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2240      	movs	r2, #64	; 0x40
 80061bc:	2101      	movs	r1, #1
 80061be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2241      	movs	r2, #65	; 0x41
 80061c4:	2124      	movs	r1, #36	; 0x24
 80061c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2101      	movs	r1, #1
 80061d4:	438a      	bics	r2, r1
 80061d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4911      	ldr	r1, [pc, #68]	; (8006228 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80061e4:	400a      	ands	r2, r1
 80061e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6819      	ldr	r1, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2101      	movs	r1, #1
 8006204:	430a      	orrs	r2, r1
 8006206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2241      	movs	r2, #65	; 0x41
 800620c:	2120      	movs	r1, #32
 800620e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2240      	movs	r2, #64	; 0x40
 8006214:	2100      	movs	r1, #0
 8006216:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006218:	2300      	movs	r3, #0
 800621a:	e000      	b.n	800621e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800621c:	2302      	movs	r3, #2
  }
}
 800621e:	0018      	movs	r0, r3
 8006220:	46bd      	mov	sp, r7
 8006222:	b002      	add	sp, #8
 8006224:	bd80      	pop	{r7, pc}
 8006226:	46c0      	nop			; (mov r8, r8)
 8006228:	ffffefff 	.word	0xffffefff

0800622c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2241      	movs	r2, #65	; 0x41
 800623a:	5c9b      	ldrb	r3, [r3, r2]
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b20      	cmp	r3, #32
 8006240:	d139      	bne.n	80062b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2240      	movs	r2, #64	; 0x40
 8006246:	5c9b      	ldrb	r3, [r3, r2]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800624c:	2302      	movs	r3, #2
 800624e:	e033      	b.n	80062b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2240      	movs	r2, #64	; 0x40
 8006254:	2101      	movs	r1, #1
 8006256:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2241      	movs	r2, #65	; 0x41
 800625c:	2124      	movs	r1, #36	; 0x24
 800625e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2101      	movs	r1, #1
 800626c:	438a      	bics	r2, r1
 800626e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4a11      	ldr	r2, [pc, #68]	; (80062c0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800627c:	4013      	ands	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2101      	movs	r1, #1
 800629e:	430a      	orrs	r2, r1
 80062a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2241      	movs	r2, #65	; 0x41
 80062a6:	2120      	movs	r1, #32
 80062a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2240      	movs	r2, #64	; 0x40
 80062ae:	2100      	movs	r1, #0
 80062b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	e000      	b.n	80062b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80062b6:	2302      	movs	r3, #2
  }
}
 80062b8:	0018      	movs	r0, r3
 80062ba:	46bd      	mov	sp, r7
 80062bc:	b004      	add	sp, #16
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	fffff0ff 	.word	0xfffff0ff

080062c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062c4:	b5b0      	push	{r4, r5, r7, lr}
 80062c6:	b08a      	sub	sp, #40	; 0x28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d102      	bne.n	80062d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f000 fbbf 	bl	8006a56 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062d8:	4bc9      	ldr	r3, [pc, #804]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	220c      	movs	r2, #12
 80062de:	4013      	ands	r3, r2
 80062e0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062e2:	4bc7      	ldr	r3, [pc, #796]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	2380      	movs	r3, #128	; 0x80
 80062e8:	025b      	lsls	r3, r3, #9
 80062ea:	4013      	ands	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2201      	movs	r2, #1
 80062f4:	4013      	ands	r3, r2
 80062f6:	d100      	bne.n	80062fa <HAL_RCC_OscConfig+0x36>
 80062f8:	e07e      	b.n	80063f8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d007      	beq.n	8006310 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	2b0c      	cmp	r3, #12
 8006304:	d112      	bne.n	800632c <HAL_RCC_OscConfig+0x68>
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	2380      	movs	r3, #128	; 0x80
 800630a:	025b      	lsls	r3, r3, #9
 800630c:	429a      	cmp	r2, r3
 800630e:	d10d      	bne.n	800632c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006310:	4bbb      	ldr	r3, [pc, #748]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	2380      	movs	r3, #128	; 0x80
 8006316:	029b      	lsls	r3, r3, #10
 8006318:	4013      	ands	r3, r2
 800631a:	d100      	bne.n	800631e <HAL_RCC_OscConfig+0x5a>
 800631c:	e06b      	b.n	80063f6 <HAL_RCC_OscConfig+0x132>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d167      	bne.n	80063f6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	f000 fb95 	bl	8006a56 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	2380      	movs	r3, #128	; 0x80
 8006332:	025b      	lsls	r3, r3, #9
 8006334:	429a      	cmp	r2, r3
 8006336:	d107      	bne.n	8006348 <HAL_RCC_OscConfig+0x84>
 8006338:	4bb1      	ldr	r3, [pc, #708]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	4bb0      	ldr	r3, [pc, #704]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 800633e:	2180      	movs	r1, #128	; 0x80
 8006340:	0249      	lsls	r1, r1, #9
 8006342:	430a      	orrs	r2, r1
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	e027      	b.n	8006398 <HAL_RCC_OscConfig+0xd4>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	23a0      	movs	r3, #160	; 0xa0
 800634e:	02db      	lsls	r3, r3, #11
 8006350:	429a      	cmp	r2, r3
 8006352:	d10e      	bne.n	8006372 <HAL_RCC_OscConfig+0xae>
 8006354:	4baa      	ldr	r3, [pc, #680]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	4ba9      	ldr	r3, [pc, #676]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 800635a:	2180      	movs	r1, #128	; 0x80
 800635c:	02c9      	lsls	r1, r1, #11
 800635e:	430a      	orrs	r2, r1
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	4ba7      	ldr	r3, [pc, #668]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	4ba6      	ldr	r3, [pc, #664]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 8006368:	2180      	movs	r1, #128	; 0x80
 800636a:	0249      	lsls	r1, r1, #9
 800636c:	430a      	orrs	r2, r1
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	e012      	b.n	8006398 <HAL_RCC_OscConfig+0xd4>
 8006372:	4ba3      	ldr	r3, [pc, #652]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	4ba2      	ldr	r3, [pc, #648]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 8006378:	49a2      	ldr	r1, [pc, #648]	; (8006604 <HAL_RCC_OscConfig+0x340>)
 800637a:	400a      	ands	r2, r1
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	4ba0      	ldr	r3, [pc, #640]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	2380      	movs	r3, #128	; 0x80
 8006384:	025b      	lsls	r3, r3, #9
 8006386:	4013      	ands	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4b9c      	ldr	r3, [pc, #624]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	4b9b      	ldr	r3, [pc, #620]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 8006392:	499d      	ldr	r1, [pc, #628]	; (8006608 <HAL_RCC_OscConfig+0x344>)
 8006394:	400a      	ands	r2, r1
 8006396:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d015      	beq.n	80063cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063a0:	f7fe f962 	bl	8004668 <HAL_GetTick>
 80063a4:	0003      	movs	r3, r0
 80063a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063a8:	e009      	b.n	80063be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063aa:	f7fe f95d 	bl	8004668 <HAL_GetTick>
 80063ae:	0002      	movs	r2, r0
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	2b64      	cmp	r3, #100	; 0x64
 80063b6:	d902      	bls.n	80063be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	f000 fb4c 	bl	8006a56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063be:	4b90      	ldr	r3, [pc, #576]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	2380      	movs	r3, #128	; 0x80
 80063c4:	029b      	lsls	r3, r3, #10
 80063c6:	4013      	ands	r3, r2
 80063c8:	d0ef      	beq.n	80063aa <HAL_RCC_OscConfig+0xe6>
 80063ca:	e015      	b.n	80063f8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063cc:	f7fe f94c 	bl	8004668 <HAL_GetTick>
 80063d0:	0003      	movs	r3, r0
 80063d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063d4:	e008      	b.n	80063e8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063d6:	f7fe f947 	bl	8004668 <HAL_GetTick>
 80063da:	0002      	movs	r2, r0
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b64      	cmp	r3, #100	; 0x64
 80063e2:	d901      	bls.n	80063e8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e336      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063e8:	4b85      	ldr	r3, [pc, #532]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	2380      	movs	r3, #128	; 0x80
 80063ee:	029b      	lsls	r3, r3, #10
 80063f0:	4013      	ands	r3, r2
 80063f2:	d1f0      	bne.n	80063d6 <HAL_RCC_OscConfig+0x112>
 80063f4:	e000      	b.n	80063f8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2202      	movs	r2, #2
 80063fe:	4013      	ands	r3, r2
 8006400:	d100      	bne.n	8006404 <HAL_RCC_OscConfig+0x140>
 8006402:	e099      	b.n	8006538 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	2220      	movs	r2, #32
 800640e:	4013      	ands	r3, r2
 8006410:	d009      	beq.n	8006426 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8006412:	4b7b      	ldr	r3, [pc, #492]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	4b7a      	ldr	r3, [pc, #488]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 8006418:	2120      	movs	r1, #32
 800641a:	430a      	orrs	r2, r1
 800641c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	2220      	movs	r2, #32
 8006422:	4393      	bics	r3, r2
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	2b04      	cmp	r3, #4
 800642a:	d005      	beq.n	8006438 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	2b0c      	cmp	r3, #12
 8006430:	d13e      	bne.n	80064b0 <HAL_RCC_OscConfig+0x1ec>
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d13b      	bne.n	80064b0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006438:	4b71      	ldr	r3, [pc, #452]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2204      	movs	r2, #4
 800643e:	4013      	ands	r3, r2
 8006440:	d004      	beq.n	800644c <HAL_RCC_OscConfig+0x188>
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e304      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800644c:	4b6c      	ldr	r3, [pc, #432]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	4a6e      	ldr	r2, [pc, #440]	; (800660c <HAL_RCC_OscConfig+0x348>)
 8006452:	4013      	ands	r3, r2
 8006454:	0019      	movs	r1, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	021a      	lsls	r2, r3, #8
 800645c:	4b68      	ldr	r3, [pc, #416]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006462:	4b67      	ldr	r3, [pc, #412]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2209      	movs	r2, #9
 8006468:	4393      	bics	r3, r2
 800646a:	0019      	movs	r1, r3
 800646c:	4b64      	ldr	r3, [pc, #400]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 800646e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006470:	430a      	orrs	r2, r1
 8006472:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006474:	f000 fc42 	bl	8006cfc <HAL_RCC_GetSysClockFreq>
 8006478:	0001      	movs	r1, r0
 800647a:	4b61      	ldr	r3, [pc, #388]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	091b      	lsrs	r3, r3, #4
 8006480:	220f      	movs	r2, #15
 8006482:	4013      	ands	r3, r2
 8006484:	4a62      	ldr	r2, [pc, #392]	; (8006610 <HAL_RCC_OscConfig+0x34c>)
 8006486:	5cd3      	ldrb	r3, [r2, r3]
 8006488:	000a      	movs	r2, r1
 800648a:	40da      	lsrs	r2, r3
 800648c:	4b61      	ldr	r3, [pc, #388]	; (8006614 <HAL_RCC_OscConfig+0x350>)
 800648e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006490:	4b61      	ldr	r3, [pc, #388]	; (8006618 <HAL_RCC_OscConfig+0x354>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2513      	movs	r5, #19
 8006496:	197c      	adds	r4, r7, r5
 8006498:	0018      	movs	r0, r3
 800649a:	f7fe f89f 	bl	80045dc <HAL_InitTick>
 800649e:	0003      	movs	r3, r0
 80064a0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80064a2:	197b      	adds	r3, r7, r5
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d046      	beq.n	8006538 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80064aa:	197b      	adds	r3, r7, r5
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	e2d2      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d027      	beq.n	8006506 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80064b6:	4b52      	ldr	r3, [pc, #328]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2209      	movs	r2, #9
 80064bc:	4393      	bics	r3, r2
 80064be:	0019      	movs	r1, r3
 80064c0:	4b4f      	ldr	r3, [pc, #316]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 80064c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c4:	430a      	orrs	r2, r1
 80064c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c8:	f7fe f8ce 	bl	8004668 <HAL_GetTick>
 80064cc:	0003      	movs	r3, r0
 80064ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064d0:	e008      	b.n	80064e4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064d2:	f7fe f8c9 	bl	8004668 <HAL_GetTick>
 80064d6:	0002      	movs	r2, r0
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e2b8      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064e4:	4b46      	ldr	r3, [pc, #280]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2204      	movs	r2, #4
 80064ea:	4013      	ands	r3, r2
 80064ec:	d0f1      	beq.n	80064d2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ee:	4b44      	ldr	r3, [pc, #272]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	4a46      	ldr	r2, [pc, #280]	; (800660c <HAL_RCC_OscConfig+0x348>)
 80064f4:	4013      	ands	r3, r2
 80064f6:	0019      	movs	r1, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	021a      	lsls	r2, r3, #8
 80064fe:	4b40      	ldr	r3, [pc, #256]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 8006500:	430a      	orrs	r2, r1
 8006502:	605a      	str	r2, [r3, #4]
 8006504:	e018      	b.n	8006538 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006506:	4b3e      	ldr	r3, [pc, #248]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	4b3d      	ldr	r3, [pc, #244]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 800650c:	2101      	movs	r1, #1
 800650e:	438a      	bics	r2, r1
 8006510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006512:	f7fe f8a9 	bl	8004668 <HAL_GetTick>
 8006516:	0003      	movs	r3, r0
 8006518:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800651c:	f7fe f8a4 	bl	8004668 <HAL_GetTick>
 8006520:	0002      	movs	r2, r0
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e293      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800652e:	4b34      	ldr	r3, [pc, #208]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2204      	movs	r2, #4
 8006534:	4013      	ands	r3, r2
 8006536:	d1f1      	bne.n	800651c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2210      	movs	r2, #16
 800653e:	4013      	ands	r3, r2
 8006540:	d100      	bne.n	8006544 <HAL_RCC_OscConfig+0x280>
 8006542:	e0a2      	b.n	800668a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d140      	bne.n	80065cc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800654a:	4b2d      	ldr	r3, [pc, #180]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	2380      	movs	r3, #128	; 0x80
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4013      	ands	r3, r2
 8006554:	d005      	beq.n	8006562 <HAL_RCC_OscConfig+0x29e>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e279      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006562:	4b27      	ldr	r3, [pc, #156]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	4a2d      	ldr	r2, [pc, #180]	; (800661c <HAL_RCC_OscConfig+0x358>)
 8006568:	4013      	ands	r3, r2
 800656a:	0019      	movs	r1, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006570:	4b23      	ldr	r3, [pc, #140]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 8006572:	430a      	orrs	r2, r1
 8006574:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006576:	4b22      	ldr	r3, [pc, #136]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	021b      	lsls	r3, r3, #8
 800657c:	0a19      	lsrs	r1, r3, #8
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	061a      	lsls	r2, r3, #24
 8006584:	4b1e      	ldr	r3, [pc, #120]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 8006586:	430a      	orrs	r2, r1
 8006588:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	0b5b      	lsrs	r3, r3, #13
 8006590:	3301      	adds	r3, #1
 8006592:	2280      	movs	r2, #128	; 0x80
 8006594:	0212      	lsls	r2, r2, #8
 8006596:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006598:	4b19      	ldr	r3, [pc, #100]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	091b      	lsrs	r3, r3, #4
 800659e:	210f      	movs	r1, #15
 80065a0:	400b      	ands	r3, r1
 80065a2:	491b      	ldr	r1, [pc, #108]	; (8006610 <HAL_RCC_OscConfig+0x34c>)
 80065a4:	5ccb      	ldrb	r3, [r1, r3]
 80065a6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80065a8:	4b1a      	ldr	r3, [pc, #104]	; (8006614 <HAL_RCC_OscConfig+0x350>)
 80065aa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80065ac:	4b1a      	ldr	r3, [pc, #104]	; (8006618 <HAL_RCC_OscConfig+0x354>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2513      	movs	r5, #19
 80065b2:	197c      	adds	r4, r7, r5
 80065b4:	0018      	movs	r0, r3
 80065b6:	f7fe f811 	bl	80045dc <HAL_InitTick>
 80065ba:	0003      	movs	r3, r0
 80065bc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80065be:	197b      	adds	r3, r7, r5
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d061      	beq.n	800668a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80065c6:	197b      	adds	r3, r7, r5
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	e244      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d040      	beq.n	8006656 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80065d4:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	4b09      	ldr	r3, [pc, #36]	; (8006600 <HAL_RCC_OscConfig+0x33c>)
 80065da:	2180      	movs	r1, #128	; 0x80
 80065dc:	0049      	lsls	r1, r1, #1
 80065de:	430a      	orrs	r2, r1
 80065e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e2:	f7fe f841 	bl	8004668 <HAL_GetTick>
 80065e6:	0003      	movs	r3, r0
 80065e8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80065ea:	e019      	b.n	8006620 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065ec:	f7fe f83c 	bl	8004668 <HAL_GetTick>
 80065f0:	0002      	movs	r2, r0
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d912      	bls.n	8006620 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e22b      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
 80065fe:	46c0      	nop			; (mov r8, r8)
 8006600:	40021000 	.word	0x40021000
 8006604:	fffeffff 	.word	0xfffeffff
 8006608:	fffbffff 	.word	0xfffbffff
 800660c:	ffffe0ff 	.word	0xffffe0ff
 8006610:	0800d2fc 	.word	0x0800d2fc
 8006614:	2000001c 	.word	0x2000001c
 8006618:	20000020 	.word	0x20000020
 800661c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006620:	4bca      	ldr	r3, [pc, #808]	; (800694c <HAL_RCC_OscConfig+0x688>)
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	2380      	movs	r3, #128	; 0x80
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4013      	ands	r3, r2
 800662a:	d0df      	beq.n	80065ec <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800662c:	4bc7      	ldr	r3, [pc, #796]	; (800694c <HAL_RCC_OscConfig+0x688>)
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	4ac7      	ldr	r2, [pc, #796]	; (8006950 <HAL_RCC_OscConfig+0x68c>)
 8006632:	4013      	ands	r3, r2
 8006634:	0019      	movs	r1, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800663a:	4bc4      	ldr	r3, [pc, #784]	; (800694c <HAL_RCC_OscConfig+0x688>)
 800663c:	430a      	orrs	r2, r1
 800663e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006640:	4bc2      	ldr	r3, [pc, #776]	; (800694c <HAL_RCC_OscConfig+0x688>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	021b      	lsls	r3, r3, #8
 8006646:	0a19      	lsrs	r1, r3, #8
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	061a      	lsls	r2, r3, #24
 800664e:	4bbf      	ldr	r3, [pc, #764]	; (800694c <HAL_RCC_OscConfig+0x688>)
 8006650:	430a      	orrs	r2, r1
 8006652:	605a      	str	r2, [r3, #4]
 8006654:	e019      	b.n	800668a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006656:	4bbd      	ldr	r3, [pc, #756]	; (800694c <HAL_RCC_OscConfig+0x688>)
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	4bbc      	ldr	r3, [pc, #752]	; (800694c <HAL_RCC_OscConfig+0x688>)
 800665c:	49bd      	ldr	r1, [pc, #756]	; (8006954 <HAL_RCC_OscConfig+0x690>)
 800665e:	400a      	ands	r2, r1
 8006660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006662:	f7fe f801 	bl	8004668 <HAL_GetTick>
 8006666:	0003      	movs	r3, r0
 8006668:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800666c:	f7fd fffc 	bl	8004668 <HAL_GetTick>
 8006670:	0002      	movs	r2, r0
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b02      	cmp	r3, #2
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e1eb      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800667e:	4bb3      	ldr	r3, [pc, #716]	; (800694c <HAL_RCC_OscConfig+0x688>)
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	2380      	movs	r3, #128	; 0x80
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4013      	ands	r3, r2
 8006688:	d1f0      	bne.n	800666c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2208      	movs	r2, #8
 8006690:	4013      	ands	r3, r2
 8006692:	d036      	beq.n	8006702 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d019      	beq.n	80066d0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800669c:	4bab      	ldr	r3, [pc, #684]	; (800694c <HAL_RCC_OscConfig+0x688>)
 800669e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066a0:	4baa      	ldr	r3, [pc, #680]	; (800694c <HAL_RCC_OscConfig+0x688>)
 80066a2:	2101      	movs	r1, #1
 80066a4:	430a      	orrs	r2, r1
 80066a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066a8:	f7fd ffde 	bl	8004668 <HAL_GetTick>
 80066ac:	0003      	movs	r3, r0
 80066ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066b0:	e008      	b.n	80066c4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066b2:	f7fd ffd9 	bl	8004668 <HAL_GetTick>
 80066b6:	0002      	movs	r2, r0
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d901      	bls.n	80066c4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e1c8      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066c4:	4ba1      	ldr	r3, [pc, #644]	; (800694c <HAL_RCC_OscConfig+0x688>)
 80066c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c8:	2202      	movs	r2, #2
 80066ca:	4013      	ands	r3, r2
 80066cc:	d0f1      	beq.n	80066b2 <HAL_RCC_OscConfig+0x3ee>
 80066ce:	e018      	b.n	8006702 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066d0:	4b9e      	ldr	r3, [pc, #632]	; (800694c <HAL_RCC_OscConfig+0x688>)
 80066d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066d4:	4b9d      	ldr	r3, [pc, #628]	; (800694c <HAL_RCC_OscConfig+0x688>)
 80066d6:	2101      	movs	r1, #1
 80066d8:	438a      	bics	r2, r1
 80066da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066dc:	f7fd ffc4 	bl	8004668 <HAL_GetTick>
 80066e0:	0003      	movs	r3, r0
 80066e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066e4:	e008      	b.n	80066f8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066e6:	f7fd ffbf 	bl	8004668 <HAL_GetTick>
 80066ea:	0002      	movs	r2, r0
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d901      	bls.n	80066f8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e1ae      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066f8:	4b94      	ldr	r3, [pc, #592]	; (800694c <HAL_RCC_OscConfig+0x688>)
 80066fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fc:	2202      	movs	r2, #2
 80066fe:	4013      	ands	r3, r2
 8006700:	d1f1      	bne.n	80066e6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2204      	movs	r2, #4
 8006708:	4013      	ands	r3, r2
 800670a:	d100      	bne.n	800670e <HAL_RCC_OscConfig+0x44a>
 800670c:	e0ae      	b.n	800686c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800670e:	2023      	movs	r0, #35	; 0x23
 8006710:	183b      	adds	r3, r7, r0
 8006712:	2200      	movs	r2, #0
 8006714:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006716:	4b8d      	ldr	r3, [pc, #564]	; (800694c <HAL_RCC_OscConfig+0x688>)
 8006718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800671a:	2380      	movs	r3, #128	; 0x80
 800671c:	055b      	lsls	r3, r3, #21
 800671e:	4013      	ands	r3, r2
 8006720:	d109      	bne.n	8006736 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006722:	4b8a      	ldr	r3, [pc, #552]	; (800694c <HAL_RCC_OscConfig+0x688>)
 8006724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006726:	4b89      	ldr	r3, [pc, #548]	; (800694c <HAL_RCC_OscConfig+0x688>)
 8006728:	2180      	movs	r1, #128	; 0x80
 800672a:	0549      	lsls	r1, r1, #21
 800672c:	430a      	orrs	r2, r1
 800672e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006730:	183b      	adds	r3, r7, r0
 8006732:	2201      	movs	r2, #1
 8006734:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006736:	4b88      	ldr	r3, [pc, #544]	; (8006958 <HAL_RCC_OscConfig+0x694>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	2380      	movs	r3, #128	; 0x80
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	4013      	ands	r3, r2
 8006740:	d11a      	bne.n	8006778 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006742:	4b85      	ldr	r3, [pc, #532]	; (8006958 <HAL_RCC_OscConfig+0x694>)
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	4b84      	ldr	r3, [pc, #528]	; (8006958 <HAL_RCC_OscConfig+0x694>)
 8006748:	2180      	movs	r1, #128	; 0x80
 800674a:	0049      	lsls	r1, r1, #1
 800674c:	430a      	orrs	r2, r1
 800674e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006750:	f7fd ff8a 	bl	8004668 <HAL_GetTick>
 8006754:	0003      	movs	r3, r0
 8006756:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006758:	e008      	b.n	800676c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800675a:	f7fd ff85 	bl	8004668 <HAL_GetTick>
 800675e:	0002      	movs	r2, r0
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	2b64      	cmp	r3, #100	; 0x64
 8006766:	d901      	bls.n	800676c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e174      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800676c:	4b7a      	ldr	r3, [pc, #488]	; (8006958 <HAL_RCC_OscConfig+0x694>)
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	2380      	movs	r3, #128	; 0x80
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	4013      	ands	r3, r2
 8006776:	d0f0      	beq.n	800675a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	2380      	movs	r3, #128	; 0x80
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	429a      	cmp	r2, r3
 8006782:	d107      	bne.n	8006794 <HAL_RCC_OscConfig+0x4d0>
 8006784:	4b71      	ldr	r3, [pc, #452]	; (800694c <HAL_RCC_OscConfig+0x688>)
 8006786:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006788:	4b70      	ldr	r3, [pc, #448]	; (800694c <HAL_RCC_OscConfig+0x688>)
 800678a:	2180      	movs	r1, #128	; 0x80
 800678c:	0049      	lsls	r1, r1, #1
 800678e:	430a      	orrs	r2, r1
 8006790:	651a      	str	r2, [r3, #80]	; 0x50
 8006792:	e031      	b.n	80067f8 <HAL_RCC_OscConfig+0x534>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10c      	bne.n	80067b6 <HAL_RCC_OscConfig+0x4f2>
 800679c:	4b6b      	ldr	r3, [pc, #428]	; (800694c <HAL_RCC_OscConfig+0x688>)
 800679e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067a0:	4b6a      	ldr	r3, [pc, #424]	; (800694c <HAL_RCC_OscConfig+0x688>)
 80067a2:	496c      	ldr	r1, [pc, #432]	; (8006954 <HAL_RCC_OscConfig+0x690>)
 80067a4:	400a      	ands	r2, r1
 80067a6:	651a      	str	r2, [r3, #80]	; 0x50
 80067a8:	4b68      	ldr	r3, [pc, #416]	; (800694c <HAL_RCC_OscConfig+0x688>)
 80067aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067ac:	4b67      	ldr	r3, [pc, #412]	; (800694c <HAL_RCC_OscConfig+0x688>)
 80067ae:	496b      	ldr	r1, [pc, #428]	; (800695c <HAL_RCC_OscConfig+0x698>)
 80067b0:	400a      	ands	r2, r1
 80067b2:	651a      	str	r2, [r3, #80]	; 0x50
 80067b4:	e020      	b.n	80067f8 <HAL_RCC_OscConfig+0x534>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689a      	ldr	r2, [r3, #8]
 80067ba:	23a0      	movs	r3, #160	; 0xa0
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	429a      	cmp	r2, r3
 80067c0:	d10e      	bne.n	80067e0 <HAL_RCC_OscConfig+0x51c>
 80067c2:	4b62      	ldr	r3, [pc, #392]	; (800694c <HAL_RCC_OscConfig+0x688>)
 80067c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067c6:	4b61      	ldr	r3, [pc, #388]	; (800694c <HAL_RCC_OscConfig+0x688>)
 80067c8:	2180      	movs	r1, #128	; 0x80
 80067ca:	00c9      	lsls	r1, r1, #3
 80067cc:	430a      	orrs	r2, r1
 80067ce:	651a      	str	r2, [r3, #80]	; 0x50
 80067d0:	4b5e      	ldr	r3, [pc, #376]	; (800694c <HAL_RCC_OscConfig+0x688>)
 80067d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067d4:	4b5d      	ldr	r3, [pc, #372]	; (800694c <HAL_RCC_OscConfig+0x688>)
 80067d6:	2180      	movs	r1, #128	; 0x80
 80067d8:	0049      	lsls	r1, r1, #1
 80067da:	430a      	orrs	r2, r1
 80067dc:	651a      	str	r2, [r3, #80]	; 0x50
 80067de:	e00b      	b.n	80067f8 <HAL_RCC_OscConfig+0x534>
 80067e0:	4b5a      	ldr	r3, [pc, #360]	; (800694c <HAL_RCC_OscConfig+0x688>)
 80067e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067e4:	4b59      	ldr	r3, [pc, #356]	; (800694c <HAL_RCC_OscConfig+0x688>)
 80067e6:	495b      	ldr	r1, [pc, #364]	; (8006954 <HAL_RCC_OscConfig+0x690>)
 80067e8:	400a      	ands	r2, r1
 80067ea:	651a      	str	r2, [r3, #80]	; 0x50
 80067ec:	4b57      	ldr	r3, [pc, #348]	; (800694c <HAL_RCC_OscConfig+0x688>)
 80067ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067f0:	4b56      	ldr	r3, [pc, #344]	; (800694c <HAL_RCC_OscConfig+0x688>)
 80067f2:	495a      	ldr	r1, [pc, #360]	; (800695c <HAL_RCC_OscConfig+0x698>)
 80067f4:	400a      	ands	r2, r1
 80067f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d015      	beq.n	800682c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006800:	f7fd ff32 	bl	8004668 <HAL_GetTick>
 8006804:	0003      	movs	r3, r0
 8006806:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006808:	e009      	b.n	800681e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800680a:	f7fd ff2d 	bl	8004668 <HAL_GetTick>
 800680e:	0002      	movs	r2, r0
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	4a52      	ldr	r2, [pc, #328]	; (8006960 <HAL_RCC_OscConfig+0x69c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e11b      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800681e:	4b4b      	ldr	r3, [pc, #300]	; (800694c <HAL_RCC_OscConfig+0x688>)
 8006820:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006822:	2380      	movs	r3, #128	; 0x80
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4013      	ands	r3, r2
 8006828:	d0ef      	beq.n	800680a <HAL_RCC_OscConfig+0x546>
 800682a:	e014      	b.n	8006856 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800682c:	f7fd ff1c 	bl	8004668 <HAL_GetTick>
 8006830:	0003      	movs	r3, r0
 8006832:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006834:	e009      	b.n	800684a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006836:	f7fd ff17 	bl	8004668 <HAL_GetTick>
 800683a:	0002      	movs	r2, r0
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	4a47      	ldr	r2, [pc, #284]	; (8006960 <HAL_RCC_OscConfig+0x69c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e105      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800684a:	4b40      	ldr	r3, [pc, #256]	; (800694c <HAL_RCC_OscConfig+0x688>)
 800684c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800684e:	2380      	movs	r3, #128	; 0x80
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4013      	ands	r3, r2
 8006854:	d1ef      	bne.n	8006836 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006856:	2323      	movs	r3, #35	; 0x23
 8006858:	18fb      	adds	r3, r7, r3
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d105      	bne.n	800686c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006860:	4b3a      	ldr	r3, [pc, #232]	; (800694c <HAL_RCC_OscConfig+0x688>)
 8006862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006864:	4b39      	ldr	r3, [pc, #228]	; (800694c <HAL_RCC_OscConfig+0x688>)
 8006866:	493f      	ldr	r1, [pc, #252]	; (8006964 <HAL_RCC_OscConfig+0x6a0>)
 8006868:	400a      	ands	r2, r1
 800686a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2220      	movs	r2, #32
 8006872:	4013      	ands	r3, r2
 8006874:	d049      	beq.n	800690a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d026      	beq.n	80068cc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800687e:	4b33      	ldr	r3, [pc, #204]	; (800694c <HAL_RCC_OscConfig+0x688>)
 8006880:	689a      	ldr	r2, [r3, #8]
 8006882:	4b32      	ldr	r3, [pc, #200]	; (800694c <HAL_RCC_OscConfig+0x688>)
 8006884:	2101      	movs	r1, #1
 8006886:	430a      	orrs	r2, r1
 8006888:	609a      	str	r2, [r3, #8]
 800688a:	4b30      	ldr	r3, [pc, #192]	; (800694c <HAL_RCC_OscConfig+0x688>)
 800688c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800688e:	4b2f      	ldr	r3, [pc, #188]	; (800694c <HAL_RCC_OscConfig+0x688>)
 8006890:	2101      	movs	r1, #1
 8006892:	430a      	orrs	r2, r1
 8006894:	635a      	str	r2, [r3, #52]	; 0x34
 8006896:	4b34      	ldr	r3, [pc, #208]	; (8006968 <HAL_RCC_OscConfig+0x6a4>)
 8006898:	6a1a      	ldr	r2, [r3, #32]
 800689a:	4b33      	ldr	r3, [pc, #204]	; (8006968 <HAL_RCC_OscConfig+0x6a4>)
 800689c:	2180      	movs	r1, #128	; 0x80
 800689e:	0189      	lsls	r1, r1, #6
 80068a0:	430a      	orrs	r2, r1
 80068a2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a4:	f7fd fee0 	bl	8004668 <HAL_GetTick>
 80068a8:	0003      	movs	r3, r0
 80068aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068ac:	e008      	b.n	80068c0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068ae:	f7fd fedb 	bl	8004668 <HAL_GetTick>
 80068b2:	0002      	movs	r2, r0
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e0ca      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068c0:	4b22      	ldr	r3, [pc, #136]	; (800694c <HAL_RCC_OscConfig+0x688>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	2202      	movs	r2, #2
 80068c6:	4013      	ands	r3, r2
 80068c8:	d0f1      	beq.n	80068ae <HAL_RCC_OscConfig+0x5ea>
 80068ca:	e01e      	b.n	800690a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80068cc:	4b1f      	ldr	r3, [pc, #124]	; (800694c <HAL_RCC_OscConfig+0x688>)
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	4b1e      	ldr	r3, [pc, #120]	; (800694c <HAL_RCC_OscConfig+0x688>)
 80068d2:	2101      	movs	r1, #1
 80068d4:	438a      	bics	r2, r1
 80068d6:	609a      	str	r2, [r3, #8]
 80068d8:	4b23      	ldr	r3, [pc, #140]	; (8006968 <HAL_RCC_OscConfig+0x6a4>)
 80068da:	6a1a      	ldr	r2, [r3, #32]
 80068dc:	4b22      	ldr	r3, [pc, #136]	; (8006968 <HAL_RCC_OscConfig+0x6a4>)
 80068de:	4923      	ldr	r1, [pc, #140]	; (800696c <HAL_RCC_OscConfig+0x6a8>)
 80068e0:	400a      	ands	r2, r1
 80068e2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e4:	f7fd fec0 	bl	8004668 <HAL_GetTick>
 80068e8:	0003      	movs	r3, r0
 80068ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068ec:	e008      	b.n	8006900 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068ee:	f7fd febb 	bl	8004668 <HAL_GetTick>
 80068f2:	0002      	movs	r2, r0
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d901      	bls.n	8006900 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e0aa      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006900:	4b12      	ldr	r3, [pc, #72]	; (800694c <HAL_RCC_OscConfig+0x688>)
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	2202      	movs	r2, #2
 8006906:	4013      	ands	r3, r2
 8006908:	d1f1      	bne.n	80068ee <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690e:	2b00      	cmp	r3, #0
 8006910:	d100      	bne.n	8006914 <HAL_RCC_OscConfig+0x650>
 8006912:	e09f      	b.n	8006a54 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	2b0c      	cmp	r3, #12
 8006918:	d100      	bne.n	800691c <HAL_RCC_OscConfig+0x658>
 800691a:	e078      	b.n	8006a0e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006920:	2b02      	cmp	r3, #2
 8006922:	d159      	bne.n	80069d8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006924:	4b09      	ldr	r3, [pc, #36]	; (800694c <HAL_RCC_OscConfig+0x688>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	4b08      	ldr	r3, [pc, #32]	; (800694c <HAL_RCC_OscConfig+0x688>)
 800692a:	4911      	ldr	r1, [pc, #68]	; (8006970 <HAL_RCC_OscConfig+0x6ac>)
 800692c:	400a      	ands	r2, r1
 800692e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006930:	f7fd fe9a 	bl	8004668 <HAL_GetTick>
 8006934:	0003      	movs	r3, r0
 8006936:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006938:	e01c      	b.n	8006974 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800693a:	f7fd fe95 	bl	8004668 <HAL_GetTick>
 800693e:	0002      	movs	r2, r0
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b02      	cmp	r3, #2
 8006946:	d915      	bls.n	8006974 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e084      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
 800694c:	40021000 	.word	0x40021000
 8006950:	ffff1fff 	.word	0xffff1fff
 8006954:	fffffeff 	.word	0xfffffeff
 8006958:	40007000 	.word	0x40007000
 800695c:	fffffbff 	.word	0xfffffbff
 8006960:	00001388 	.word	0x00001388
 8006964:	efffffff 	.word	0xefffffff
 8006968:	40010000 	.word	0x40010000
 800696c:	ffffdfff 	.word	0xffffdfff
 8006970:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006974:	4b3a      	ldr	r3, [pc, #232]	; (8006a60 <HAL_RCC_OscConfig+0x79c>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	2380      	movs	r3, #128	; 0x80
 800697a:	049b      	lsls	r3, r3, #18
 800697c:	4013      	ands	r3, r2
 800697e:	d1dc      	bne.n	800693a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006980:	4b37      	ldr	r3, [pc, #220]	; (8006a60 <HAL_RCC_OscConfig+0x79c>)
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	4a37      	ldr	r2, [pc, #220]	; (8006a64 <HAL_RCC_OscConfig+0x7a0>)
 8006986:	4013      	ands	r3, r2
 8006988:	0019      	movs	r1, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006992:	431a      	orrs	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006998:	431a      	orrs	r2, r3
 800699a:	4b31      	ldr	r3, [pc, #196]	; (8006a60 <HAL_RCC_OscConfig+0x79c>)
 800699c:	430a      	orrs	r2, r1
 800699e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069a0:	4b2f      	ldr	r3, [pc, #188]	; (8006a60 <HAL_RCC_OscConfig+0x79c>)
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	4b2e      	ldr	r3, [pc, #184]	; (8006a60 <HAL_RCC_OscConfig+0x79c>)
 80069a6:	2180      	movs	r1, #128	; 0x80
 80069a8:	0449      	lsls	r1, r1, #17
 80069aa:	430a      	orrs	r2, r1
 80069ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ae:	f7fd fe5b 	bl	8004668 <HAL_GetTick>
 80069b2:	0003      	movs	r3, r0
 80069b4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80069b6:	e008      	b.n	80069ca <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069b8:	f7fd fe56 	bl	8004668 <HAL_GetTick>
 80069bc:	0002      	movs	r2, r0
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e045      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80069ca:	4b25      	ldr	r3, [pc, #148]	; (8006a60 <HAL_RCC_OscConfig+0x79c>)
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	2380      	movs	r3, #128	; 0x80
 80069d0:	049b      	lsls	r3, r3, #18
 80069d2:	4013      	ands	r3, r2
 80069d4:	d0f0      	beq.n	80069b8 <HAL_RCC_OscConfig+0x6f4>
 80069d6:	e03d      	b.n	8006a54 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069d8:	4b21      	ldr	r3, [pc, #132]	; (8006a60 <HAL_RCC_OscConfig+0x79c>)
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	4b20      	ldr	r3, [pc, #128]	; (8006a60 <HAL_RCC_OscConfig+0x79c>)
 80069de:	4922      	ldr	r1, [pc, #136]	; (8006a68 <HAL_RCC_OscConfig+0x7a4>)
 80069e0:	400a      	ands	r2, r1
 80069e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069e4:	f7fd fe40 	bl	8004668 <HAL_GetTick>
 80069e8:	0003      	movs	r3, r0
 80069ea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80069ec:	e008      	b.n	8006a00 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069ee:	f7fd fe3b 	bl	8004668 <HAL_GetTick>
 80069f2:	0002      	movs	r2, r0
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d901      	bls.n	8006a00 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e02a      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006a00:	4b17      	ldr	r3, [pc, #92]	; (8006a60 <HAL_RCC_OscConfig+0x79c>)
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	2380      	movs	r3, #128	; 0x80
 8006a06:	049b      	lsls	r3, r3, #18
 8006a08:	4013      	ands	r3, r2
 8006a0a:	d1f0      	bne.n	80069ee <HAL_RCC_OscConfig+0x72a>
 8006a0c:	e022      	b.n	8006a54 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d101      	bne.n	8006a1a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e01d      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006a1a:	4b11      	ldr	r3, [pc, #68]	; (8006a60 <HAL_RCC_OscConfig+0x79c>)
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	2380      	movs	r3, #128	; 0x80
 8006a24:	025b      	lsls	r3, r3, #9
 8006a26:	401a      	ands	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d10f      	bne.n	8006a50 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	23f0      	movs	r3, #240	; 0xf0
 8006a34:	039b      	lsls	r3, r3, #14
 8006a36:	401a      	ands	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d107      	bne.n	8006a50 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006a40:	69ba      	ldr	r2, [r7, #24]
 8006a42:	23c0      	movs	r3, #192	; 0xc0
 8006a44:	041b      	lsls	r3, r3, #16
 8006a46:	401a      	ands	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d001      	beq.n	8006a54 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e000      	b.n	8006a56 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	0018      	movs	r0, r3
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	b00a      	add	sp, #40	; 0x28
 8006a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8006a5e:	46c0      	nop			; (mov r8, r8)
 8006a60:	40021000 	.word	0x40021000
 8006a64:	ff02ffff 	.word	0xff02ffff
 8006a68:	feffffff 	.word	0xfeffffff

08006a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a6c:	b5b0      	push	{r4, r5, r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e128      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a80:	4b96      	ldr	r3, [pc, #600]	; (8006cdc <HAL_RCC_ClockConfig+0x270>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2201      	movs	r2, #1
 8006a86:	4013      	ands	r3, r2
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d91e      	bls.n	8006acc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a8e:	4b93      	ldr	r3, [pc, #588]	; (8006cdc <HAL_RCC_ClockConfig+0x270>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2201      	movs	r2, #1
 8006a94:	4393      	bics	r3, r2
 8006a96:	0019      	movs	r1, r3
 8006a98:	4b90      	ldr	r3, [pc, #576]	; (8006cdc <HAL_RCC_ClockConfig+0x270>)
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006aa0:	f7fd fde2 	bl	8004668 <HAL_GetTick>
 8006aa4:	0003      	movs	r3, r0
 8006aa6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa8:	e009      	b.n	8006abe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006aaa:	f7fd fddd 	bl	8004668 <HAL_GetTick>
 8006aae:	0002      	movs	r2, r0
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	4a8a      	ldr	r2, [pc, #552]	; (8006ce0 <HAL_RCC_ClockConfig+0x274>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e109      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006abe:	4b87      	ldr	r3, [pc, #540]	; (8006cdc <HAL_RCC_ClockConfig+0x270>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d1ee      	bne.n	8006aaa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	d009      	beq.n	8006aea <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ad6:	4b83      	ldr	r3, [pc, #524]	; (8006ce4 <HAL_RCC_ClockConfig+0x278>)
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	22f0      	movs	r2, #240	; 0xf0
 8006adc:	4393      	bics	r3, r2
 8006ade:	0019      	movs	r1, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	4b7f      	ldr	r3, [pc, #508]	; (8006ce4 <HAL_RCC_ClockConfig+0x278>)
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2201      	movs	r2, #1
 8006af0:	4013      	ands	r3, r2
 8006af2:	d100      	bne.n	8006af6 <HAL_RCC_ClockConfig+0x8a>
 8006af4:	e089      	b.n	8006c0a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d107      	bne.n	8006b0e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006afe:	4b79      	ldr	r3, [pc, #484]	; (8006ce4 <HAL_RCC_ClockConfig+0x278>)
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	2380      	movs	r3, #128	; 0x80
 8006b04:	029b      	lsls	r3, r3, #10
 8006b06:	4013      	ands	r3, r2
 8006b08:	d120      	bne.n	8006b4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e0e1      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d107      	bne.n	8006b26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b16:	4b73      	ldr	r3, [pc, #460]	; (8006ce4 <HAL_RCC_ClockConfig+0x278>)
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	2380      	movs	r3, #128	; 0x80
 8006b1c:	049b      	lsls	r3, r3, #18
 8006b1e:	4013      	ands	r3, r2
 8006b20:	d114      	bne.n	8006b4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e0d5      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d106      	bne.n	8006b3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b2e:	4b6d      	ldr	r3, [pc, #436]	; (8006ce4 <HAL_RCC_ClockConfig+0x278>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2204      	movs	r2, #4
 8006b34:	4013      	ands	r3, r2
 8006b36:	d109      	bne.n	8006b4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e0ca      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006b3c:	4b69      	ldr	r3, [pc, #420]	; (8006ce4 <HAL_RCC_ClockConfig+0x278>)
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	2380      	movs	r3, #128	; 0x80
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4013      	ands	r3, r2
 8006b46:	d101      	bne.n	8006b4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e0c2      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b4c:	4b65      	ldr	r3, [pc, #404]	; (8006ce4 <HAL_RCC_ClockConfig+0x278>)
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	2203      	movs	r2, #3
 8006b52:	4393      	bics	r3, r2
 8006b54:	0019      	movs	r1, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	4b62      	ldr	r3, [pc, #392]	; (8006ce4 <HAL_RCC_ClockConfig+0x278>)
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b60:	f7fd fd82 	bl	8004668 <HAL_GetTick>
 8006b64:	0003      	movs	r3, r0
 8006b66:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d111      	bne.n	8006b94 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b70:	e009      	b.n	8006b86 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b72:	f7fd fd79 	bl	8004668 <HAL_GetTick>
 8006b76:	0002      	movs	r2, r0
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	4a58      	ldr	r2, [pc, #352]	; (8006ce0 <HAL_RCC_ClockConfig+0x274>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d901      	bls.n	8006b86 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e0a5      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b86:	4b57      	ldr	r3, [pc, #348]	; (8006ce4 <HAL_RCC_ClockConfig+0x278>)
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	220c      	movs	r2, #12
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	d1ef      	bne.n	8006b72 <HAL_RCC_ClockConfig+0x106>
 8006b92:	e03a      	b.n	8006c0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b03      	cmp	r3, #3
 8006b9a:	d111      	bne.n	8006bc0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b9c:	e009      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b9e:	f7fd fd63 	bl	8004668 <HAL_GetTick>
 8006ba2:	0002      	movs	r2, r0
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	4a4d      	ldr	r2, [pc, #308]	; (8006ce0 <HAL_RCC_ClockConfig+0x274>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e08f      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bb2:	4b4c      	ldr	r3, [pc, #304]	; (8006ce4 <HAL_RCC_ClockConfig+0x278>)
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	220c      	movs	r2, #12
 8006bb8:	4013      	ands	r3, r2
 8006bba:	2b0c      	cmp	r3, #12
 8006bbc:	d1ef      	bne.n	8006b9e <HAL_RCC_ClockConfig+0x132>
 8006bbe:	e024      	b.n	8006c0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d11b      	bne.n	8006c00 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bc8:	e009      	b.n	8006bde <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bca:	f7fd fd4d 	bl	8004668 <HAL_GetTick>
 8006bce:	0002      	movs	r2, r0
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	4a42      	ldr	r2, [pc, #264]	; (8006ce0 <HAL_RCC_ClockConfig+0x274>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e079      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bde:	4b41      	ldr	r3, [pc, #260]	; (8006ce4 <HAL_RCC_ClockConfig+0x278>)
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	220c      	movs	r2, #12
 8006be4:	4013      	ands	r3, r2
 8006be6:	2b04      	cmp	r3, #4
 8006be8:	d1ef      	bne.n	8006bca <HAL_RCC_ClockConfig+0x15e>
 8006bea:	e00e      	b.n	8006c0a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bec:	f7fd fd3c 	bl	8004668 <HAL_GetTick>
 8006bf0:	0002      	movs	r2, r0
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	4a3a      	ldr	r2, [pc, #232]	; (8006ce0 <HAL_RCC_ClockConfig+0x274>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d901      	bls.n	8006c00 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e068      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006c00:	4b38      	ldr	r3, [pc, #224]	; (8006ce4 <HAL_RCC_ClockConfig+0x278>)
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	220c      	movs	r2, #12
 8006c06:	4013      	ands	r3, r2
 8006c08:	d1f0      	bne.n	8006bec <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c0a:	4b34      	ldr	r3, [pc, #208]	; (8006cdc <HAL_RCC_ClockConfig+0x270>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	4013      	ands	r3, r2
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d21e      	bcs.n	8006c56 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c18:	4b30      	ldr	r3, [pc, #192]	; (8006cdc <HAL_RCC_ClockConfig+0x270>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	4393      	bics	r3, r2
 8006c20:	0019      	movs	r1, r3
 8006c22:	4b2e      	ldr	r3, [pc, #184]	; (8006cdc <HAL_RCC_ClockConfig+0x270>)
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c2a:	f7fd fd1d 	bl	8004668 <HAL_GetTick>
 8006c2e:	0003      	movs	r3, r0
 8006c30:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c32:	e009      	b.n	8006c48 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c34:	f7fd fd18 	bl	8004668 <HAL_GetTick>
 8006c38:	0002      	movs	r2, r0
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	4a28      	ldr	r2, [pc, #160]	; (8006ce0 <HAL_RCC_ClockConfig+0x274>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e044      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c48:	4b24      	ldr	r3, [pc, #144]	; (8006cdc <HAL_RCC_ClockConfig+0x270>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	4013      	ands	r3, r2
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d1ee      	bne.n	8006c34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2204      	movs	r2, #4
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	d009      	beq.n	8006c74 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c60:	4b20      	ldr	r3, [pc, #128]	; (8006ce4 <HAL_RCC_ClockConfig+0x278>)
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	4a20      	ldr	r2, [pc, #128]	; (8006ce8 <HAL_RCC_ClockConfig+0x27c>)
 8006c66:	4013      	ands	r3, r2
 8006c68:	0019      	movs	r1, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	4b1d      	ldr	r3, [pc, #116]	; (8006ce4 <HAL_RCC_ClockConfig+0x278>)
 8006c70:	430a      	orrs	r2, r1
 8006c72:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2208      	movs	r2, #8
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	d00a      	beq.n	8006c94 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c7e:	4b19      	ldr	r3, [pc, #100]	; (8006ce4 <HAL_RCC_ClockConfig+0x278>)
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	4a1a      	ldr	r2, [pc, #104]	; (8006cec <HAL_RCC_ClockConfig+0x280>)
 8006c84:	4013      	ands	r3, r2
 8006c86:	0019      	movs	r1, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	00da      	lsls	r2, r3, #3
 8006c8e:	4b15      	ldr	r3, [pc, #84]	; (8006ce4 <HAL_RCC_ClockConfig+0x278>)
 8006c90:	430a      	orrs	r2, r1
 8006c92:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c94:	f000 f832 	bl	8006cfc <HAL_RCC_GetSysClockFreq>
 8006c98:	0001      	movs	r1, r0
 8006c9a:	4b12      	ldr	r3, [pc, #72]	; (8006ce4 <HAL_RCC_ClockConfig+0x278>)
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	091b      	lsrs	r3, r3, #4
 8006ca0:	220f      	movs	r2, #15
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	4a12      	ldr	r2, [pc, #72]	; (8006cf0 <HAL_RCC_ClockConfig+0x284>)
 8006ca6:	5cd3      	ldrb	r3, [r2, r3]
 8006ca8:	000a      	movs	r2, r1
 8006caa:	40da      	lsrs	r2, r3
 8006cac:	4b11      	ldr	r3, [pc, #68]	; (8006cf4 <HAL_RCC_ClockConfig+0x288>)
 8006cae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006cb0:	4b11      	ldr	r3, [pc, #68]	; (8006cf8 <HAL_RCC_ClockConfig+0x28c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	250b      	movs	r5, #11
 8006cb6:	197c      	adds	r4, r7, r5
 8006cb8:	0018      	movs	r0, r3
 8006cba:	f7fd fc8f 	bl	80045dc <HAL_InitTick>
 8006cbe:	0003      	movs	r3, r0
 8006cc0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006cc2:	197b      	adds	r3, r7, r5
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8006cca:	197b      	adds	r3, r7, r5
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	e000      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	0018      	movs	r0, r3
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	b004      	add	sp, #16
 8006cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8006cda:	46c0      	nop			; (mov r8, r8)
 8006cdc:	40022000 	.word	0x40022000
 8006ce0:	00001388 	.word	0x00001388
 8006ce4:	40021000 	.word	0x40021000
 8006ce8:	fffff8ff 	.word	0xfffff8ff
 8006cec:	ffffc7ff 	.word	0xffffc7ff
 8006cf0:	0800d2fc 	.word	0x0800d2fc
 8006cf4:	2000001c 	.word	0x2000001c
 8006cf8:	20000020 	.word	0x20000020

08006cfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cfc:	b5b0      	push	{r4, r5, r7, lr}
 8006cfe:	b08e      	sub	sp, #56	; 0x38
 8006d00:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006d02:	4b4c      	ldr	r3, [pc, #304]	; (8006e34 <HAL_RCC_GetSysClockFreq+0x138>)
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d0a:	230c      	movs	r3, #12
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	2b0c      	cmp	r3, #12
 8006d10:	d014      	beq.n	8006d3c <HAL_RCC_GetSysClockFreq+0x40>
 8006d12:	d900      	bls.n	8006d16 <HAL_RCC_GetSysClockFreq+0x1a>
 8006d14:	e07b      	b.n	8006e0e <HAL_RCC_GetSysClockFreq+0x112>
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	d002      	beq.n	8006d20 <HAL_RCC_GetSysClockFreq+0x24>
 8006d1a:	2b08      	cmp	r3, #8
 8006d1c:	d00b      	beq.n	8006d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d1e:	e076      	b.n	8006e0e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006d20:	4b44      	ldr	r3, [pc, #272]	; (8006e34 <HAL_RCC_GetSysClockFreq+0x138>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2210      	movs	r2, #16
 8006d26:	4013      	ands	r3, r2
 8006d28:	d002      	beq.n	8006d30 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006d2a:	4b43      	ldr	r3, [pc, #268]	; (8006e38 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006d2c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006d2e:	e07c      	b.n	8006e2a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006d30:	4b42      	ldr	r3, [pc, #264]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x140>)
 8006d32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006d34:	e079      	b.n	8006e2a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006d36:	4b42      	ldr	r3, [pc, #264]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x144>)
 8006d38:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006d3a:	e076      	b.n	8006e2a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3e:	0c9a      	lsrs	r2, r3, #18
 8006d40:	230f      	movs	r3, #15
 8006d42:	401a      	ands	r2, r3
 8006d44:	4b3f      	ldr	r3, [pc, #252]	; (8006e44 <HAL_RCC_GetSysClockFreq+0x148>)
 8006d46:	5c9b      	ldrb	r3, [r3, r2]
 8006d48:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4c:	0d9a      	lsrs	r2, r3, #22
 8006d4e:	2303      	movs	r3, #3
 8006d50:	4013      	ands	r3, r2
 8006d52:	3301      	adds	r3, #1
 8006d54:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d56:	4b37      	ldr	r3, [pc, #220]	; (8006e34 <HAL_RCC_GetSysClockFreq+0x138>)
 8006d58:	68da      	ldr	r2, [r3, #12]
 8006d5a:	2380      	movs	r3, #128	; 0x80
 8006d5c:	025b      	lsls	r3, r3, #9
 8006d5e:	4013      	ands	r3, r2
 8006d60:	d01a      	beq.n	8006d98 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	61bb      	str	r3, [r7, #24]
 8006d66:	2300      	movs	r3, #0
 8006d68:	61fb      	str	r3, [r7, #28]
 8006d6a:	4a35      	ldr	r2, [pc, #212]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x144>)
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	69b8      	ldr	r0, [r7, #24]
 8006d70:	69f9      	ldr	r1, [r7, #28]
 8006d72:	f7f9 fbf3 	bl	800055c <__aeabi_lmul>
 8006d76:	0002      	movs	r2, r0
 8006d78:	000b      	movs	r3, r1
 8006d7a:	0010      	movs	r0, r2
 8006d7c:	0019      	movs	r1, r3
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	2300      	movs	r3, #0
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f7f9 fbc7 	bl	800051c <__aeabi_uldivmod>
 8006d8e:	0002      	movs	r2, r0
 8006d90:	000b      	movs	r3, r1
 8006d92:	0013      	movs	r3, r2
 8006d94:	637b      	str	r3, [r7, #52]	; 0x34
 8006d96:	e037      	b.n	8006e08 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006d98:	4b26      	ldr	r3, [pc, #152]	; (8006e34 <HAL_RCC_GetSysClockFreq+0x138>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2210      	movs	r2, #16
 8006d9e:	4013      	ands	r3, r2
 8006da0:	d01a      	beq.n	8006dd8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	60bb      	str	r3, [r7, #8]
 8006da6:	2300      	movs	r3, #0
 8006da8:	60fb      	str	r3, [r7, #12]
 8006daa:	4a23      	ldr	r2, [pc, #140]	; (8006e38 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006dac:	2300      	movs	r3, #0
 8006dae:	68b8      	ldr	r0, [r7, #8]
 8006db0:	68f9      	ldr	r1, [r7, #12]
 8006db2:	f7f9 fbd3 	bl	800055c <__aeabi_lmul>
 8006db6:	0002      	movs	r2, r0
 8006db8:	000b      	movs	r3, r1
 8006dba:	0010      	movs	r0, r2
 8006dbc:	0019      	movs	r1, r3
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	603b      	str	r3, [r7, #0]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	607b      	str	r3, [r7, #4]
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f7f9 fba7 	bl	800051c <__aeabi_uldivmod>
 8006dce:	0002      	movs	r2, r0
 8006dd0:	000b      	movs	r3, r1
 8006dd2:	0013      	movs	r3, r2
 8006dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8006dd6:	e017      	b.n	8006e08 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	0018      	movs	r0, r3
 8006ddc:	2300      	movs	r3, #0
 8006dde:	0019      	movs	r1, r3
 8006de0:	4a16      	ldr	r2, [pc, #88]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x140>)
 8006de2:	2300      	movs	r3, #0
 8006de4:	f7f9 fbba 	bl	800055c <__aeabi_lmul>
 8006de8:	0002      	movs	r2, r0
 8006dea:	000b      	movs	r3, r1
 8006dec:	0010      	movs	r0, r2
 8006dee:	0019      	movs	r1, r3
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	001c      	movs	r4, r3
 8006df4:	2300      	movs	r3, #0
 8006df6:	001d      	movs	r5, r3
 8006df8:	0022      	movs	r2, r4
 8006dfa:	002b      	movs	r3, r5
 8006dfc:	f7f9 fb8e 	bl	800051c <__aeabi_uldivmod>
 8006e00:	0002      	movs	r2, r0
 8006e02:	000b      	movs	r3, r1
 8006e04:	0013      	movs	r3, r2
 8006e06:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8006e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006e0c:	e00d      	b.n	8006e2a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006e0e:	4b09      	ldr	r3, [pc, #36]	; (8006e34 <HAL_RCC_GetSysClockFreq+0x138>)
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	0b5b      	lsrs	r3, r3, #13
 8006e14:	2207      	movs	r2, #7
 8006e16:	4013      	ands	r3, r2
 8006e18:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	2280      	movs	r2, #128	; 0x80
 8006e20:	0212      	lsls	r2, r2, #8
 8006e22:	409a      	lsls	r2, r3
 8006e24:	0013      	movs	r3, r2
 8006e26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006e28:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	b00e      	add	sp, #56	; 0x38
 8006e32:	bdb0      	pop	{r4, r5, r7, pc}
 8006e34:	40021000 	.word	0x40021000
 8006e38:	003d0900 	.word	0x003d0900
 8006e3c:	00f42400 	.word	0x00f42400
 8006e40:	007a1200 	.word	0x007a1200
 8006e44:	0800d314 	.word	0x0800d314

08006e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e4c:	4b02      	ldr	r3, [pc, #8]	; (8006e58 <HAL_RCC_GetHCLKFreq+0x10>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
}
 8006e50:	0018      	movs	r0, r3
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	46c0      	nop			; (mov r8, r8)
 8006e58:	2000001c 	.word	0x2000001c

08006e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e60:	f7ff fff2 	bl	8006e48 <HAL_RCC_GetHCLKFreq>
 8006e64:	0001      	movs	r1, r0
 8006e66:	4b06      	ldr	r3, [pc, #24]	; (8006e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	0a1b      	lsrs	r3, r3, #8
 8006e6c:	2207      	movs	r2, #7
 8006e6e:	4013      	ands	r3, r2
 8006e70:	4a04      	ldr	r2, [pc, #16]	; (8006e84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e72:	5cd3      	ldrb	r3, [r2, r3]
 8006e74:	40d9      	lsrs	r1, r3
 8006e76:	000b      	movs	r3, r1
}
 8006e78:	0018      	movs	r0, r3
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	40021000 	.word	0x40021000
 8006e84:	0800d30c 	.word	0x0800d30c

08006e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e8c:	f7ff ffdc 	bl	8006e48 <HAL_RCC_GetHCLKFreq>
 8006e90:	0001      	movs	r1, r0
 8006e92:	4b06      	ldr	r3, [pc, #24]	; (8006eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	0adb      	lsrs	r3, r3, #11
 8006e98:	2207      	movs	r2, #7
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	4a04      	ldr	r2, [pc, #16]	; (8006eb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e9e:	5cd3      	ldrb	r3, [r2, r3]
 8006ea0:	40d9      	lsrs	r1, r3
 8006ea2:	000b      	movs	r3, r1
}
 8006ea4:	0018      	movs	r0, r3
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	46c0      	nop			; (mov r8, r8)
 8006eac:	40021000 	.word	0x40021000
 8006eb0:	0800d30c 	.word	0x0800d30c

08006eb4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006ebc:	2317      	movs	r3, #23
 8006ebe:	18fb      	adds	r3, r7, r3
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2220      	movs	r2, #32
 8006eca:	4013      	ands	r3, r2
 8006ecc:	d106      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	2380      	movs	r3, #128	; 0x80
 8006ed4:	011b      	lsls	r3, r3, #4
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	d100      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x28>
 8006eda:	e104      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006edc:	4bb9      	ldr	r3, [pc, #740]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ee0:	2380      	movs	r3, #128	; 0x80
 8006ee2:	055b      	lsls	r3, r3, #21
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	d10a      	bne.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ee8:	4bb6      	ldr	r3, [pc, #728]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eec:	4bb5      	ldr	r3, [pc, #724]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006eee:	2180      	movs	r1, #128	; 0x80
 8006ef0:	0549      	lsls	r1, r1, #21
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006ef6:	2317      	movs	r3, #23
 8006ef8:	18fb      	adds	r3, r7, r3
 8006efa:	2201      	movs	r2, #1
 8006efc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006efe:	4bb2      	ldr	r3, [pc, #712]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	2380      	movs	r3, #128	; 0x80
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	4013      	ands	r3, r2
 8006f08:	d11a      	bne.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f0a:	4baf      	ldr	r3, [pc, #700]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4bae      	ldr	r3, [pc, #696]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006f10:	2180      	movs	r1, #128	; 0x80
 8006f12:	0049      	lsls	r1, r1, #1
 8006f14:	430a      	orrs	r2, r1
 8006f16:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f18:	f7fd fba6 	bl	8004668 <HAL_GetTick>
 8006f1c:	0003      	movs	r3, r0
 8006f1e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f20:	e008      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f22:	f7fd fba1 	bl	8004668 <HAL_GetTick>
 8006f26:	0002      	movs	r2, r0
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b64      	cmp	r3, #100	; 0x64
 8006f2e:	d901      	bls.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e143      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f34:	4ba4      	ldr	r3, [pc, #656]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	2380      	movs	r3, #128	; 0x80
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	d0f0      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006f40:	4ba0      	ldr	r3, [pc, #640]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	23c0      	movs	r3, #192	; 0xc0
 8006f46:	039b      	lsls	r3, r3, #14
 8006f48:	4013      	ands	r3, r2
 8006f4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	23c0      	movs	r3, #192	; 0xc0
 8006f52:	039b      	lsls	r3, r3, #14
 8006f54:	4013      	ands	r3, r2
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d107      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	23c0      	movs	r3, #192	; 0xc0
 8006f62:	039b      	lsls	r3, r3, #14
 8006f64:	4013      	ands	r3, r2
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d013      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	23c0      	movs	r3, #192	; 0xc0
 8006f72:	029b      	lsls	r3, r3, #10
 8006f74:	401a      	ands	r2, r3
 8006f76:	23c0      	movs	r3, #192	; 0xc0
 8006f78:	029b      	lsls	r3, r3, #10
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d10a      	bne.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f7e:	4b91      	ldr	r3, [pc, #580]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	2380      	movs	r3, #128	; 0x80
 8006f84:	029b      	lsls	r3, r3, #10
 8006f86:	401a      	ands	r2, r3
 8006f88:	2380      	movs	r3, #128	; 0x80
 8006f8a:	029b      	lsls	r3, r3, #10
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d101      	bne.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e113      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006f94:	4b8b      	ldr	r3, [pc, #556]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006f96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f98:	23c0      	movs	r3, #192	; 0xc0
 8006f9a:	029b      	lsls	r3, r3, #10
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d049      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	23c0      	movs	r3, #192	; 0xc0
 8006fac:	029b      	lsls	r3, r3, #10
 8006fae:	4013      	ands	r3, r2
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d004      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	d10d      	bne.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	23c0      	movs	r3, #192	; 0xc0
 8006fc6:	029b      	lsls	r3, r3, #10
 8006fc8:	4013      	ands	r3, r2
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d034      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	2380      	movs	r3, #128	; 0x80
 8006fd6:	011b      	lsls	r3, r3, #4
 8006fd8:	4013      	ands	r3, r2
 8006fda:	d02e      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006fdc:	4b79      	ldr	r3, [pc, #484]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe0:	4a7a      	ldr	r2, [pc, #488]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006fe6:	4b77      	ldr	r3, [pc, #476]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006fe8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fea:	4b76      	ldr	r3, [pc, #472]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006fec:	2180      	movs	r1, #128	; 0x80
 8006fee:	0309      	lsls	r1, r1, #12
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ff4:	4b73      	ldr	r3, [pc, #460]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006ff6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ff8:	4b72      	ldr	r3, [pc, #456]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006ffa:	4975      	ldr	r1, [pc, #468]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006ffc:	400a      	ands	r2, r1
 8006ffe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8007000:	4b70      	ldr	r3, [pc, #448]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	2380      	movs	r3, #128	; 0x80
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	4013      	ands	r3, r2
 800700e:	d014      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007010:	f7fd fb2a 	bl	8004668 <HAL_GetTick>
 8007014:	0003      	movs	r3, r0
 8007016:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007018:	e009      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800701a:	f7fd fb25 	bl	8004668 <HAL_GetTick>
 800701e:	0002      	movs	r2, r0
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	4a6b      	ldr	r2, [pc, #428]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d901      	bls.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e0c6      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800702e:	4b65      	ldr	r3, [pc, #404]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007030:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007032:	2380      	movs	r3, #128	; 0x80
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4013      	ands	r3, r2
 8007038:	d0ef      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	2380      	movs	r3, #128	; 0x80
 8007040:	011b      	lsls	r3, r3, #4
 8007042:	4013      	ands	r3, r2
 8007044:	d01f      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689a      	ldr	r2, [r3, #8]
 800704a:	23c0      	movs	r3, #192	; 0xc0
 800704c:	029b      	lsls	r3, r3, #10
 800704e:	401a      	ands	r2, r3
 8007050:	23c0      	movs	r3, #192	; 0xc0
 8007052:	029b      	lsls	r3, r3, #10
 8007054:	429a      	cmp	r2, r3
 8007056:	d10c      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8007058:	4b5a      	ldr	r3, [pc, #360]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a5e      	ldr	r2, [pc, #376]	; (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800705e:	4013      	ands	r3, r2
 8007060:	0019      	movs	r1, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	23c0      	movs	r3, #192	; 0xc0
 8007068:	039b      	lsls	r3, r3, #14
 800706a:	401a      	ands	r2, r3
 800706c:	4b55      	ldr	r3, [pc, #340]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800706e:	430a      	orrs	r2, r1
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	4b54      	ldr	r3, [pc, #336]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007074:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689a      	ldr	r2, [r3, #8]
 800707a:	23c0      	movs	r3, #192	; 0xc0
 800707c:	029b      	lsls	r3, r3, #10
 800707e:	401a      	ands	r2, r3
 8007080:	4b50      	ldr	r3, [pc, #320]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007082:	430a      	orrs	r2, r1
 8007084:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2220      	movs	r2, #32
 800708c:	4013      	ands	r3, r2
 800708e:	d01f      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	23c0      	movs	r3, #192	; 0xc0
 8007096:	029b      	lsls	r3, r3, #10
 8007098:	401a      	ands	r2, r3
 800709a:	23c0      	movs	r3, #192	; 0xc0
 800709c:	029b      	lsls	r3, r3, #10
 800709e:	429a      	cmp	r2, r3
 80070a0:	d10c      	bne.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x208>
 80070a2:	4b48      	ldr	r3, [pc, #288]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a4c      	ldr	r2, [pc, #304]	; (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80070a8:	4013      	ands	r3, r2
 80070aa:	0019      	movs	r1, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	23c0      	movs	r3, #192	; 0xc0
 80070b2:	039b      	lsls	r3, r3, #14
 80070b4:	401a      	ands	r2, r3
 80070b6:	4b43      	ldr	r3, [pc, #268]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80070b8:	430a      	orrs	r2, r1
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	4b41      	ldr	r3, [pc, #260]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80070be:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	23c0      	movs	r3, #192	; 0xc0
 80070c6:	029b      	lsls	r3, r3, #10
 80070c8:	401a      	ands	r2, r3
 80070ca:	4b3e      	ldr	r3, [pc, #248]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80070cc:	430a      	orrs	r2, r1
 80070ce:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80070d0:	2317      	movs	r3, #23
 80070d2:	18fb      	adds	r3, r7, r3
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d105      	bne.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070da:	4b3a      	ldr	r3, [pc, #232]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80070dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070de:	4b39      	ldr	r3, [pc, #228]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80070e0:	493e      	ldr	r1, [pc, #248]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80070e2:	400a      	ands	r2, r1
 80070e4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2201      	movs	r2, #1
 80070ec:	4013      	ands	r3, r2
 80070ee:	d009      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070f0:	4b34      	ldr	r3, [pc, #208]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80070f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f4:	2203      	movs	r2, #3
 80070f6:	4393      	bics	r3, r2
 80070f8:	0019      	movs	r1, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	4b31      	ldr	r3, [pc, #196]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007100:	430a      	orrs	r2, r1
 8007102:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2202      	movs	r2, #2
 800710a:	4013      	ands	r3, r2
 800710c:	d009      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800710e:	4b2d      	ldr	r3, [pc, #180]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007112:	220c      	movs	r2, #12
 8007114:	4393      	bics	r3, r2
 8007116:	0019      	movs	r1, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	691a      	ldr	r2, [r3, #16]
 800711c:	4b29      	ldr	r3, [pc, #164]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800711e:	430a      	orrs	r2, r1
 8007120:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2204      	movs	r2, #4
 8007128:	4013      	ands	r3, r2
 800712a:	d009      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800712c:	4b25      	ldr	r3, [pc, #148]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800712e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007130:	4a2b      	ldr	r2, [pc, #172]	; (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8007132:	4013      	ands	r3, r2
 8007134:	0019      	movs	r1, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	695a      	ldr	r2, [r3, #20]
 800713a:	4b22      	ldr	r3, [pc, #136]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800713c:	430a      	orrs	r2, r1
 800713e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2208      	movs	r2, #8
 8007146:	4013      	ands	r3, r2
 8007148:	d009      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800714a:	4b1e      	ldr	r3, [pc, #120]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800714c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714e:	4a25      	ldr	r2, [pc, #148]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007150:	4013      	ands	r3, r2
 8007152:	0019      	movs	r1, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	699a      	ldr	r2, [r3, #24]
 8007158:	4b1a      	ldr	r3, [pc, #104]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800715a:	430a      	orrs	r2, r1
 800715c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	2380      	movs	r3, #128	; 0x80
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	4013      	ands	r3, r2
 8007168:	d009      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800716a:	4b16      	ldr	r3, [pc, #88]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800716c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800716e:	4a17      	ldr	r2, [pc, #92]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8007170:	4013      	ands	r3, r2
 8007172:	0019      	movs	r1, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	69da      	ldr	r2, [r3, #28]
 8007178:	4b12      	ldr	r3, [pc, #72]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800717a:	430a      	orrs	r2, r1
 800717c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2240      	movs	r2, #64	; 0x40
 8007184:	4013      	ands	r3, r2
 8007186:	d009      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007188:	4b0e      	ldr	r3, [pc, #56]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800718a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718c:	4a16      	ldr	r2, [pc, #88]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800718e:	4013      	ands	r3, r2
 8007190:	0019      	movs	r1, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007196:	4b0b      	ldr	r3, [pc, #44]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007198:	430a      	orrs	r2, r1
 800719a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2280      	movs	r2, #128	; 0x80
 80071a2:	4013      	ands	r3, r2
 80071a4:	d009      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80071a6:	4b07      	ldr	r3, [pc, #28]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80071a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071aa:	4a10      	ldr	r2, [pc, #64]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071ac:	4013      	ands	r3, r2
 80071ae:	0019      	movs	r1, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a1a      	ldr	r2, [r3, #32]
 80071b4:	4b03      	ldr	r3, [pc, #12]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80071b6:	430a      	orrs	r2, r1
 80071b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	0018      	movs	r0, r3
 80071be:	46bd      	mov	sp, r7
 80071c0:	b006      	add	sp, #24
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	40021000 	.word	0x40021000
 80071c8:	40007000 	.word	0x40007000
 80071cc:	fffcffff 	.word	0xfffcffff
 80071d0:	fff7ffff 	.word	0xfff7ffff
 80071d4:	00001388 	.word	0x00001388
 80071d8:	ffcfffff 	.word	0xffcfffff
 80071dc:	efffffff 	.word	0xefffffff
 80071e0:	fffff3ff 	.word	0xfffff3ff
 80071e4:	ffffcfff 	.word	0xffffcfff
 80071e8:	fbffffff 	.word	0xfbffffff
 80071ec:	fff3ffff 	.word	0xfff3ffff

080071f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e032      	b.n	8007268 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2239      	movs	r2, #57	; 0x39
 8007206:	5c9b      	ldrb	r3, [r3, r2]
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d107      	bne.n	800721e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2238      	movs	r2, #56	; 0x38
 8007212:	2100      	movs	r1, #0
 8007214:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	0018      	movs	r0, r3
 800721a:	f7fd f831 	bl	8004280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2239      	movs	r2, #57	; 0x39
 8007222:	2102      	movs	r1, #2
 8007224:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3304      	adds	r3, #4
 800722e:	0019      	movs	r1, r3
 8007230:	0010      	movs	r0, r2
 8007232:	f000 f977 	bl	8007524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	223e      	movs	r2, #62	; 0x3e
 800723a:	2101      	movs	r1, #1
 800723c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	223a      	movs	r2, #58	; 0x3a
 8007242:	2101      	movs	r1, #1
 8007244:	5499      	strb	r1, [r3, r2]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	223b      	movs	r2, #59	; 0x3b
 800724a:	2101      	movs	r1, #1
 800724c:	5499      	strb	r1, [r3, r2]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	223c      	movs	r2, #60	; 0x3c
 8007252:	2101      	movs	r1, #1
 8007254:	5499      	strb	r1, [r3, r2]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	223d      	movs	r2, #61	; 0x3d
 800725a:	2101      	movs	r1, #1
 800725c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2239      	movs	r2, #57	; 0x39
 8007262:	2101      	movs	r1, #1
 8007264:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	0018      	movs	r0, r3
 800726a:	46bd      	mov	sp, r7
 800726c:	b002      	add	sp, #8
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2239      	movs	r2, #57	; 0x39
 800727c:	5c9b      	ldrb	r3, [r3, r2]
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b01      	cmp	r3, #1
 8007282:	d001      	beq.n	8007288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e03b      	b.n	8007300 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2239      	movs	r2, #57	; 0x39
 800728c:	2102      	movs	r1, #2
 800728e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2101      	movs	r1, #1
 800729c:	430a      	orrs	r2, r1
 800729e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	2380      	movs	r3, #128	; 0x80
 80072a6:	05db      	lsls	r3, r3, #23
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d00e      	beq.n	80072ca <HAL_TIM_Base_Start_IT+0x5a>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a15      	ldr	r2, [pc, #84]	; (8007308 <HAL_TIM_Base_Start_IT+0x98>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d009      	beq.n	80072ca <HAL_TIM_Base_Start_IT+0x5a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a14      	ldr	r2, [pc, #80]	; (800730c <HAL_TIM_Base_Start_IT+0x9c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d004      	beq.n	80072ca <HAL_TIM_Base_Start_IT+0x5a>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a12      	ldr	r2, [pc, #72]	; (8007310 <HAL_TIM_Base_Start_IT+0xa0>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d111      	bne.n	80072ee <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	2207      	movs	r2, #7
 80072d2:	4013      	ands	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b06      	cmp	r3, #6
 80072da:	d010      	beq.n	80072fe <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2101      	movs	r1, #1
 80072e8:	430a      	orrs	r2, r1
 80072ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ec:	e007      	b.n	80072fe <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2101      	movs	r1, #1
 80072fa:	430a      	orrs	r2, r1
 80072fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	0018      	movs	r0, r3
 8007302:	46bd      	mov	sp, r7
 8007304:	b004      	add	sp, #16
 8007306:	bd80      	pop	{r7, pc}
 8007308:	40000400 	.word	0x40000400
 800730c:	40010800 	.word	0x40010800
 8007310:	40011400 	.word	0x40011400

08007314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	2202      	movs	r2, #2
 8007324:	4013      	ands	r3, r2
 8007326:	2b02      	cmp	r3, #2
 8007328:	d124      	bne.n	8007374 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	2202      	movs	r2, #2
 8007332:	4013      	ands	r3, r2
 8007334:	2b02      	cmp	r3, #2
 8007336:	d11d      	bne.n	8007374 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2203      	movs	r2, #3
 800733e:	4252      	negs	r2, r2
 8007340:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	2203      	movs	r2, #3
 8007350:	4013      	ands	r3, r2
 8007352:	d004      	beq.n	800735e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	0018      	movs	r0, r3
 8007358:	f000 f8cc 	bl	80074f4 <HAL_TIM_IC_CaptureCallback>
 800735c:	e007      	b.n	800736e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	0018      	movs	r0, r3
 8007362:	f000 f8bf 	bl	80074e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	0018      	movs	r0, r3
 800736a:	f000 f8cb 	bl	8007504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2204      	movs	r2, #4
 800737c:	4013      	ands	r3, r2
 800737e:	2b04      	cmp	r3, #4
 8007380:	d125      	bne.n	80073ce <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	2204      	movs	r2, #4
 800738a:	4013      	ands	r3, r2
 800738c:	2b04      	cmp	r3, #4
 800738e:	d11e      	bne.n	80073ce <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2205      	movs	r2, #5
 8007396:	4252      	negs	r2, r2
 8007398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2202      	movs	r2, #2
 800739e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699a      	ldr	r2, [r3, #24]
 80073a6:	23c0      	movs	r3, #192	; 0xc0
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4013      	ands	r3, r2
 80073ac:	d004      	beq.n	80073b8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	0018      	movs	r0, r3
 80073b2:	f000 f89f 	bl	80074f4 <HAL_TIM_IC_CaptureCallback>
 80073b6:	e007      	b.n	80073c8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	0018      	movs	r0, r3
 80073bc:	f000 f892 	bl	80074e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	0018      	movs	r0, r3
 80073c4:	f000 f89e 	bl	8007504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	2208      	movs	r2, #8
 80073d6:	4013      	ands	r3, r2
 80073d8:	2b08      	cmp	r3, #8
 80073da:	d124      	bne.n	8007426 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	2208      	movs	r2, #8
 80073e4:	4013      	ands	r3, r2
 80073e6:	2b08      	cmp	r3, #8
 80073e8:	d11d      	bne.n	8007426 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2209      	movs	r2, #9
 80073f0:	4252      	negs	r2, r2
 80073f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2204      	movs	r2, #4
 80073f8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	2203      	movs	r2, #3
 8007402:	4013      	ands	r3, r2
 8007404:	d004      	beq.n	8007410 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	0018      	movs	r0, r3
 800740a:	f000 f873 	bl	80074f4 <HAL_TIM_IC_CaptureCallback>
 800740e:	e007      	b.n	8007420 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	0018      	movs	r0, r3
 8007414:	f000 f866 	bl	80074e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	0018      	movs	r0, r3
 800741c:	f000 f872 	bl	8007504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	2210      	movs	r2, #16
 800742e:	4013      	ands	r3, r2
 8007430:	2b10      	cmp	r3, #16
 8007432:	d125      	bne.n	8007480 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	2210      	movs	r2, #16
 800743c:	4013      	ands	r3, r2
 800743e:	2b10      	cmp	r3, #16
 8007440:	d11e      	bne.n	8007480 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2211      	movs	r2, #17
 8007448:	4252      	negs	r2, r2
 800744a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2208      	movs	r2, #8
 8007450:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	69da      	ldr	r2, [r3, #28]
 8007458:	23c0      	movs	r3, #192	; 0xc0
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4013      	ands	r3, r2
 800745e:	d004      	beq.n	800746a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	0018      	movs	r0, r3
 8007464:	f000 f846 	bl	80074f4 <HAL_TIM_IC_CaptureCallback>
 8007468:	e007      	b.n	800747a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	0018      	movs	r0, r3
 800746e:	f000 f839 	bl	80074e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	0018      	movs	r0, r3
 8007476:	f000 f845 	bl	8007504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	2201      	movs	r2, #1
 8007488:	4013      	ands	r3, r2
 800748a:	2b01      	cmp	r3, #1
 800748c:	d10f      	bne.n	80074ae <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	2201      	movs	r2, #1
 8007496:	4013      	ands	r3, r2
 8007498:	2b01      	cmp	r3, #1
 800749a:	d108      	bne.n	80074ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2202      	movs	r2, #2
 80074a2:	4252      	negs	r2, r2
 80074a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	0018      	movs	r0, r3
 80074aa:	f7fc f917 	bl	80036dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	2240      	movs	r2, #64	; 0x40
 80074b6:	4013      	ands	r3, r2
 80074b8:	2b40      	cmp	r3, #64	; 0x40
 80074ba:	d10f      	bne.n	80074dc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	2240      	movs	r2, #64	; 0x40
 80074c4:	4013      	ands	r3, r2
 80074c6:	2b40      	cmp	r3, #64	; 0x40
 80074c8:	d108      	bne.n	80074dc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2241      	movs	r2, #65	; 0x41
 80074d0:	4252      	negs	r2, r2
 80074d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	0018      	movs	r0, r3
 80074d8:	f000 f81c 	bl	8007514 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074dc:	46c0      	nop			; (mov r8, r8)
 80074de:	46bd      	mov	sp, r7
 80074e0:	b002      	add	sp, #8
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074ec:	46c0      	nop			; (mov r8, r8)
 80074ee:	46bd      	mov	sp, r7
 80074f0:	b002      	add	sp, #8
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074fc:	46c0      	nop			; (mov r8, r8)
 80074fe:	46bd      	mov	sp, r7
 8007500:	b002      	add	sp, #8
 8007502:	bd80      	pop	{r7, pc}

08007504 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800750c:	46c0      	nop			; (mov r8, r8)
 800750e:	46bd      	mov	sp, r7
 8007510:	b002      	add	sp, #8
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800751c:	46c0      	nop			; (mov r8, r8)
 800751e:	46bd      	mov	sp, r7
 8007520:	b002      	add	sp, #8
 8007522:	bd80      	pop	{r7, pc}

08007524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	2380      	movs	r3, #128	; 0x80
 8007538:	05db      	lsls	r3, r3, #23
 800753a:	429a      	cmp	r2, r3
 800753c:	d00b      	beq.n	8007556 <TIM_Base_SetConfig+0x32>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a23      	ldr	r2, [pc, #140]	; (80075d0 <TIM_Base_SetConfig+0xac>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d007      	beq.n	8007556 <TIM_Base_SetConfig+0x32>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a22      	ldr	r2, [pc, #136]	; (80075d4 <TIM_Base_SetConfig+0xb0>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d003      	beq.n	8007556 <TIM_Base_SetConfig+0x32>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a21      	ldr	r2, [pc, #132]	; (80075d8 <TIM_Base_SetConfig+0xb4>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d108      	bne.n	8007568 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2270      	movs	r2, #112	; 0x70
 800755a:	4393      	bics	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	4313      	orrs	r3, r2
 8007566:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	2380      	movs	r3, #128	; 0x80
 800756c:	05db      	lsls	r3, r3, #23
 800756e:	429a      	cmp	r2, r3
 8007570:	d00b      	beq.n	800758a <TIM_Base_SetConfig+0x66>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a16      	ldr	r2, [pc, #88]	; (80075d0 <TIM_Base_SetConfig+0xac>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d007      	beq.n	800758a <TIM_Base_SetConfig+0x66>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a15      	ldr	r2, [pc, #84]	; (80075d4 <TIM_Base_SetConfig+0xb0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d003      	beq.n	800758a <TIM_Base_SetConfig+0x66>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a14      	ldr	r2, [pc, #80]	; (80075d8 <TIM_Base_SetConfig+0xb4>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d108      	bne.n	800759c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	4a13      	ldr	r2, [pc, #76]	; (80075dc <TIM_Base_SetConfig+0xb8>)
 800758e:	4013      	ands	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	4313      	orrs	r3, r2
 800759a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2280      	movs	r2, #128	; 0x80
 80075a0:	4393      	bics	r3, r2
 80075a2:	001a      	movs	r2, r3
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	689a      	ldr	r2, [r3, #8]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	615a      	str	r2, [r3, #20]
}
 80075c8:	46c0      	nop			; (mov r8, r8)
 80075ca:	46bd      	mov	sp, r7
 80075cc:	b004      	add	sp, #16
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	40000400 	.word	0x40000400
 80075d4:	40010800 	.word	0x40010800
 80075d8:	40011400 	.word	0x40011400
 80075dc:	fffffcff 	.word	0xfffffcff

080075e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2238      	movs	r2, #56	; 0x38
 80075ee:	5c9b      	ldrb	r3, [r3, r2]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d101      	bne.n	80075f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075f4:	2302      	movs	r3, #2
 80075f6:	e047      	b.n	8007688 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2238      	movs	r2, #56	; 0x38
 80075fc:	2101      	movs	r1, #1
 80075fe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2239      	movs	r2, #57	; 0x39
 8007604:	2102      	movs	r1, #2
 8007606:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2270      	movs	r2, #112	; 0x70
 800761c:	4393      	bics	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	2380      	movs	r3, #128	; 0x80
 8007638:	05db      	lsls	r3, r3, #23
 800763a:	429a      	cmp	r2, r3
 800763c:	d00e      	beq.n	800765c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a13      	ldr	r2, [pc, #76]	; (8007690 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d009      	beq.n	800765c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a11      	ldr	r2, [pc, #68]	; (8007694 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d004      	beq.n	800765c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a10      	ldr	r2, [pc, #64]	; (8007698 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d10c      	bne.n	8007676 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2280      	movs	r2, #128	; 0x80
 8007660:	4393      	bics	r3, r2
 8007662:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	4313      	orrs	r3, r2
 800766c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2239      	movs	r2, #57	; 0x39
 800767a:	2101      	movs	r1, #1
 800767c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2238      	movs	r2, #56	; 0x38
 8007682:	2100      	movs	r1, #0
 8007684:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	0018      	movs	r0, r3
 800768a:	46bd      	mov	sp, r7
 800768c:	b004      	add	sp, #16
 800768e:	bd80      	pop	{r7, pc}
 8007690:	40000400 	.word	0x40000400
 8007694:	40010800 	.word	0x40010800
 8007698:	40011400 	.word	0x40011400

0800769c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e044      	b.n	8007738 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d107      	bne.n	80076c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2278      	movs	r2, #120	; 0x78
 80076ba:	2100      	movs	r1, #0
 80076bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	0018      	movs	r0, r3
 80076c2:	f7fc fdfd 	bl	80042c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2224      	movs	r2, #36	; 0x24
 80076ca:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2101      	movs	r1, #1
 80076d8:	438a      	bics	r2, r1
 80076da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	0018      	movs	r0, r3
 80076e0:	f000 f8d0 	bl	8007884 <UART_SetConfig>
 80076e4:	0003      	movs	r3, r0
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d101      	bne.n	80076ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e024      	b.n	8007738 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	0018      	movs	r0, r3
 80076fa:	f000 fb61 	bl	8007dc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	490d      	ldr	r1, [pc, #52]	; (8007740 <HAL_UART_Init+0xa4>)
 800770a:	400a      	ands	r2, r1
 800770c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	212a      	movs	r1, #42	; 0x2a
 800771a:	438a      	bics	r2, r1
 800771c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2101      	movs	r1, #1
 800772a:	430a      	orrs	r2, r1
 800772c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	0018      	movs	r0, r3
 8007732:	f000 fbf9 	bl	8007f28 <UART_CheckIdleState>
 8007736:	0003      	movs	r3, r0
}
 8007738:	0018      	movs	r0, r3
 800773a:	46bd      	mov	sp, r7
 800773c:	b002      	add	sp, #8
 800773e:	bd80      	pop	{r7, pc}
 8007740:	ffffb7ff 	.word	0xffffb7ff

08007744 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08a      	sub	sp, #40	; 0x28
 8007748:	af02      	add	r7, sp, #8
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	1dbb      	adds	r3, r7, #6
 8007752:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007758:	2b20      	cmp	r3, #32
 800775a:	d000      	beq.n	800775e <HAL_UART_Transmit+0x1a>
 800775c:	e08c      	b.n	8007878 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d003      	beq.n	800776c <HAL_UART_Transmit+0x28>
 8007764:	1dbb      	adds	r3, r7, #6
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e084      	b.n	800787a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	689a      	ldr	r2, [r3, #8]
 8007774:	2380      	movs	r3, #128	; 0x80
 8007776:	015b      	lsls	r3, r3, #5
 8007778:	429a      	cmp	r2, r3
 800777a:	d109      	bne.n	8007790 <HAL_UART_Transmit+0x4c>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d105      	bne.n	8007790 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2201      	movs	r2, #1
 8007788:	4013      	ands	r3, r2
 800778a:	d001      	beq.n	8007790 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e074      	b.n	800787a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2284      	movs	r2, #132	; 0x84
 8007794:	2100      	movs	r1, #0
 8007796:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2221      	movs	r2, #33	; 0x21
 800779c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800779e:	f7fc ff63 	bl	8004668 <HAL_GetTick>
 80077a2:	0003      	movs	r3, r0
 80077a4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	1dba      	adds	r2, r7, #6
 80077aa:	2150      	movs	r1, #80	; 0x50
 80077ac:	8812      	ldrh	r2, [r2, #0]
 80077ae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	1dba      	adds	r2, r7, #6
 80077b4:	2152      	movs	r1, #82	; 0x52
 80077b6:	8812      	ldrh	r2, [r2, #0]
 80077b8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	689a      	ldr	r2, [r3, #8]
 80077be:	2380      	movs	r3, #128	; 0x80
 80077c0:	015b      	lsls	r3, r3, #5
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d108      	bne.n	80077d8 <HAL_UART_Transmit+0x94>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d104      	bne.n	80077d8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	61bb      	str	r3, [r7, #24]
 80077d6:	e003      	b.n	80077e0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077dc:	2300      	movs	r3, #0
 80077de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077e0:	e02f      	b.n	8007842 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	0013      	movs	r3, r2
 80077ec:	2200      	movs	r2, #0
 80077ee:	2180      	movs	r1, #128	; 0x80
 80077f0:	f000 fc42 	bl	8008078 <UART_WaitOnFlagUntilTimeout>
 80077f4:	1e03      	subs	r3, r0, #0
 80077f6:	d004      	beq.n	8007802 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2220      	movs	r2, #32
 80077fc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e03b      	b.n	800787a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10b      	bne.n	8007820 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	001a      	movs	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	05d2      	lsls	r2, r2, #23
 8007814:	0dd2      	lsrs	r2, r2, #23
 8007816:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	3302      	adds	r3, #2
 800781c:	61bb      	str	r3, [r7, #24]
 800781e:	e007      	b.n	8007830 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	781a      	ldrb	r2, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	3301      	adds	r3, #1
 800782e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2252      	movs	r2, #82	; 0x52
 8007834:	5a9b      	ldrh	r3, [r3, r2]
 8007836:	b29b      	uxth	r3, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	b299      	uxth	r1, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2252      	movs	r2, #82	; 0x52
 8007840:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2252      	movs	r2, #82	; 0x52
 8007846:	5a9b      	ldrh	r3, [r3, r2]
 8007848:	b29b      	uxth	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1c9      	bne.n	80077e2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	0013      	movs	r3, r2
 8007858:	2200      	movs	r2, #0
 800785a:	2140      	movs	r1, #64	; 0x40
 800785c:	f000 fc0c 	bl	8008078 <UART_WaitOnFlagUntilTimeout>
 8007860:	1e03      	subs	r3, r0, #0
 8007862:	d004      	beq.n	800786e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2220      	movs	r2, #32
 8007868:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e005      	b.n	800787a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2220      	movs	r2, #32
 8007872:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007874:	2300      	movs	r3, #0
 8007876:	e000      	b.n	800787a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007878:	2302      	movs	r3, #2
  }
}
 800787a:	0018      	movs	r0, r3
 800787c:	46bd      	mov	sp, r7
 800787e:	b008      	add	sp, #32
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007884:	b5b0      	push	{r4, r5, r7, lr}
 8007886:	b08e      	sub	sp, #56	; 0x38
 8007888:	af00      	add	r7, sp, #0
 800788a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800788c:	231a      	movs	r3, #26
 800788e:	2218      	movs	r2, #24
 8007890:	189b      	adds	r3, r3, r2
 8007892:	19db      	adds	r3, r3, r7
 8007894:	2200      	movs	r2, #0
 8007896:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	689a      	ldr	r2, [r3, #8]
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	431a      	orrs	r2, r3
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	431a      	orrs	r2, r3
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4ac3      	ldr	r2, [pc, #780]	; (8007bc4 <UART_SetConfig+0x340>)
 80078b8:	4013      	ands	r3, r2
 80078ba:	0019      	movs	r1, r3
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078c2:	430a      	orrs	r2, r1
 80078c4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	4abe      	ldr	r2, [pc, #760]	; (8007bc8 <UART_SetConfig+0x344>)
 80078ce:	4013      	ands	r3, r2
 80078d0:	0019      	movs	r1, r3
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	68da      	ldr	r2, [r3, #12]
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4ab8      	ldr	r2, [pc, #736]	; (8007bcc <UART_SetConfig+0x348>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d004      	beq.n	80078f8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078f4:	4313      	orrs	r3, r2
 80078f6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	4ab4      	ldr	r2, [pc, #720]	; (8007bd0 <UART_SetConfig+0x34c>)
 8007900:	4013      	ands	r3, r2
 8007902:	0019      	movs	r1, r3
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800790a:	430a      	orrs	r2, r1
 800790c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4ab0      	ldr	r2, [pc, #704]	; (8007bd4 <UART_SetConfig+0x350>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d131      	bne.n	800797c <UART_SetConfig+0xf8>
 8007918:	4baf      	ldr	r3, [pc, #700]	; (8007bd8 <UART_SetConfig+0x354>)
 800791a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800791c:	2203      	movs	r2, #3
 800791e:	4013      	ands	r3, r2
 8007920:	2b03      	cmp	r3, #3
 8007922:	d01d      	beq.n	8007960 <UART_SetConfig+0xdc>
 8007924:	d823      	bhi.n	800796e <UART_SetConfig+0xea>
 8007926:	2b02      	cmp	r3, #2
 8007928:	d00c      	beq.n	8007944 <UART_SetConfig+0xc0>
 800792a:	d820      	bhi.n	800796e <UART_SetConfig+0xea>
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <UART_SetConfig+0xb2>
 8007930:	2b01      	cmp	r3, #1
 8007932:	d00e      	beq.n	8007952 <UART_SetConfig+0xce>
 8007934:	e01b      	b.n	800796e <UART_SetConfig+0xea>
 8007936:	231b      	movs	r3, #27
 8007938:	2218      	movs	r2, #24
 800793a:	189b      	adds	r3, r3, r2
 800793c:	19db      	adds	r3, r3, r7
 800793e:	2201      	movs	r2, #1
 8007940:	701a      	strb	r2, [r3, #0]
 8007942:	e0b4      	b.n	8007aae <UART_SetConfig+0x22a>
 8007944:	231b      	movs	r3, #27
 8007946:	2218      	movs	r2, #24
 8007948:	189b      	adds	r3, r3, r2
 800794a:	19db      	adds	r3, r3, r7
 800794c:	2202      	movs	r2, #2
 800794e:	701a      	strb	r2, [r3, #0]
 8007950:	e0ad      	b.n	8007aae <UART_SetConfig+0x22a>
 8007952:	231b      	movs	r3, #27
 8007954:	2218      	movs	r2, #24
 8007956:	189b      	adds	r3, r3, r2
 8007958:	19db      	adds	r3, r3, r7
 800795a:	2204      	movs	r2, #4
 800795c:	701a      	strb	r2, [r3, #0]
 800795e:	e0a6      	b.n	8007aae <UART_SetConfig+0x22a>
 8007960:	231b      	movs	r3, #27
 8007962:	2218      	movs	r2, #24
 8007964:	189b      	adds	r3, r3, r2
 8007966:	19db      	adds	r3, r3, r7
 8007968:	2208      	movs	r2, #8
 800796a:	701a      	strb	r2, [r3, #0]
 800796c:	e09f      	b.n	8007aae <UART_SetConfig+0x22a>
 800796e:	231b      	movs	r3, #27
 8007970:	2218      	movs	r2, #24
 8007972:	189b      	adds	r3, r3, r2
 8007974:	19db      	adds	r3, r3, r7
 8007976:	2210      	movs	r2, #16
 8007978:	701a      	strb	r2, [r3, #0]
 800797a:	e098      	b.n	8007aae <UART_SetConfig+0x22a>
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a96      	ldr	r2, [pc, #600]	; (8007bdc <UART_SetConfig+0x358>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d131      	bne.n	80079ea <UART_SetConfig+0x166>
 8007986:	4b94      	ldr	r3, [pc, #592]	; (8007bd8 <UART_SetConfig+0x354>)
 8007988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800798a:	220c      	movs	r2, #12
 800798c:	4013      	ands	r3, r2
 800798e:	2b0c      	cmp	r3, #12
 8007990:	d01d      	beq.n	80079ce <UART_SetConfig+0x14a>
 8007992:	d823      	bhi.n	80079dc <UART_SetConfig+0x158>
 8007994:	2b08      	cmp	r3, #8
 8007996:	d00c      	beq.n	80079b2 <UART_SetConfig+0x12e>
 8007998:	d820      	bhi.n	80079dc <UART_SetConfig+0x158>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <UART_SetConfig+0x120>
 800799e:	2b04      	cmp	r3, #4
 80079a0:	d00e      	beq.n	80079c0 <UART_SetConfig+0x13c>
 80079a2:	e01b      	b.n	80079dc <UART_SetConfig+0x158>
 80079a4:	231b      	movs	r3, #27
 80079a6:	2218      	movs	r2, #24
 80079a8:	189b      	adds	r3, r3, r2
 80079aa:	19db      	adds	r3, r3, r7
 80079ac:	2200      	movs	r2, #0
 80079ae:	701a      	strb	r2, [r3, #0]
 80079b0:	e07d      	b.n	8007aae <UART_SetConfig+0x22a>
 80079b2:	231b      	movs	r3, #27
 80079b4:	2218      	movs	r2, #24
 80079b6:	189b      	adds	r3, r3, r2
 80079b8:	19db      	adds	r3, r3, r7
 80079ba:	2202      	movs	r2, #2
 80079bc:	701a      	strb	r2, [r3, #0]
 80079be:	e076      	b.n	8007aae <UART_SetConfig+0x22a>
 80079c0:	231b      	movs	r3, #27
 80079c2:	2218      	movs	r2, #24
 80079c4:	189b      	adds	r3, r3, r2
 80079c6:	19db      	adds	r3, r3, r7
 80079c8:	2204      	movs	r2, #4
 80079ca:	701a      	strb	r2, [r3, #0]
 80079cc:	e06f      	b.n	8007aae <UART_SetConfig+0x22a>
 80079ce:	231b      	movs	r3, #27
 80079d0:	2218      	movs	r2, #24
 80079d2:	189b      	adds	r3, r3, r2
 80079d4:	19db      	adds	r3, r3, r7
 80079d6:	2208      	movs	r2, #8
 80079d8:	701a      	strb	r2, [r3, #0]
 80079da:	e068      	b.n	8007aae <UART_SetConfig+0x22a>
 80079dc:	231b      	movs	r3, #27
 80079de:	2218      	movs	r2, #24
 80079e0:	189b      	adds	r3, r3, r2
 80079e2:	19db      	adds	r3, r3, r7
 80079e4:	2210      	movs	r2, #16
 80079e6:	701a      	strb	r2, [r3, #0]
 80079e8:	e061      	b.n	8007aae <UART_SetConfig+0x22a>
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a7c      	ldr	r2, [pc, #496]	; (8007be0 <UART_SetConfig+0x35c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d106      	bne.n	8007a02 <UART_SetConfig+0x17e>
 80079f4:	231b      	movs	r3, #27
 80079f6:	2218      	movs	r2, #24
 80079f8:	189b      	adds	r3, r3, r2
 80079fa:	19db      	adds	r3, r3, r7
 80079fc:	2200      	movs	r2, #0
 80079fe:	701a      	strb	r2, [r3, #0]
 8007a00:	e055      	b.n	8007aae <UART_SetConfig+0x22a>
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a77      	ldr	r2, [pc, #476]	; (8007be4 <UART_SetConfig+0x360>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d106      	bne.n	8007a1a <UART_SetConfig+0x196>
 8007a0c:	231b      	movs	r3, #27
 8007a0e:	2218      	movs	r2, #24
 8007a10:	189b      	adds	r3, r3, r2
 8007a12:	19db      	adds	r3, r3, r7
 8007a14:	2200      	movs	r2, #0
 8007a16:	701a      	strb	r2, [r3, #0]
 8007a18:	e049      	b.n	8007aae <UART_SetConfig+0x22a>
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a6b      	ldr	r2, [pc, #428]	; (8007bcc <UART_SetConfig+0x348>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d13e      	bne.n	8007aa2 <UART_SetConfig+0x21e>
 8007a24:	4b6c      	ldr	r3, [pc, #432]	; (8007bd8 <UART_SetConfig+0x354>)
 8007a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a28:	23c0      	movs	r3, #192	; 0xc0
 8007a2a:	011b      	lsls	r3, r3, #4
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	22c0      	movs	r2, #192	; 0xc0
 8007a30:	0112      	lsls	r2, r2, #4
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d027      	beq.n	8007a86 <UART_SetConfig+0x202>
 8007a36:	22c0      	movs	r2, #192	; 0xc0
 8007a38:	0112      	lsls	r2, r2, #4
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d82a      	bhi.n	8007a94 <UART_SetConfig+0x210>
 8007a3e:	2280      	movs	r2, #128	; 0x80
 8007a40:	0112      	lsls	r2, r2, #4
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d011      	beq.n	8007a6a <UART_SetConfig+0x1e6>
 8007a46:	2280      	movs	r2, #128	; 0x80
 8007a48:	0112      	lsls	r2, r2, #4
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d822      	bhi.n	8007a94 <UART_SetConfig+0x210>
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d004      	beq.n	8007a5c <UART_SetConfig+0x1d8>
 8007a52:	2280      	movs	r2, #128	; 0x80
 8007a54:	00d2      	lsls	r2, r2, #3
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d00e      	beq.n	8007a78 <UART_SetConfig+0x1f4>
 8007a5a:	e01b      	b.n	8007a94 <UART_SetConfig+0x210>
 8007a5c:	231b      	movs	r3, #27
 8007a5e:	2218      	movs	r2, #24
 8007a60:	189b      	adds	r3, r3, r2
 8007a62:	19db      	adds	r3, r3, r7
 8007a64:	2200      	movs	r2, #0
 8007a66:	701a      	strb	r2, [r3, #0]
 8007a68:	e021      	b.n	8007aae <UART_SetConfig+0x22a>
 8007a6a:	231b      	movs	r3, #27
 8007a6c:	2218      	movs	r2, #24
 8007a6e:	189b      	adds	r3, r3, r2
 8007a70:	19db      	adds	r3, r3, r7
 8007a72:	2202      	movs	r2, #2
 8007a74:	701a      	strb	r2, [r3, #0]
 8007a76:	e01a      	b.n	8007aae <UART_SetConfig+0x22a>
 8007a78:	231b      	movs	r3, #27
 8007a7a:	2218      	movs	r2, #24
 8007a7c:	189b      	adds	r3, r3, r2
 8007a7e:	19db      	adds	r3, r3, r7
 8007a80:	2204      	movs	r2, #4
 8007a82:	701a      	strb	r2, [r3, #0]
 8007a84:	e013      	b.n	8007aae <UART_SetConfig+0x22a>
 8007a86:	231b      	movs	r3, #27
 8007a88:	2218      	movs	r2, #24
 8007a8a:	189b      	adds	r3, r3, r2
 8007a8c:	19db      	adds	r3, r3, r7
 8007a8e:	2208      	movs	r2, #8
 8007a90:	701a      	strb	r2, [r3, #0]
 8007a92:	e00c      	b.n	8007aae <UART_SetConfig+0x22a>
 8007a94:	231b      	movs	r3, #27
 8007a96:	2218      	movs	r2, #24
 8007a98:	189b      	adds	r3, r3, r2
 8007a9a:	19db      	adds	r3, r3, r7
 8007a9c:	2210      	movs	r2, #16
 8007a9e:	701a      	strb	r2, [r3, #0]
 8007aa0:	e005      	b.n	8007aae <UART_SetConfig+0x22a>
 8007aa2:	231b      	movs	r3, #27
 8007aa4:	2218      	movs	r2, #24
 8007aa6:	189b      	adds	r3, r3, r2
 8007aa8:	19db      	adds	r3, r3, r7
 8007aaa:	2210      	movs	r2, #16
 8007aac:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a46      	ldr	r2, [pc, #280]	; (8007bcc <UART_SetConfig+0x348>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d000      	beq.n	8007aba <UART_SetConfig+0x236>
 8007ab8:	e09a      	b.n	8007bf0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007aba:	231b      	movs	r3, #27
 8007abc:	2218      	movs	r2, #24
 8007abe:	189b      	adds	r3, r3, r2
 8007ac0:	19db      	adds	r3, r3, r7
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	2b08      	cmp	r3, #8
 8007ac6:	d01d      	beq.n	8007b04 <UART_SetConfig+0x280>
 8007ac8:	dc20      	bgt.n	8007b0c <UART_SetConfig+0x288>
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	d015      	beq.n	8007afa <UART_SetConfig+0x276>
 8007ace:	dc1d      	bgt.n	8007b0c <UART_SetConfig+0x288>
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <UART_SetConfig+0x256>
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d005      	beq.n	8007ae4 <UART_SetConfig+0x260>
 8007ad8:	e018      	b.n	8007b0c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ada:	f7ff f9bf 	bl	8006e5c <HAL_RCC_GetPCLK1Freq>
 8007ade:	0003      	movs	r3, r0
 8007ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ae2:	e01c      	b.n	8007b1e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ae4:	4b3c      	ldr	r3, [pc, #240]	; (8007bd8 <UART_SetConfig+0x354>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2210      	movs	r2, #16
 8007aea:	4013      	ands	r3, r2
 8007aec:	d002      	beq.n	8007af4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007aee:	4b3e      	ldr	r3, [pc, #248]	; (8007be8 <UART_SetConfig+0x364>)
 8007af0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007af2:	e014      	b.n	8007b1e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8007af4:	4b3d      	ldr	r3, [pc, #244]	; (8007bec <UART_SetConfig+0x368>)
 8007af6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007af8:	e011      	b.n	8007b1e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007afa:	f7ff f8ff 	bl	8006cfc <HAL_RCC_GetSysClockFreq>
 8007afe:	0003      	movs	r3, r0
 8007b00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b02:	e00c      	b.n	8007b1e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b04:	2380      	movs	r3, #128	; 0x80
 8007b06:	021b      	lsls	r3, r3, #8
 8007b08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b0a:	e008      	b.n	8007b1e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007b10:	231a      	movs	r3, #26
 8007b12:	2218      	movs	r2, #24
 8007b14:	189b      	adds	r3, r3, r2
 8007b16:	19db      	adds	r3, r3, r7
 8007b18:	2201      	movs	r2, #1
 8007b1a:	701a      	strb	r2, [r3, #0]
        break;
 8007b1c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d100      	bne.n	8007b26 <UART_SetConfig+0x2a2>
 8007b24:	e133      	b.n	8007d8e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	685a      	ldr	r2, [r3, #4]
 8007b2a:	0013      	movs	r3, r2
 8007b2c:	005b      	lsls	r3, r3, #1
 8007b2e:	189b      	adds	r3, r3, r2
 8007b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d305      	bcc.n	8007b42 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d906      	bls.n	8007b50 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8007b42:	231a      	movs	r3, #26
 8007b44:	2218      	movs	r2, #24
 8007b46:	189b      	adds	r3, r3, r2
 8007b48:	19db      	adds	r3, r3, r7
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	701a      	strb	r2, [r3, #0]
 8007b4e:	e11e      	b.n	8007d8e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b52:	613b      	str	r3, [r7, #16]
 8007b54:	2300      	movs	r3, #0
 8007b56:	617b      	str	r3, [r7, #20]
 8007b58:	6939      	ldr	r1, [r7, #16]
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	000b      	movs	r3, r1
 8007b5e:	0e1b      	lsrs	r3, r3, #24
 8007b60:	0010      	movs	r0, r2
 8007b62:	0205      	lsls	r5, r0, #8
 8007b64:	431d      	orrs	r5, r3
 8007b66:	000b      	movs	r3, r1
 8007b68:	021c      	lsls	r4, r3, #8
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	085b      	lsrs	r3, r3, #1
 8007b70:	60bb      	str	r3, [r7, #8]
 8007b72:	2300      	movs	r3, #0
 8007b74:	60fb      	str	r3, [r7, #12]
 8007b76:	68b8      	ldr	r0, [r7, #8]
 8007b78:	68f9      	ldr	r1, [r7, #12]
 8007b7a:	1900      	adds	r0, r0, r4
 8007b7c:	4169      	adcs	r1, r5
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	603b      	str	r3, [r7, #0]
 8007b84:	2300      	movs	r3, #0
 8007b86:	607b      	str	r3, [r7, #4]
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f7f8 fcc6 	bl	800051c <__aeabi_uldivmod>
 8007b90:	0002      	movs	r2, r0
 8007b92:	000b      	movs	r3, r1
 8007b94:	0013      	movs	r3, r2
 8007b96:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b9a:	23c0      	movs	r3, #192	; 0xc0
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d309      	bcc.n	8007bb6 <UART_SetConfig+0x332>
 8007ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ba4:	2380      	movs	r3, #128	; 0x80
 8007ba6:	035b      	lsls	r3, r3, #13
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d204      	bcs.n	8007bb6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bb2:	60da      	str	r2, [r3, #12]
 8007bb4:	e0eb      	b.n	8007d8e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8007bb6:	231a      	movs	r3, #26
 8007bb8:	2218      	movs	r2, #24
 8007bba:	189b      	adds	r3, r3, r2
 8007bbc:	19db      	adds	r3, r3, r7
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	701a      	strb	r2, [r3, #0]
 8007bc2:	e0e4      	b.n	8007d8e <UART_SetConfig+0x50a>
 8007bc4:	efff69f3 	.word	0xefff69f3
 8007bc8:	ffffcfff 	.word	0xffffcfff
 8007bcc:	40004800 	.word	0x40004800
 8007bd0:	fffff4ff 	.word	0xfffff4ff
 8007bd4:	40013800 	.word	0x40013800
 8007bd8:	40021000 	.word	0x40021000
 8007bdc:	40004400 	.word	0x40004400
 8007be0:	40004c00 	.word	0x40004c00
 8007be4:	40005000 	.word	0x40005000
 8007be8:	003d0900 	.word	0x003d0900
 8007bec:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	69da      	ldr	r2, [r3, #28]
 8007bf4:	2380      	movs	r3, #128	; 0x80
 8007bf6:	021b      	lsls	r3, r3, #8
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d000      	beq.n	8007bfe <UART_SetConfig+0x37a>
 8007bfc:	e070      	b.n	8007ce0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8007bfe:	231b      	movs	r3, #27
 8007c00:	2218      	movs	r2, #24
 8007c02:	189b      	adds	r3, r3, r2
 8007c04:	19db      	adds	r3, r3, r7
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	d822      	bhi.n	8007c52 <UART_SetConfig+0x3ce>
 8007c0c:	009a      	lsls	r2, r3, #2
 8007c0e:	4b67      	ldr	r3, [pc, #412]	; (8007dac <UART_SetConfig+0x528>)
 8007c10:	18d3      	adds	r3, r2, r3
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c16:	f7ff f921 	bl	8006e5c <HAL_RCC_GetPCLK1Freq>
 8007c1a:	0003      	movs	r3, r0
 8007c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c1e:	e021      	b.n	8007c64 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c20:	f7ff f932 	bl	8006e88 <HAL_RCC_GetPCLK2Freq>
 8007c24:	0003      	movs	r3, r0
 8007c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c28:	e01c      	b.n	8007c64 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c2a:	4b61      	ldr	r3, [pc, #388]	; (8007db0 <UART_SetConfig+0x52c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2210      	movs	r2, #16
 8007c30:	4013      	ands	r3, r2
 8007c32:	d002      	beq.n	8007c3a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007c34:	4b5f      	ldr	r3, [pc, #380]	; (8007db4 <UART_SetConfig+0x530>)
 8007c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c38:	e014      	b.n	8007c64 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8007c3a:	4b5f      	ldr	r3, [pc, #380]	; (8007db8 <UART_SetConfig+0x534>)
 8007c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c3e:	e011      	b.n	8007c64 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c40:	f7ff f85c 	bl	8006cfc <HAL_RCC_GetSysClockFreq>
 8007c44:	0003      	movs	r3, r0
 8007c46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c48:	e00c      	b.n	8007c64 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c4a:	2380      	movs	r3, #128	; 0x80
 8007c4c:	021b      	lsls	r3, r3, #8
 8007c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c50:	e008      	b.n	8007c64 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007c56:	231a      	movs	r3, #26
 8007c58:	2218      	movs	r2, #24
 8007c5a:	189b      	adds	r3, r3, r2
 8007c5c:	19db      	adds	r3, r3, r7
 8007c5e:	2201      	movs	r2, #1
 8007c60:	701a      	strb	r2, [r3, #0]
        break;
 8007c62:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d100      	bne.n	8007c6c <UART_SetConfig+0x3e8>
 8007c6a:	e090      	b.n	8007d8e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6e:	005a      	lsls	r2, r3, #1
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	085b      	lsrs	r3, r3, #1
 8007c76:	18d2      	adds	r2, r2, r3
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	0019      	movs	r1, r3
 8007c7e:	0010      	movs	r0, r2
 8007c80:	f7f8 fa5e 	bl	8000140 <__udivsi3>
 8007c84:	0003      	movs	r3, r0
 8007c86:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8a:	2b0f      	cmp	r3, #15
 8007c8c:	d921      	bls.n	8007cd2 <UART_SetConfig+0x44e>
 8007c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c90:	2380      	movs	r3, #128	; 0x80
 8007c92:	025b      	lsls	r3, r3, #9
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d21c      	bcs.n	8007cd2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	200e      	movs	r0, #14
 8007c9e:	2418      	movs	r4, #24
 8007ca0:	1903      	adds	r3, r0, r4
 8007ca2:	19db      	adds	r3, r3, r7
 8007ca4:	210f      	movs	r1, #15
 8007ca6:	438a      	bics	r2, r1
 8007ca8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	085b      	lsrs	r3, r3, #1
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	2207      	movs	r2, #7
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	b299      	uxth	r1, r3
 8007cb6:	1903      	adds	r3, r0, r4
 8007cb8:	19db      	adds	r3, r3, r7
 8007cba:	1902      	adds	r2, r0, r4
 8007cbc:	19d2      	adds	r2, r2, r7
 8007cbe:	8812      	ldrh	r2, [r2, #0]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	1902      	adds	r2, r0, r4
 8007cca:	19d2      	adds	r2, r2, r7
 8007ccc:	8812      	ldrh	r2, [r2, #0]
 8007cce:	60da      	str	r2, [r3, #12]
 8007cd0:	e05d      	b.n	8007d8e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8007cd2:	231a      	movs	r3, #26
 8007cd4:	2218      	movs	r2, #24
 8007cd6:	189b      	adds	r3, r3, r2
 8007cd8:	19db      	adds	r3, r3, r7
 8007cda:	2201      	movs	r2, #1
 8007cdc:	701a      	strb	r2, [r3, #0]
 8007cde:	e056      	b.n	8007d8e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ce0:	231b      	movs	r3, #27
 8007ce2:	2218      	movs	r2, #24
 8007ce4:	189b      	adds	r3, r3, r2
 8007ce6:	19db      	adds	r3, r3, r7
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	2b08      	cmp	r3, #8
 8007cec:	d822      	bhi.n	8007d34 <UART_SetConfig+0x4b0>
 8007cee:	009a      	lsls	r2, r3, #2
 8007cf0:	4b32      	ldr	r3, [pc, #200]	; (8007dbc <UART_SetConfig+0x538>)
 8007cf2:	18d3      	adds	r3, r2, r3
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cf8:	f7ff f8b0 	bl	8006e5c <HAL_RCC_GetPCLK1Freq>
 8007cfc:	0003      	movs	r3, r0
 8007cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d00:	e021      	b.n	8007d46 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d02:	f7ff f8c1 	bl	8006e88 <HAL_RCC_GetPCLK2Freq>
 8007d06:	0003      	movs	r3, r0
 8007d08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d0a:	e01c      	b.n	8007d46 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d0c:	4b28      	ldr	r3, [pc, #160]	; (8007db0 <UART_SetConfig+0x52c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2210      	movs	r2, #16
 8007d12:	4013      	ands	r3, r2
 8007d14:	d002      	beq.n	8007d1c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007d16:	4b27      	ldr	r3, [pc, #156]	; (8007db4 <UART_SetConfig+0x530>)
 8007d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d1a:	e014      	b.n	8007d46 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8007d1c:	4b26      	ldr	r3, [pc, #152]	; (8007db8 <UART_SetConfig+0x534>)
 8007d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d20:	e011      	b.n	8007d46 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d22:	f7fe ffeb 	bl	8006cfc <HAL_RCC_GetSysClockFreq>
 8007d26:	0003      	movs	r3, r0
 8007d28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d2a:	e00c      	b.n	8007d46 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d2c:	2380      	movs	r3, #128	; 0x80
 8007d2e:	021b      	lsls	r3, r3, #8
 8007d30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d32:	e008      	b.n	8007d46 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8007d34:	2300      	movs	r3, #0
 8007d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007d38:	231a      	movs	r3, #26
 8007d3a:	2218      	movs	r2, #24
 8007d3c:	189b      	adds	r3, r3, r2
 8007d3e:	19db      	adds	r3, r3, r7
 8007d40:	2201      	movs	r2, #1
 8007d42:	701a      	strb	r2, [r3, #0]
        break;
 8007d44:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d020      	beq.n	8007d8e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	085a      	lsrs	r2, r3, #1
 8007d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d54:	18d2      	adds	r2, r2, r3
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	0019      	movs	r1, r3
 8007d5c:	0010      	movs	r0, r2
 8007d5e:	f7f8 f9ef 	bl	8000140 <__udivsi3>
 8007d62:	0003      	movs	r3, r0
 8007d64:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d68:	2b0f      	cmp	r3, #15
 8007d6a:	d90a      	bls.n	8007d82 <UART_SetConfig+0x4fe>
 8007d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d6e:	2380      	movs	r3, #128	; 0x80
 8007d70:	025b      	lsls	r3, r3, #9
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d205      	bcs.n	8007d82 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	60da      	str	r2, [r3, #12]
 8007d80:	e005      	b.n	8007d8e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8007d82:	231a      	movs	r3, #26
 8007d84:	2218      	movs	r2, #24
 8007d86:	189b      	adds	r3, r3, r2
 8007d88:	19db      	adds	r3, r3, r7
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	2200      	movs	r2, #0
 8007d92:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	2200      	movs	r2, #0
 8007d98:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007d9a:	231a      	movs	r3, #26
 8007d9c:	2218      	movs	r2, #24
 8007d9e:	189b      	adds	r3, r3, r2
 8007da0:	19db      	adds	r3, r3, r7
 8007da2:	781b      	ldrb	r3, [r3, #0]
}
 8007da4:	0018      	movs	r0, r3
 8007da6:	46bd      	mov	sp, r7
 8007da8:	b00e      	add	sp, #56	; 0x38
 8007daa:	bdb0      	pop	{r4, r5, r7, pc}
 8007dac:	0800d320 	.word	0x0800d320
 8007db0:	40021000 	.word	0x40021000
 8007db4:	003d0900 	.word	0x003d0900
 8007db8:	00f42400 	.word	0x00f42400
 8007dbc:	0800d344 	.word	0x0800d344

08007dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	2201      	movs	r2, #1
 8007dce:	4013      	ands	r3, r2
 8007dd0:	d00b      	beq.n	8007dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	4a4a      	ldr	r2, [pc, #296]	; (8007f04 <UART_AdvFeatureConfig+0x144>)
 8007dda:	4013      	ands	r3, r2
 8007ddc:	0019      	movs	r1, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	2202      	movs	r2, #2
 8007df0:	4013      	ands	r3, r2
 8007df2:	d00b      	beq.n	8007e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	4a43      	ldr	r2, [pc, #268]	; (8007f08 <UART_AdvFeatureConfig+0x148>)
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	0019      	movs	r1, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e10:	2204      	movs	r2, #4
 8007e12:	4013      	ands	r3, r2
 8007e14:	d00b      	beq.n	8007e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	4a3b      	ldr	r2, [pc, #236]	; (8007f0c <UART_AdvFeatureConfig+0x14c>)
 8007e1e:	4013      	ands	r3, r2
 8007e20:	0019      	movs	r1, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	2208      	movs	r2, #8
 8007e34:	4013      	ands	r3, r2
 8007e36:	d00b      	beq.n	8007e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	4a34      	ldr	r2, [pc, #208]	; (8007f10 <UART_AdvFeatureConfig+0x150>)
 8007e40:	4013      	ands	r3, r2
 8007e42:	0019      	movs	r1, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e54:	2210      	movs	r2, #16
 8007e56:	4013      	ands	r3, r2
 8007e58:	d00b      	beq.n	8007e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	4a2c      	ldr	r2, [pc, #176]	; (8007f14 <UART_AdvFeatureConfig+0x154>)
 8007e62:	4013      	ands	r3, r2
 8007e64:	0019      	movs	r1, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	2220      	movs	r2, #32
 8007e78:	4013      	ands	r3, r2
 8007e7a:	d00b      	beq.n	8007e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	4a25      	ldr	r2, [pc, #148]	; (8007f18 <UART_AdvFeatureConfig+0x158>)
 8007e84:	4013      	ands	r3, r2
 8007e86:	0019      	movs	r1, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	2240      	movs	r2, #64	; 0x40
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	d01d      	beq.n	8007eda <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	4a1d      	ldr	r2, [pc, #116]	; (8007f1c <UART_AdvFeatureConfig+0x15c>)
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	0019      	movs	r1, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007eba:	2380      	movs	r3, #128	; 0x80
 8007ebc:	035b      	lsls	r3, r3, #13
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d10b      	bne.n	8007eda <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	4a15      	ldr	r2, [pc, #84]	; (8007f20 <UART_AdvFeatureConfig+0x160>)
 8007eca:	4013      	ands	r3, r2
 8007ecc:	0019      	movs	r1, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	2280      	movs	r2, #128	; 0x80
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	d00b      	beq.n	8007efc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	4a0e      	ldr	r2, [pc, #56]	; (8007f24 <UART_AdvFeatureConfig+0x164>)
 8007eec:	4013      	ands	r3, r2
 8007eee:	0019      	movs	r1, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	605a      	str	r2, [r3, #4]
  }
}
 8007efc:	46c0      	nop			; (mov r8, r8)
 8007efe:	46bd      	mov	sp, r7
 8007f00:	b002      	add	sp, #8
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	fffdffff 	.word	0xfffdffff
 8007f08:	fffeffff 	.word	0xfffeffff
 8007f0c:	fffbffff 	.word	0xfffbffff
 8007f10:	ffff7fff 	.word	0xffff7fff
 8007f14:	ffffefff 	.word	0xffffefff
 8007f18:	ffffdfff 	.word	0xffffdfff
 8007f1c:	ffefffff 	.word	0xffefffff
 8007f20:	ff9fffff 	.word	0xff9fffff
 8007f24:	fff7ffff 	.word	0xfff7ffff

08007f28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b092      	sub	sp, #72	; 0x48
 8007f2c:	af02      	add	r7, sp, #8
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2284      	movs	r2, #132	; 0x84
 8007f34:	2100      	movs	r1, #0
 8007f36:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f38:	f7fc fb96 	bl	8004668 <HAL_GetTick>
 8007f3c:	0003      	movs	r3, r0
 8007f3e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2208      	movs	r2, #8
 8007f48:	4013      	ands	r3, r2
 8007f4a:	2b08      	cmp	r3, #8
 8007f4c:	d12c      	bne.n	8007fa8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f50:	2280      	movs	r2, #128	; 0x80
 8007f52:	0391      	lsls	r1, r2, #14
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	4a46      	ldr	r2, [pc, #280]	; (8008070 <UART_CheckIdleState+0x148>)
 8007f58:	9200      	str	r2, [sp, #0]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f000 f88c 	bl	8008078 <UART_WaitOnFlagUntilTimeout>
 8007f60:	1e03      	subs	r3, r0, #0
 8007f62:	d021      	beq.n	8007fa8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f64:	f3ef 8310 	mrs	r3, PRIMASK
 8007f68:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007f6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f6e:	2301      	movs	r3, #1
 8007f70:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f74:	f383 8810 	msr	PRIMASK, r3
}
 8007f78:	46c0      	nop			; (mov r8, r8)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2180      	movs	r1, #128	; 0x80
 8007f86:	438a      	bics	r2, r1
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f90:	f383 8810 	msr	PRIMASK, r3
}
 8007f94:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2220      	movs	r2, #32
 8007f9a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2278      	movs	r2, #120	; 0x78
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e05f      	b.n	8008068 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2204      	movs	r2, #4
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	2b04      	cmp	r3, #4
 8007fb4:	d146      	bne.n	8008044 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb8:	2280      	movs	r2, #128	; 0x80
 8007fba:	03d1      	lsls	r1, r2, #15
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	4a2c      	ldr	r2, [pc, #176]	; (8008070 <UART_CheckIdleState+0x148>)
 8007fc0:	9200      	str	r2, [sp, #0]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f000 f858 	bl	8008078 <UART_WaitOnFlagUntilTimeout>
 8007fc8:	1e03      	subs	r3, r0, #0
 8007fca:	d03b      	beq.n	8008044 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8007fd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	f383 8810 	msr	PRIMASK, r3
}
 8007fe0:	46c0      	nop			; (mov r8, r8)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4921      	ldr	r1, [pc, #132]	; (8008074 <UART_CheckIdleState+0x14c>)
 8007fee:	400a      	ands	r2, r1
 8007ff0:	601a      	str	r2, [r3, #0]
 8007ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	f383 8810 	msr	PRIMASK, r3
}
 8007ffc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8008002:	61bb      	str	r3, [r7, #24]
  return(result);
 8008004:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008006:	633b      	str	r3, [r7, #48]	; 0x30
 8008008:	2301      	movs	r3, #1
 800800a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	f383 8810 	msr	PRIMASK, r3
}
 8008012:	46c0      	nop			; (mov r8, r8)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	689a      	ldr	r2, [r3, #8]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2101      	movs	r1, #1
 8008020:	438a      	bics	r2, r1
 8008022:	609a      	str	r2, [r3, #8]
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008028:	6a3b      	ldr	r3, [r7, #32]
 800802a:	f383 8810 	msr	PRIMASK, r3
}
 800802e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2280      	movs	r2, #128	; 0x80
 8008034:	2120      	movs	r1, #32
 8008036:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2278      	movs	r2, #120	; 0x78
 800803c:	2100      	movs	r1, #0
 800803e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e011      	b.n	8008068 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2220      	movs	r2, #32
 8008048:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2280      	movs	r2, #128	; 0x80
 800804e:	2120      	movs	r1, #32
 8008050:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2278      	movs	r2, #120	; 0x78
 8008062:	2100      	movs	r1, #0
 8008064:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	0018      	movs	r0, r3
 800806a:	46bd      	mov	sp, r7
 800806c:	b010      	add	sp, #64	; 0x40
 800806e:	bd80      	pop	{r7, pc}
 8008070:	01ffffff 	.word	0x01ffffff
 8008074:	fffffedf 	.word	0xfffffedf

08008078 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	603b      	str	r3, [r7, #0]
 8008084:	1dfb      	adds	r3, r7, #7
 8008086:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008088:	e04b      	b.n	8008122 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	3301      	adds	r3, #1
 800808e:	d048      	beq.n	8008122 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008090:	f7fc faea 	bl	8004668 <HAL_GetTick>
 8008094:	0002      	movs	r2, r0
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	69ba      	ldr	r2, [r7, #24]
 800809c:	429a      	cmp	r2, r3
 800809e:	d302      	bcc.n	80080a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e04b      	b.n	8008142 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2204      	movs	r2, #4
 80080b2:	4013      	ands	r3, r2
 80080b4:	d035      	beq.n	8008122 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	2208      	movs	r2, #8
 80080be:	4013      	ands	r3, r2
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d111      	bne.n	80080e8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2208      	movs	r2, #8
 80080ca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	0018      	movs	r0, r3
 80080d0:	f000 f83c 	bl	800814c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2284      	movs	r2, #132	; 0x84
 80080d8:	2108      	movs	r1, #8
 80080da:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2278      	movs	r2, #120	; 0x78
 80080e0:	2100      	movs	r1, #0
 80080e2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e02c      	b.n	8008142 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	69da      	ldr	r2, [r3, #28]
 80080ee:	2380      	movs	r3, #128	; 0x80
 80080f0:	011b      	lsls	r3, r3, #4
 80080f2:	401a      	ands	r2, r3
 80080f4:	2380      	movs	r3, #128	; 0x80
 80080f6:	011b      	lsls	r3, r3, #4
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d112      	bne.n	8008122 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2280      	movs	r2, #128	; 0x80
 8008102:	0112      	lsls	r2, r2, #4
 8008104:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	0018      	movs	r0, r3
 800810a:	f000 f81f 	bl	800814c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2284      	movs	r2, #132	; 0x84
 8008112:	2120      	movs	r1, #32
 8008114:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2278      	movs	r2, #120	; 0x78
 800811a:	2100      	movs	r1, #0
 800811c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e00f      	b.n	8008142 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	69db      	ldr	r3, [r3, #28]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	4013      	ands	r3, r2
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	425a      	negs	r2, r3
 8008132:	4153      	adcs	r3, r2
 8008134:	b2db      	uxtb	r3, r3
 8008136:	001a      	movs	r2, r3
 8008138:	1dfb      	adds	r3, r7, #7
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	429a      	cmp	r2, r3
 800813e:	d0a4      	beq.n	800808a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	0018      	movs	r0, r3
 8008144:	46bd      	mov	sp, r7
 8008146:	b004      	add	sp, #16
 8008148:	bd80      	pop	{r7, pc}
	...

0800814c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b08e      	sub	sp, #56	; 0x38
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008154:	f3ef 8310 	mrs	r3, PRIMASK
 8008158:	617b      	str	r3, [r7, #20]
  return(result);
 800815a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800815c:	637b      	str	r3, [r7, #52]	; 0x34
 800815e:	2301      	movs	r3, #1
 8008160:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	f383 8810 	msr	PRIMASK, r3
}
 8008168:	46c0      	nop			; (mov r8, r8)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4926      	ldr	r1, [pc, #152]	; (8008210 <UART_EndRxTransfer+0xc4>)
 8008176:	400a      	ands	r2, r1
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	f383 8810 	msr	PRIMASK, r3
}
 8008184:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008186:	f3ef 8310 	mrs	r3, PRIMASK
 800818a:	623b      	str	r3, [r7, #32]
  return(result);
 800818c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800818e:	633b      	str	r3, [r7, #48]	; 0x30
 8008190:	2301      	movs	r3, #1
 8008192:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	f383 8810 	msr	PRIMASK, r3
}
 800819a:	46c0      	nop			; (mov r8, r8)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689a      	ldr	r2, [r3, #8]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2101      	movs	r1, #1
 80081a8:	438a      	bics	r2, r1
 80081aa:	609a      	str	r2, [r3, #8]
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b2:	f383 8810 	msr	PRIMASK, r3
}
 80081b6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d118      	bne.n	80081f2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081c0:	f3ef 8310 	mrs	r3, PRIMASK
 80081c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80081c6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081ca:	2301      	movs	r3, #1
 80081cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f383 8810 	msr	PRIMASK, r3
}
 80081d4:	46c0      	nop			; (mov r8, r8)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2110      	movs	r1, #16
 80081e2:	438a      	bics	r2, r1
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f383 8810 	msr	PRIMASK, r3
}
 80081f0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2280      	movs	r2, #128	; 0x80
 80081f6:	2120      	movs	r1, #32
 80081f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008206:	46c0      	nop			; (mov r8, r8)
 8008208:	46bd      	mov	sp, r7
 800820a:	b00e      	add	sp, #56	; 0x38
 800820c:	bd80      	pop	{r7, pc}
 800820e:	46c0      	nop			; (mov r8, r8)
 8008210:	fffffedf 	.word	0xfffffedf

08008214 <__cvt>:
 8008214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008216:	001e      	movs	r6, r3
 8008218:	2300      	movs	r3, #0
 800821a:	0014      	movs	r4, r2
 800821c:	b08b      	sub	sp, #44	; 0x2c
 800821e:	429e      	cmp	r6, r3
 8008220:	da04      	bge.n	800822c <__cvt+0x18>
 8008222:	2180      	movs	r1, #128	; 0x80
 8008224:	0609      	lsls	r1, r1, #24
 8008226:	1873      	adds	r3, r6, r1
 8008228:	001e      	movs	r6, r3
 800822a:	232d      	movs	r3, #45	; 0x2d
 800822c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800822e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008230:	7013      	strb	r3, [r2, #0]
 8008232:	2320      	movs	r3, #32
 8008234:	2203      	movs	r2, #3
 8008236:	439f      	bics	r7, r3
 8008238:	2f46      	cmp	r7, #70	; 0x46
 800823a:	d007      	beq.n	800824c <__cvt+0x38>
 800823c:	003b      	movs	r3, r7
 800823e:	3b45      	subs	r3, #69	; 0x45
 8008240:	4259      	negs	r1, r3
 8008242:	414b      	adcs	r3, r1
 8008244:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008246:	3a01      	subs	r2, #1
 8008248:	18cb      	adds	r3, r1, r3
 800824a:	9310      	str	r3, [sp, #64]	; 0x40
 800824c:	ab09      	add	r3, sp, #36	; 0x24
 800824e:	9304      	str	r3, [sp, #16]
 8008250:	ab08      	add	r3, sp, #32
 8008252:	9303      	str	r3, [sp, #12]
 8008254:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008256:	9200      	str	r2, [sp, #0]
 8008258:	9302      	str	r3, [sp, #8]
 800825a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800825c:	0022      	movs	r2, r4
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	0033      	movs	r3, r6
 8008262:	f000 fedb 	bl	800901c <_dtoa_r>
 8008266:	0005      	movs	r5, r0
 8008268:	2f47      	cmp	r7, #71	; 0x47
 800826a:	d102      	bne.n	8008272 <__cvt+0x5e>
 800826c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800826e:	07db      	lsls	r3, r3, #31
 8008270:	d528      	bpl.n	80082c4 <__cvt+0xb0>
 8008272:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008274:	18eb      	adds	r3, r5, r3
 8008276:	9307      	str	r3, [sp, #28]
 8008278:	2f46      	cmp	r7, #70	; 0x46
 800827a:	d114      	bne.n	80082a6 <__cvt+0x92>
 800827c:	782b      	ldrb	r3, [r5, #0]
 800827e:	2b30      	cmp	r3, #48	; 0x30
 8008280:	d10c      	bne.n	800829c <__cvt+0x88>
 8008282:	2200      	movs	r2, #0
 8008284:	2300      	movs	r3, #0
 8008286:	0020      	movs	r0, r4
 8008288:	0031      	movs	r1, r6
 800828a:	f7f8 f8df 	bl	800044c <__aeabi_dcmpeq>
 800828e:	2800      	cmp	r0, #0
 8008290:	d104      	bne.n	800829c <__cvt+0x88>
 8008292:	2301      	movs	r3, #1
 8008294:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008296:	1a9b      	subs	r3, r3, r2
 8008298:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800829a:	6013      	str	r3, [r2, #0]
 800829c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800829e:	9a07      	ldr	r2, [sp, #28]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	18d3      	adds	r3, r2, r3
 80082a4:	9307      	str	r3, [sp, #28]
 80082a6:	2200      	movs	r2, #0
 80082a8:	2300      	movs	r3, #0
 80082aa:	0020      	movs	r0, r4
 80082ac:	0031      	movs	r1, r6
 80082ae:	f7f8 f8cd 	bl	800044c <__aeabi_dcmpeq>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d001      	beq.n	80082ba <__cvt+0xa6>
 80082b6:	9b07      	ldr	r3, [sp, #28]
 80082b8:	9309      	str	r3, [sp, #36]	; 0x24
 80082ba:	2230      	movs	r2, #48	; 0x30
 80082bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082be:	9907      	ldr	r1, [sp, #28]
 80082c0:	428b      	cmp	r3, r1
 80082c2:	d306      	bcc.n	80082d2 <__cvt+0xbe>
 80082c4:	0028      	movs	r0, r5
 80082c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80082ca:	1b5b      	subs	r3, r3, r5
 80082cc:	6013      	str	r3, [r2, #0]
 80082ce:	b00b      	add	sp, #44	; 0x2c
 80082d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082d2:	1c59      	adds	r1, r3, #1
 80082d4:	9109      	str	r1, [sp, #36]	; 0x24
 80082d6:	701a      	strb	r2, [r3, #0]
 80082d8:	e7f0      	b.n	80082bc <__cvt+0xa8>

080082da <__exponent>:
 80082da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082dc:	1c83      	adds	r3, r0, #2
 80082de:	b087      	sub	sp, #28
 80082e0:	9303      	str	r3, [sp, #12]
 80082e2:	0005      	movs	r5, r0
 80082e4:	000c      	movs	r4, r1
 80082e6:	232b      	movs	r3, #43	; 0x2b
 80082e8:	7002      	strb	r2, [r0, #0]
 80082ea:	2900      	cmp	r1, #0
 80082ec:	da01      	bge.n	80082f2 <__exponent+0x18>
 80082ee:	424c      	negs	r4, r1
 80082f0:	3302      	adds	r3, #2
 80082f2:	706b      	strb	r3, [r5, #1]
 80082f4:	2c09      	cmp	r4, #9
 80082f6:	dd2f      	ble.n	8008358 <__exponent+0x7e>
 80082f8:	270a      	movs	r7, #10
 80082fa:	ab04      	add	r3, sp, #16
 80082fc:	1dde      	adds	r6, r3, #7
 80082fe:	0020      	movs	r0, r4
 8008300:	0039      	movs	r1, r7
 8008302:	9601      	str	r6, [sp, #4]
 8008304:	f7f8 f88c 	bl	8000420 <__aeabi_idivmod>
 8008308:	3e01      	subs	r6, #1
 800830a:	3130      	adds	r1, #48	; 0x30
 800830c:	0020      	movs	r0, r4
 800830e:	7031      	strb	r1, [r6, #0]
 8008310:	0039      	movs	r1, r7
 8008312:	9402      	str	r4, [sp, #8]
 8008314:	f7f7 ff9e 	bl	8000254 <__divsi3>
 8008318:	9b02      	ldr	r3, [sp, #8]
 800831a:	0004      	movs	r4, r0
 800831c:	2b63      	cmp	r3, #99	; 0x63
 800831e:	dcee      	bgt.n	80082fe <__exponent+0x24>
 8008320:	9b01      	ldr	r3, [sp, #4]
 8008322:	3430      	adds	r4, #48	; 0x30
 8008324:	1e9a      	subs	r2, r3, #2
 8008326:	0013      	movs	r3, r2
 8008328:	9903      	ldr	r1, [sp, #12]
 800832a:	7014      	strb	r4, [r2, #0]
 800832c:	a804      	add	r0, sp, #16
 800832e:	3007      	adds	r0, #7
 8008330:	4298      	cmp	r0, r3
 8008332:	d80c      	bhi.n	800834e <__exponent+0x74>
 8008334:	2300      	movs	r3, #0
 8008336:	4282      	cmp	r2, r0
 8008338:	d804      	bhi.n	8008344 <__exponent+0x6a>
 800833a:	aa04      	add	r2, sp, #16
 800833c:	3309      	adds	r3, #9
 800833e:	189b      	adds	r3, r3, r2
 8008340:	9a01      	ldr	r2, [sp, #4]
 8008342:	1a9b      	subs	r3, r3, r2
 8008344:	9a03      	ldr	r2, [sp, #12]
 8008346:	18d3      	adds	r3, r2, r3
 8008348:	1b58      	subs	r0, r3, r5
 800834a:	b007      	add	sp, #28
 800834c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800834e:	7818      	ldrb	r0, [r3, #0]
 8008350:	3301      	adds	r3, #1
 8008352:	7008      	strb	r0, [r1, #0]
 8008354:	3101      	adds	r1, #1
 8008356:	e7e9      	b.n	800832c <__exponent+0x52>
 8008358:	2330      	movs	r3, #48	; 0x30
 800835a:	3430      	adds	r4, #48	; 0x30
 800835c:	70ab      	strb	r3, [r5, #2]
 800835e:	70ec      	strb	r4, [r5, #3]
 8008360:	1d2b      	adds	r3, r5, #4
 8008362:	e7f1      	b.n	8008348 <__exponent+0x6e>

08008364 <_printf_float>:
 8008364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008366:	b095      	sub	sp, #84	; 0x54
 8008368:	000c      	movs	r4, r1
 800836a:	9208      	str	r2, [sp, #32]
 800836c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800836e:	9309      	str	r3, [sp, #36]	; 0x24
 8008370:	0007      	movs	r7, r0
 8008372:	f000 fd39 	bl	8008de8 <_localeconv_r>
 8008376:	6803      	ldr	r3, [r0, #0]
 8008378:	0018      	movs	r0, r3
 800837a:	930c      	str	r3, [sp, #48]	; 0x30
 800837c:	f7f7 fec4 	bl	8000108 <strlen>
 8008380:	2300      	movs	r3, #0
 8008382:	9312      	str	r3, [sp, #72]	; 0x48
 8008384:	7e23      	ldrb	r3, [r4, #24]
 8008386:	2207      	movs	r2, #7
 8008388:	930a      	str	r3, [sp, #40]	; 0x28
 800838a:	6823      	ldr	r3, [r4, #0]
 800838c:	900d      	str	r0, [sp, #52]	; 0x34
 800838e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008390:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008392:	682b      	ldr	r3, [r5, #0]
 8008394:	05c9      	lsls	r1, r1, #23
 8008396:	d547      	bpl.n	8008428 <_printf_float+0xc4>
 8008398:	189b      	adds	r3, r3, r2
 800839a:	4393      	bics	r3, r2
 800839c:	001a      	movs	r2, r3
 800839e:	3208      	adds	r2, #8
 80083a0:	602a      	str	r2, [r5, #0]
 80083a2:	681e      	ldr	r6, [r3, #0]
 80083a4:	685d      	ldr	r5, [r3, #4]
 80083a6:	0032      	movs	r2, r6
 80083a8:	002b      	movs	r3, r5
 80083aa:	64a2      	str	r2, [r4, #72]	; 0x48
 80083ac:	64e3      	str	r3, [r4, #76]	; 0x4c
 80083ae:	2201      	movs	r2, #1
 80083b0:	006b      	lsls	r3, r5, #1
 80083b2:	085b      	lsrs	r3, r3, #1
 80083b4:	930e      	str	r3, [sp, #56]	; 0x38
 80083b6:	0030      	movs	r0, r6
 80083b8:	4bab      	ldr	r3, [pc, #684]	; (8008668 <_printf_float+0x304>)
 80083ba:	990e      	ldr	r1, [sp, #56]	; 0x38
 80083bc:	4252      	negs	r2, r2
 80083be:	f7fa fc6f 	bl	8002ca0 <__aeabi_dcmpun>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	d132      	bne.n	800842c <_printf_float+0xc8>
 80083c6:	2201      	movs	r2, #1
 80083c8:	0030      	movs	r0, r6
 80083ca:	4ba7      	ldr	r3, [pc, #668]	; (8008668 <_printf_float+0x304>)
 80083cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80083ce:	4252      	negs	r2, r2
 80083d0:	f7f8 f84c 	bl	800046c <__aeabi_dcmple>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	d129      	bne.n	800842c <_printf_float+0xc8>
 80083d8:	2200      	movs	r2, #0
 80083da:	2300      	movs	r3, #0
 80083dc:	0030      	movs	r0, r6
 80083de:	0029      	movs	r1, r5
 80083e0:	f7f8 f83a 	bl	8000458 <__aeabi_dcmplt>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d003      	beq.n	80083f0 <_printf_float+0x8c>
 80083e8:	0023      	movs	r3, r4
 80083ea:	222d      	movs	r2, #45	; 0x2d
 80083ec:	3343      	adds	r3, #67	; 0x43
 80083ee:	701a      	strb	r2, [r3, #0]
 80083f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f2:	4d9e      	ldr	r5, [pc, #632]	; (800866c <_printf_float+0x308>)
 80083f4:	2b47      	cmp	r3, #71	; 0x47
 80083f6:	d900      	bls.n	80083fa <_printf_float+0x96>
 80083f8:	4d9d      	ldr	r5, [pc, #628]	; (8008670 <_printf_float+0x30c>)
 80083fa:	2303      	movs	r3, #3
 80083fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083fe:	6123      	str	r3, [r4, #16]
 8008400:	3301      	adds	r3, #1
 8008402:	439a      	bics	r2, r3
 8008404:	2300      	movs	r3, #0
 8008406:	6022      	str	r2, [r4, #0]
 8008408:	930b      	str	r3, [sp, #44]	; 0x2c
 800840a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800840c:	0021      	movs	r1, r4
 800840e:	9300      	str	r3, [sp, #0]
 8008410:	0038      	movs	r0, r7
 8008412:	9b08      	ldr	r3, [sp, #32]
 8008414:	aa13      	add	r2, sp, #76	; 0x4c
 8008416:	f000 f9fb 	bl	8008810 <_printf_common>
 800841a:	3001      	adds	r0, #1
 800841c:	d000      	beq.n	8008420 <_printf_float+0xbc>
 800841e:	e0a3      	b.n	8008568 <_printf_float+0x204>
 8008420:	2001      	movs	r0, #1
 8008422:	4240      	negs	r0, r0
 8008424:	b015      	add	sp, #84	; 0x54
 8008426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008428:	3307      	adds	r3, #7
 800842a:	e7b6      	b.n	800839a <_printf_float+0x36>
 800842c:	0032      	movs	r2, r6
 800842e:	002b      	movs	r3, r5
 8008430:	0030      	movs	r0, r6
 8008432:	0029      	movs	r1, r5
 8008434:	f7fa fc34 	bl	8002ca0 <__aeabi_dcmpun>
 8008438:	2800      	cmp	r0, #0
 800843a:	d00b      	beq.n	8008454 <_printf_float+0xf0>
 800843c:	2d00      	cmp	r5, #0
 800843e:	da03      	bge.n	8008448 <_printf_float+0xe4>
 8008440:	0023      	movs	r3, r4
 8008442:	222d      	movs	r2, #45	; 0x2d
 8008444:	3343      	adds	r3, #67	; 0x43
 8008446:	701a      	strb	r2, [r3, #0]
 8008448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800844a:	4d8a      	ldr	r5, [pc, #552]	; (8008674 <_printf_float+0x310>)
 800844c:	2b47      	cmp	r3, #71	; 0x47
 800844e:	d9d4      	bls.n	80083fa <_printf_float+0x96>
 8008450:	4d89      	ldr	r5, [pc, #548]	; (8008678 <_printf_float+0x314>)
 8008452:	e7d2      	b.n	80083fa <_printf_float+0x96>
 8008454:	2220      	movs	r2, #32
 8008456:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008458:	6863      	ldr	r3, [r4, #4]
 800845a:	4391      	bics	r1, r2
 800845c:	910e      	str	r1, [sp, #56]	; 0x38
 800845e:	1c5a      	adds	r2, r3, #1
 8008460:	d14a      	bne.n	80084f8 <_printf_float+0x194>
 8008462:	3307      	adds	r3, #7
 8008464:	6063      	str	r3, [r4, #4]
 8008466:	2380      	movs	r3, #128	; 0x80
 8008468:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800846a:	00db      	lsls	r3, r3, #3
 800846c:	4313      	orrs	r3, r2
 800846e:	2200      	movs	r2, #0
 8008470:	9206      	str	r2, [sp, #24]
 8008472:	aa12      	add	r2, sp, #72	; 0x48
 8008474:	9205      	str	r2, [sp, #20]
 8008476:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008478:	6023      	str	r3, [r4, #0]
 800847a:	9204      	str	r2, [sp, #16]
 800847c:	aa11      	add	r2, sp, #68	; 0x44
 800847e:	9203      	str	r2, [sp, #12]
 8008480:	2223      	movs	r2, #35	; 0x23
 8008482:	a908      	add	r1, sp, #32
 8008484:	9301      	str	r3, [sp, #4]
 8008486:	6863      	ldr	r3, [r4, #4]
 8008488:	1852      	adds	r2, r2, r1
 800848a:	9202      	str	r2, [sp, #8]
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	0032      	movs	r2, r6
 8008490:	002b      	movs	r3, r5
 8008492:	0038      	movs	r0, r7
 8008494:	f7ff febe 	bl	8008214 <__cvt>
 8008498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800849a:	0005      	movs	r5, r0
 800849c:	2b47      	cmp	r3, #71	; 0x47
 800849e:	d109      	bne.n	80084b4 <_printf_float+0x150>
 80084a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084a2:	1cda      	adds	r2, r3, #3
 80084a4:	db02      	blt.n	80084ac <_printf_float+0x148>
 80084a6:	6862      	ldr	r2, [r4, #4]
 80084a8:	4293      	cmp	r3, r2
 80084aa:	dd49      	ble.n	8008540 <_printf_float+0x1dc>
 80084ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ae:	3b02      	subs	r3, #2
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	930a      	str	r3, [sp, #40]	; 0x28
 80084b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80084b8:	2b65      	cmp	r3, #101	; 0x65
 80084ba:	d824      	bhi.n	8008506 <_printf_float+0x1a2>
 80084bc:	0020      	movs	r0, r4
 80084be:	001a      	movs	r2, r3
 80084c0:	3901      	subs	r1, #1
 80084c2:	3050      	adds	r0, #80	; 0x50
 80084c4:	9111      	str	r1, [sp, #68]	; 0x44
 80084c6:	f7ff ff08 	bl	80082da <__exponent>
 80084ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80084ce:	1813      	adds	r3, r2, r0
 80084d0:	6123      	str	r3, [r4, #16]
 80084d2:	2a01      	cmp	r2, #1
 80084d4:	dc02      	bgt.n	80084dc <_printf_float+0x178>
 80084d6:	6822      	ldr	r2, [r4, #0]
 80084d8:	07d2      	lsls	r2, r2, #31
 80084da:	d501      	bpl.n	80084e0 <_printf_float+0x17c>
 80084dc:	3301      	adds	r3, #1
 80084de:	6123      	str	r3, [r4, #16]
 80084e0:	2323      	movs	r3, #35	; 0x23
 80084e2:	aa08      	add	r2, sp, #32
 80084e4:	189b      	adds	r3, r3, r2
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d100      	bne.n	80084ee <_printf_float+0x18a>
 80084ec:	e78d      	b.n	800840a <_printf_float+0xa6>
 80084ee:	0023      	movs	r3, r4
 80084f0:	222d      	movs	r2, #45	; 0x2d
 80084f2:	3343      	adds	r3, #67	; 0x43
 80084f4:	701a      	strb	r2, [r3, #0]
 80084f6:	e788      	b.n	800840a <_printf_float+0xa6>
 80084f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084fa:	2a47      	cmp	r2, #71	; 0x47
 80084fc:	d1b3      	bne.n	8008466 <_printf_float+0x102>
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1b1      	bne.n	8008466 <_printf_float+0x102>
 8008502:	3301      	adds	r3, #1
 8008504:	e7ae      	b.n	8008464 <_printf_float+0x100>
 8008506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008508:	2b66      	cmp	r3, #102	; 0x66
 800850a:	d11b      	bne.n	8008544 <_printf_float+0x1e0>
 800850c:	6863      	ldr	r3, [r4, #4]
 800850e:	2900      	cmp	r1, #0
 8008510:	dd09      	ble.n	8008526 <_printf_float+0x1c2>
 8008512:	6121      	str	r1, [r4, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d102      	bne.n	800851e <_printf_float+0x1ba>
 8008518:	6822      	ldr	r2, [r4, #0]
 800851a:	07d2      	lsls	r2, r2, #31
 800851c:	d50b      	bpl.n	8008536 <_printf_float+0x1d2>
 800851e:	3301      	adds	r3, #1
 8008520:	185b      	adds	r3, r3, r1
 8008522:	6123      	str	r3, [r4, #16]
 8008524:	e007      	b.n	8008536 <_printf_float+0x1d2>
 8008526:	2b00      	cmp	r3, #0
 8008528:	d103      	bne.n	8008532 <_printf_float+0x1ce>
 800852a:	2201      	movs	r2, #1
 800852c:	6821      	ldr	r1, [r4, #0]
 800852e:	4211      	tst	r1, r2
 8008530:	d000      	beq.n	8008534 <_printf_float+0x1d0>
 8008532:	1c9a      	adds	r2, r3, #2
 8008534:	6122      	str	r2, [r4, #16]
 8008536:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008538:	65a3      	str	r3, [r4, #88]	; 0x58
 800853a:	2300      	movs	r3, #0
 800853c:	930b      	str	r3, [sp, #44]	; 0x2c
 800853e:	e7cf      	b.n	80084e0 <_printf_float+0x17c>
 8008540:	2367      	movs	r3, #103	; 0x67
 8008542:	930a      	str	r3, [sp, #40]	; 0x28
 8008544:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008546:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008548:	4299      	cmp	r1, r3
 800854a:	db06      	blt.n	800855a <_printf_float+0x1f6>
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	6121      	str	r1, [r4, #16]
 8008550:	07db      	lsls	r3, r3, #31
 8008552:	d5f0      	bpl.n	8008536 <_printf_float+0x1d2>
 8008554:	3101      	adds	r1, #1
 8008556:	6121      	str	r1, [r4, #16]
 8008558:	e7ed      	b.n	8008536 <_printf_float+0x1d2>
 800855a:	2201      	movs	r2, #1
 800855c:	2900      	cmp	r1, #0
 800855e:	dc01      	bgt.n	8008564 <_printf_float+0x200>
 8008560:	1892      	adds	r2, r2, r2
 8008562:	1a52      	subs	r2, r2, r1
 8008564:	189b      	adds	r3, r3, r2
 8008566:	e7dc      	b.n	8008522 <_printf_float+0x1be>
 8008568:	6822      	ldr	r2, [r4, #0]
 800856a:	0553      	lsls	r3, r2, #21
 800856c:	d408      	bmi.n	8008580 <_printf_float+0x21c>
 800856e:	6923      	ldr	r3, [r4, #16]
 8008570:	002a      	movs	r2, r5
 8008572:	0038      	movs	r0, r7
 8008574:	9908      	ldr	r1, [sp, #32]
 8008576:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008578:	47a8      	blx	r5
 800857a:	3001      	adds	r0, #1
 800857c:	d12a      	bne.n	80085d4 <_printf_float+0x270>
 800857e:	e74f      	b.n	8008420 <_printf_float+0xbc>
 8008580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008582:	2b65      	cmp	r3, #101	; 0x65
 8008584:	d800      	bhi.n	8008588 <_printf_float+0x224>
 8008586:	e0ec      	b.n	8008762 <_printf_float+0x3fe>
 8008588:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800858a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800858c:	2200      	movs	r2, #0
 800858e:	2300      	movs	r3, #0
 8008590:	f7f7 ff5c 	bl	800044c <__aeabi_dcmpeq>
 8008594:	2800      	cmp	r0, #0
 8008596:	d034      	beq.n	8008602 <_printf_float+0x29e>
 8008598:	2301      	movs	r3, #1
 800859a:	0038      	movs	r0, r7
 800859c:	4a37      	ldr	r2, [pc, #220]	; (800867c <_printf_float+0x318>)
 800859e:	9908      	ldr	r1, [sp, #32]
 80085a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80085a2:	47a8      	blx	r5
 80085a4:	3001      	adds	r0, #1
 80085a6:	d100      	bne.n	80085aa <_printf_float+0x246>
 80085a8:	e73a      	b.n	8008420 <_printf_float+0xbc>
 80085aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80085ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085ae:	429a      	cmp	r2, r3
 80085b0:	db02      	blt.n	80085b8 <_printf_float+0x254>
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	07db      	lsls	r3, r3, #31
 80085b6:	d50d      	bpl.n	80085d4 <_printf_float+0x270>
 80085b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80085ba:	0038      	movs	r0, r7
 80085bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085c0:	9908      	ldr	r1, [sp, #32]
 80085c2:	47a8      	blx	r5
 80085c4:	2500      	movs	r5, #0
 80085c6:	3001      	adds	r0, #1
 80085c8:	d100      	bne.n	80085cc <_printf_float+0x268>
 80085ca:	e729      	b.n	8008420 <_printf_float+0xbc>
 80085cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085ce:	3b01      	subs	r3, #1
 80085d0:	42ab      	cmp	r3, r5
 80085d2:	dc0a      	bgt.n	80085ea <_printf_float+0x286>
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	079b      	lsls	r3, r3, #30
 80085d8:	d500      	bpl.n	80085dc <_printf_float+0x278>
 80085da:	e116      	b.n	800880a <_printf_float+0x4a6>
 80085dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085de:	68e0      	ldr	r0, [r4, #12]
 80085e0:	4298      	cmp	r0, r3
 80085e2:	db00      	blt.n	80085e6 <_printf_float+0x282>
 80085e4:	e71e      	b.n	8008424 <_printf_float+0xc0>
 80085e6:	0018      	movs	r0, r3
 80085e8:	e71c      	b.n	8008424 <_printf_float+0xc0>
 80085ea:	0022      	movs	r2, r4
 80085ec:	2301      	movs	r3, #1
 80085ee:	0038      	movs	r0, r7
 80085f0:	9908      	ldr	r1, [sp, #32]
 80085f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80085f4:	321a      	adds	r2, #26
 80085f6:	47b0      	blx	r6
 80085f8:	3001      	adds	r0, #1
 80085fa:	d100      	bne.n	80085fe <_printf_float+0x29a>
 80085fc:	e710      	b.n	8008420 <_printf_float+0xbc>
 80085fe:	3501      	adds	r5, #1
 8008600:	e7e4      	b.n	80085cc <_printf_float+0x268>
 8008602:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008604:	2b00      	cmp	r3, #0
 8008606:	dc3b      	bgt.n	8008680 <_printf_float+0x31c>
 8008608:	2301      	movs	r3, #1
 800860a:	0038      	movs	r0, r7
 800860c:	4a1b      	ldr	r2, [pc, #108]	; (800867c <_printf_float+0x318>)
 800860e:	9908      	ldr	r1, [sp, #32]
 8008610:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008612:	47b0      	blx	r6
 8008614:	3001      	adds	r0, #1
 8008616:	d100      	bne.n	800861a <_printf_float+0x2b6>
 8008618:	e702      	b.n	8008420 <_printf_float+0xbc>
 800861a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800861c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800861e:	4313      	orrs	r3, r2
 8008620:	d102      	bne.n	8008628 <_printf_float+0x2c4>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	07db      	lsls	r3, r3, #31
 8008626:	d5d5      	bpl.n	80085d4 <_printf_float+0x270>
 8008628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800862a:	0038      	movs	r0, r7
 800862c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800862e:	9908      	ldr	r1, [sp, #32]
 8008630:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008632:	47b0      	blx	r6
 8008634:	2300      	movs	r3, #0
 8008636:	3001      	adds	r0, #1
 8008638:	d100      	bne.n	800863c <_printf_float+0x2d8>
 800863a:	e6f1      	b.n	8008420 <_printf_float+0xbc>
 800863c:	930a      	str	r3, [sp, #40]	; 0x28
 800863e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008642:	425b      	negs	r3, r3
 8008644:	4293      	cmp	r3, r2
 8008646:	dc01      	bgt.n	800864c <_printf_float+0x2e8>
 8008648:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800864a:	e791      	b.n	8008570 <_printf_float+0x20c>
 800864c:	0022      	movs	r2, r4
 800864e:	2301      	movs	r3, #1
 8008650:	0038      	movs	r0, r7
 8008652:	9908      	ldr	r1, [sp, #32]
 8008654:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008656:	321a      	adds	r2, #26
 8008658:	47b0      	blx	r6
 800865a:	3001      	adds	r0, #1
 800865c:	d100      	bne.n	8008660 <_printf_float+0x2fc>
 800865e:	e6df      	b.n	8008420 <_printf_float+0xbc>
 8008660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008662:	3301      	adds	r3, #1
 8008664:	e7ea      	b.n	800863c <_printf_float+0x2d8>
 8008666:	46c0      	nop			; (mov r8, r8)
 8008668:	7fefffff 	.word	0x7fefffff
 800866c:	0800d368 	.word	0x0800d368
 8008670:	0800d36c 	.word	0x0800d36c
 8008674:	0800d370 	.word	0x0800d370
 8008678:	0800d374 	.word	0x0800d374
 800867c:	0800d378 	.word	0x0800d378
 8008680:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008682:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008684:	920a      	str	r2, [sp, #40]	; 0x28
 8008686:	429a      	cmp	r2, r3
 8008688:	dd00      	ble.n	800868c <_printf_float+0x328>
 800868a:	930a      	str	r3, [sp, #40]	; 0x28
 800868c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800868e:	2b00      	cmp	r3, #0
 8008690:	dc3d      	bgt.n	800870e <_printf_float+0x3aa>
 8008692:	2300      	movs	r3, #0
 8008694:	930e      	str	r3, [sp, #56]	; 0x38
 8008696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008698:	43db      	mvns	r3, r3
 800869a:	17db      	asrs	r3, r3, #31
 800869c:	930f      	str	r3, [sp, #60]	; 0x3c
 800869e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80086a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086a6:	4013      	ands	r3, r2
 80086a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086ae:	4293      	cmp	r3, r2
 80086b0:	dc36      	bgt.n	8008720 <_printf_float+0x3bc>
 80086b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086b6:	429a      	cmp	r2, r3
 80086b8:	db40      	blt.n	800873c <_printf_float+0x3d8>
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	07db      	lsls	r3, r3, #31
 80086be:	d43d      	bmi.n	800873c <_printf_float+0x3d8>
 80086c0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80086c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086c6:	1af3      	subs	r3, r6, r3
 80086c8:	1ab6      	subs	r6, r6, r2
 80086ca:	429e      	cmp	r6, r3
 80086cc:	dd00      	ble.n	80086d0 <_printf_float+0x36c>
 80086ce:	001e      	movs	r6, r3
 80086d0:	2e00      	cmp	r6, #0
 80086d2:	dc3c      	bgt.n	800874e <_printf_float+0x3ea>
 80086d4:	2300      	movs	r3, #0
 80086d6:	930a      	str	r3, [sp, #40]	; 0x28
 80086d8:	43f3      	mvns	r3, r6
 80086da:	17db      	asrs	r3, r3, #31
 80086dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80086de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086e2:	1a9b      	subs	r3, r3, r2
 80086e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086e6:	4032      	ands	r2, r6
 80086e8:	1a9b      	subs	r3, r3, r2
 80086ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086ec:	4293      	cmp	r3, r2
 80086ee:	dc00      	bgt.n	80086f2 <_printf_float+0x38e>
 80086f0:	e770      	b.n	80085d4 <_printf_float+0x270>
 80086f2:	0022      	movs	r2, r4
 80086f4:	2301      	movs	r3, #1
 80086f6:	0038      	movs	r0, r7
 80086f8:	9908      	ldr	r1, [sp, #32]
 80086fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80086fc:	321a      	adds	r2, #26
 80086fe:	47a8      	blx	r5
 8008700:	3001      	adds	r0, #1
 8008702:	d100      	bne.n	8008706 <_printf_float+0x3a2>
 8008704:	e68c      	b.n	8008420 <_printf_float+0xbc>
 8008706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008708:	3301      	adds	r3, #1
 800870a:	930a      	str	r3, [sp, #40]	; 0x28
 800870c:	e7e7      	b.n	80086de <_printf_float+0x37a>
 800870e:	002a      	movs	r2, r5
 8008710:	0038      	movs	r0, r7
 8008712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008714:	9908      	ldr	r1, [sp, #32]
 8008716:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008718:	47b0      	blx	r6
 800871a:	3001      	adds	r0, #1
 800871c:	d1b9      	bne.n	8008692 <_printf_float+0x32e>
 800871e:	e67f      	b.n	8008420 <_printf_float+0xbc>
 8008720:	0022      	movs	r2, r4
 8008722:	2301      	movs	r3, #1
 8008724:	0038      	movs	r0, r7
 8008726:	9908      	ldr	r1, [sp, #32]
 8008728:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800872a:	321a      	adds	r2, #26
 800872c:	47b0      	blx	r6
 800872e:	3001      	adds	r0, #1
 8008730:	d100      	bne.n	8008734 <_printf_float+0x3d0>
 8008732:	e675      	b.n	8008420 <_printf_float+0xbc>
 8008734:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008736:	3301      	adds	r3, #1
 8008738:	930e      	str	r3, [sp, #56]	; 0x38
 800873a:	e7b0      	b.n	800869e <_printf_float+0x33a>
 800873c:	0038      	movs	r0, r7
 800873e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008740:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008742:	9908      	ldr	r1, [sp, #32]
 8008744:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008746:	47b0      	blx	r6
 8008748:	3001      	adds	r0, #1
 800874a:	d1b9      	bne.n	80086c0 <_printf_float+0x35c>
 800874c:	e668      	b.n	8008420 <_printf_float+0xbc>
 800874e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008750:	0038      	movs	r0, r7
 8008752:	18ea      	adds	r2, r5, r3
 8008754:	9908      	ldr	r1, [sp, #32]
 8008756:	0033      	movs	r3, r6
 8008758:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800875a:	47a8      	blx	r5
 800875c:	3001      	adds	r0, #1
 800875e:	d1b9      	bne.n	80086d4 <_printf_float+0x370>
 8008760:	e65e      	b.n	8008420 <_printf_float+0xbc>
 8008762:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008764:	2b01      	cmp	r3, #1
 8008766:	dc02      	bgt.n	800876e <_printf_float+0x40a>
 8008768:	2301      	movs	r3, #1
 800876a:	421a      	tst	r2, r3
 800876c:	d03a      	beq.n	80087e4 <_printf_float+0x480>
 800876e:	2301      	movs	r3, #1
 8008770:	002a      	movs	r2, r5
 8008772:	0038      	movs	r0, r7
 8008774:	9908      	ldr	r1, [sp, #32]
 8008776:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008778:	47b0      	blx	r6
 800877a:	3001      	adds	r0, #1
 800877c:	d100      	bne.n	8008780 <_printf_float+0x41c>
 800877e:	e64f      	b.n	8008420 <_printf_float+0xbc>
 8008780:	0038      	movs	r0, r7
 8008782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008784:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008786:	9908      	ldr	r1, [sp, #32]
 8008788:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800878a:	47b0      	blx	r6
 800878c:	3001      	adds	r0, #1
 800878e:	d100      	bne.n	8008792 <_printf_float+0x42e>
 8008790:	e646      	b.n	8008420 <_printf_float+0xbc>
 8008792:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008794:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008796:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008798:	2200      	movs	r2, #0
 800879a:	001e      	movs	r6, r3
 800879c:	2300      	movs	r3, #0
 800879e:	f7f7 fe55 	bl	800044c <__aeabi_dcmpeq>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d11c      	bne.n	80087e0 <_printf_float+0x47c>
 80087a6:	0033      	movs	r3, r6
 80087a8:	1c6a      	adds	r2, r5, #1
 80087aa:	3b01      	subs	r3, #1
 80087ac:	0038      	movs	r0, r7
 80087ae:	9908      	ldr	r1, [sp, #32]
 80087b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80087b2:	47a8      	blx	r5
 80087b4:	3001      	adds	r0, #1
 80087b6:	d10f      	bne.n	80087d8 <_printf_float+0x474>
 80087b8:	e632      	b.n	8008420 <_printf_float+0xbc>
 80087ba:	0022      	movs	r2, r4
 80087bc:	2301      	movs	r3, #1
 80087be:	0038      	movs	r0, r7
 80087c0:	9908      	ldr	r1, [sp, #32]
 80087c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80087c4:	321a      	adds	r2, #26
 80087c6:	47b0      	blx	r6
 80087c8:	3001      	adds	r0, #1
 80087ca:	d100      	bne.n	80087ce <_printf_float+0x46a>
 80087cc:	e628      	b.n	8008420 <_printf_float+0xbc>
 80087ce:	3501      	adds	r5, #1
 80087d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087d2:	3b01      	subs	r3, #1
 80087d4:	42ab      	cmp	r3, r5
 80087d6:	dcf0      	bgt.n	80087ba <_printf_float+0x456>
 80087d8:	0022      	movs	r2, r4
 80087da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087dc:	3250      	adds	r2, #80	; 0x50
 80087de:	e6c8      	b.n	8008572 <_printf_float+0x20e>
 80087e0:	2500      	movs	r5, #0
 80087e2:	e7f5      	b.n	80087d0 <_printf_float+0x46c>
 80087e4:	002a      	movs	r2, r5
 80087e6:	e7e1      	b.n	80087ac <_printf_float+0x448>
 80087e8:	0022      	movs	r2, r4
 80087ea:	2301      	movs	r3, #1
 80087ec:	0038      	movs	r0, r7
 80087ee:	9908      	ldr	r1, [sp, #32]
 80087f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80087f2:	3219      	adds	r2, #25
 80087f4:	47b0      	blx	r6
 80087f6:	3001      	adds	r0, #1
 80087f8:	d100      	bne.n	80087fc <_printf_float+0x498>
 80087fa:	e611      	b.n	8008420 <_printf_float+0xbc>
 80087fc:	3501      	adds	r5, #1
 80087fe:	68e3      	ldr	r3, [r4, #12]
 8008800:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008802:	1a9b      	subs	r3, r3, r2
 8008804:	42ab      	cmp	r3, r5
 8008806:	dcef      	bgt.n	80087e8 <_printf_float+0x484>
 8008808:	e6e8      	b.n	80085dc <_printf_float+0x278>
 800880a:	2500      	movs	r5, #0
 800880c:	e7f7      	b.n	80087fe <_printf_float+0x49a>
 800880e:	46c0      	nop			; (mov r8, r8)

08008810 <_printf_common>:
 8008810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008812:	0016      	movs	r6, r2
 8008814:	9301      	str	r3, [sp, #4]
 8008816:	688a      	ldr	r2, [r1, #8]
 8008818:	690b      	ldr	r3, [r1, #16]
 800881a:	000c      	movs	r4, r1
 800881c:	9000      	str	r0, [sp, #0]
 800881e:	4293      	cmp	r3, r2
 8008820:	da00      	bge.n	8008824 <_printf_common+0x14>
 8008822:	0013      	movs	r3, r2
 8008824:	0022      	movs	r2, r4
 8008826:	6033      	str	r3, [r6, #0]
 8008828:	3243      	adds	r2, #67	; 0x43
 800882a:	7812      	ldrb	r2, [r2, #0]
 800882c:	2a00      	cmp	r2, #0
 800882e:	d001      	beq.n	8008834 <_printf_common+0x24>
 8008830:	3301      	adds	r3, #1
 8008832:	6033      	str	r3, [r6, #0]
 8008834:	6823      	ldr	r3, [r4, #0]
 8008836:	069b      	lsls	r3, r3, #26
 8008838:	d502      	bpl.n	8008840 <_printf_common+0x30>
 800883a:	6833      	ldr	r3, [r6, #0]
 800883c:	3302      	adds	r3, #2
 800883e:	6033      	str	r3, [r6, #0]
 8008840:	6822      	ldr	r2, [r4, #0]
 8008842:	2306      	movs	r3, #6
 8008844:	0015      	movs	r5, r2
 8008846:	401d      	ands	r5, r3
 8008848:	421a      	tst	r2, r3
 800884a:	d027      	beq.n	800889c <_printf_common+0x8c>
 800884c:	0023      	movs	r3, r4
 800884e:	3343      	adds	r3, #67	; 0x43
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	1e5a      	subs	r2, r3, #1
 8008854:	4193      	sbcs	r3, r2
 8008856:	6822      	ldr	r2, [r4, #0]
 8008858:	0692      	lsls	r2, r2, #26
 800885a:	d430      	bmi.n	80088be <_printf_common+0xae>
 800885c:	0022      	movs	r2, r4
 800885e:	9901      	ldr	r1, [sp, #4]
 8008860:	9800      	ldr	r0, [sp, #0]
 8008862:	9d08      	ldr	r5, [sp, #32]
 8008864:	3243      	adds	r2, #67	; 0x43
 8008866:	47a8      	blx	r5
 8008868:	3001      	adds	r0, #1
 800886a:	d025      	beq.n	80088b8 <_printf_common+0xa8>
 800886c:	2206      	movs	r2, #6
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	2500      	movs	r5, #0
 8008872:	4013      	ands	r3, r2
 8008874:	2b04      	cmp	r3, #4
 8008876:	d105      	bne.n	8008884 <_printf_common+0x74>
 8008878:	6833      	ldr	r3, [r6, #0]
 800887a:	68e5      	ldr	r5, [r4, #12]
 800887c:	1aed      	subs	r5, r5, r3
 800887e:	43eb      	mvns	r3, r5
 8008880:	17db      	asrs	r3, r3, #31
 8008882:	401d      	ands	r5, r3
 8008884:	68a3      	ldr	r3, [r4, #8]
 8008886:	6922      	ldr	r2, [r4, #16]
 8008888:	4293      	cmp	r3, r2
 800888a:	dd01      	ble.n	8008890 <_printf_common+0x80>
 800888c:	1a9b      	subs	r3, r3, r2
 800888e:	18ed      	adds	r5, r5, r3
 8008890:	2600      	movs	r6, #0
 8008892:	42b5      	cmp	r5, r6
 8008894:	d120      	bne.n	80088d8 <_printf_common+0xc8>
 8008896:	2000      	movs	r0, #0
 8008898:	e010      	b.n	80088bc <_printf_common+0xac>
 800889a:	3501      	adds	r5, #1
 800889c:	68e3      	ldr	r3, [r4, #12]
 800889e:	6832      	ldr	r2, [r6, #0]
 80088a0:	1a9b      	subs	r3, r3, r2
 80088a2:	42ab      	cmp	r3, r5
 80088a4:	ddd2      	ble.n	800884c <_printf_common+0x3c>
 80088a6:	0022      	movs	r2, r4
 80088a8:	2301      	movs	r3, #1
 80088aa:	9901      	ldr	r1, [sp, #4]
 80088ac:	9800      	ldr	r0, [sp, #0]
 80088ae:	9f08      	ldr	r7, [sp, #32]
 80088b0:	3219      	adds	r2, #25
 80088b2:	47b8      	blx	r7
 80088b4:	3001      	adds	r0, #1
 80088b6:	d1f0      	bne.n	800889a <_printf_common+0x8a>
 80088b8:	2001      	movs	r0, #1
 80088ba:	4240      	negs	r0, r0
 80088bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088be:	2030      	movs	r0, #48	; 0x30
 80088c0:	18e1      	adds	r1, r4, r3
 80088c2:	3143      	adds	r1, #67	; 0x43
 80088c4:	7008      	strb	r0, [r1, #0]
 80088c6:	0021      	movs	r1, r4
 80088c8:	1c5a      	adds	r2, r3, #1
 80088ca:	3145      	adds	r1, #69	; 0x45
 80088cc:	7809      	ldrb	r1, [r1, #0]
 80088ce:	18a2      	adds	r2, r4, r2
 80088d0:	3243      	adds	r2, #67	; 0x43
 80088d2:	3302      	adds	r3, #2
 80088d4:	7011      	strb	r1, [r2, #0]
 80088d6:	e7c1      	b.n	800885c <_printf_common+0x4c>
 80088d8:	0022      	movs	r2, r4
 80088da:	2301      	movs	r3, #1
 80088dc:	9901      	ldr	r1, [sp, #4]
 80088de:	9800      	ldr	r0, [sp, #0]
 80088e0:	9f08      	ldr	r7, [sp, #32]
 80088e2:	321a      	adds	r2, #26
 80088e4:	47b8      	blx	r7
 80088e6:	3001      	adds	r0, #1
 80088e8:	d0e6      	beq.n	80088b8 <_printf_common+0xa8>
 80088ea:	3601      	adds	r6, #1
 80088ec:	e7d1      	b.n	8008892 <_printf_common+0x82>
	...

080088f0 <_printf_i>:
 80088f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088f2:	b08b      	sub	sp, #44	; 0x2c
 80088f4:	9206      	str	r2, [sp, #24]
 80088f6:	000a      	movs	r2, r1
 80088f8:	3243      	adds	r2, #67	; 0x43
 80088fa:	9307      	str	r3, [sp, #28]
 80088fc:	9005      	str	r0, [sp, #20]
 80088fe:	9204      	str	r2, [sp, #16]
 8008900:	7e0a      	ldrb	r2, [r1, #24]
 8008902:	000c      	movs	r4, r1
 8008904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008906:	2a78      	cmp	r2, #120	; 0x78
 8008908:	d809      	bhi.n	800891e <_printf_i+0x2e>
 800890a:	2a62      	cmp	r2, #98	; 0x62
 800890c:	d80b      	bhi.n	8008926 <_printf_i+0x36>
 800890e:	2a00      	cmp	r2, #0
 8008910:	d100      	bne.n	8008914 <_printf_i+0x24>
 8008912:	e0be      	b.n	8008a92 <_printf_i+0x1a2>
 8008914:	497c      	ldr	r1, [pc, #496]	; (8008b08 <_printf_i+0x218>)
 8008916:	9103      	str	r1, [sp, #12]
 8008918:	2a58      	cmp	r2, #88	; 0x58
 800891a:	d100      	bne.n	800891e <_printf_i+0x2e>
 800891c:	e093      	b.n	8008a46 <_printf_i+0x156>
 800891e:	0026      	movs	r6, r4
 8008920:	3642      	adds	r6, #66	; 0x42
 8008922:	7032      	strb	r2, [r6, #0]
 8008924:	e022      	b.n	800896c <_printf_i+0x7c>
 8008926:	0010      	movs	r0, r2
 8008928:	3863      	subs	r0, #99	; 0x63
 800892a:	2815      	cmp	r0, #21
 800892c:	d8f7      	bhi.n	800891e <_printf_i+0x2e>
 800892e:	f7f7 fbfd 	bl	800012c <__gnu_thumb1_case_shi>
 8008932:	0016      	.short	0x0016
 8008934:	fff6001f 	.word	0xfff6001f
 8008938:	fff6fff6 	.word	0xfff6fff6
 800893c:	001ffff6 	.word	0x001ffff6
 8008940:	fff6fff6 	.word	0xfff6fff6
 8008944:	fff6fff6 	.word	0xfff6fff6
 8008948:	003600a3 	.word	0x003600a3
 800894c:	fff60083 	.word	0xfff60083
 8008950:	00b4fff6 	.word	0x00b4fff6
 8008954:	0036fff6 	.word	0x0036fff6
 8008958:	fff6fff6 	.word	0xfff6fff6
 800895c:	0087      	.short	0x0087
 800895e:	0026      	movs	r6, r4
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	3642      	adds	r6, #66	; 0x42
 8008964:	1d11      	adds	r1, r2, #4
 8008966:	6019      	str	r1, [r3, #0]
 8008968:	6813      	ldr	r3, [r2, #0]
 800896a:	7033      	strb	r3, [r6, #0]
 800896c:	2301      	movs	r3, #1
 800896e:	e0a2      	b.n	8008ab6 <_printf_i+0x1c6>
 8008970:	6818      	ldr	r0, [r3, #0]
 8008972:	6809      	ldr	r1, [r1, #0]
 8008974:	1d02      	adds	r2, r0, #4
 8008976:	060d      	lsls	r5, r1, #24
 8008978:	d50b      	bpl.n	8008992 <_printf_i+0xa2>
 800897a:	6805      	ldr	r5, [r0, #0]
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	2d00      	cmp	r5, #0
 8008980:	da03      	bge.n	800898a <_printf_i+0x9a>
 8008982:	232d      	movs	r3, #45	; 0x2d
 8008984:	9a04      	ldr	r2, [sp, #16]
 8008986:	426d      	negs	r5, r5
 8008988:	7013      	strb	r3, [r2, #0]
 800898a:	4b5f      	ldr	r3, [pc, #380]	; (8008b08 <_printf_i+0x218>)
 800898c:	270a      	movs	r7, #10
 800898e:	9303      	str	r3, [sp, #12]
 8008990:	e01b      	b.n	80089ca <_printf_i+0xda>
 8008992:	6805      	ldr	r5, [r0, #0]
 8008994:	601a      	str	r2, [r3, #0]
 8008996:	0649      	lsls	r1, r1, #25
 8008998:	d5f1      	bpl.n	800897e <_printf_i+0x8e>
 800899a:	b22d      	sxth	r5, r5
 800899c:	e7ef      	b.n	800897e <_printf_i+0x8e>
 800899e:	680d      	ldr	r5, [r1, #0]
 80089a0:	6819      	ldr	r1, [r3, #0]
 80089a2:	1d08      	adds	r0, r1, #4
 80089a4:	6018      	str	r0, [r3, #0]
 80089a6:	062e      	lsls	r6, r5, #24
 80089a8:	d501      	bpl.n	80089ae <_printf_i+0xbe>
 80089aa:	680d      	ldr	r5, [r1, #0]
 80089ac:	e003      	b.n	80089b6 <_printf_i+0xc6>
 80089ae:	066d      	lsls	r5, r5, #25
 80089b0:	d5fb      	bpl.n	80089aa <_printf_i+0xba>
 80089b2:	680d      	ldr	r5, [r1, #0]
 80089b4:	b2ad      	uxth	r5, r5
 80089b6:	4b54      	ldr	r3, [pc, #336]	; (8008b08 <_printf_i+0x218>)
 80089b8:	2708      	movs	r7, #8
 80089ba:	9303      	str	r3, [sp, #12]
 80089bc:	2a6f      	cmp	r2, #111	; 0x6f
 80089be:	d000      	beq.n	80089c2 <_printf_i+0xd2>
 80089c0:	3702      	adds	r7, #2
 80089c2:	0023      	movs	r3, r4
 80089c4:	2200      	movs	r2, #0
 80089c6:	3343      	adds	r3, #67	; 0x43
 80089c8:	701a      	strb	r2, [r3, #0]
 80089ca:	6863      	ldr	r3, [r4, #4]
 80089cc:	60a3      	str	r3, [r4, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	db03      	blt.n	80089da <_printf_i+0xea>
 80089d2:	2104      	movs	r1, #4
 80089d4:	6822      	ldr	r2, [r4, #0]
 80089d6:	438a      	bics	r2, r1
 80089d8:	6022      	str	r2, [r4, #0]
 80089da:	2d00      	cmp	r5, #0
 80089dc:	d102      	bne.n	80089e4 <_printf_i+0xf4>
 80089de:	9e04      	ldr	r6, [sp, #16]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00c      	beq.n	80089fe <_printf_i+0x10e>
 80089e4:	9e04      	ldr	r6, [sp, #16]
 80089e6:	0028      	movs	r0, r5
 80089e8:	0039      	movs	r1, r7
 80089ea:	f7f7 fc2f 	bl	800024c <__aeabi_uidivmod>
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	3e01      	subs	r6, #1
 80089f2:	5c5b      	ldrb	r3, [r3, r1]
 80089f4:	7033      	strb	r3, [r6, #0]
 80089f6:	002b      	movs	r3, r5
 80089f8:	0005      	movs	r5, r0
 80089fa:	429f      	cmp	r7, r3
 80089fc:	d9f3      	bls.n	80089e6 <_printf_i+0xf6>
 80089fe:	2f08      	cmp	r7, #8
 8008a00:	d109      	bne.n	8008a16 <_printf_i+0x126>
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	07db      	lsls	r3, r3, #31
 8008a06:	d506      	bpl.n	8008a16 <_printf_i+0x126>
 8008a08:	6862      	ldr	r2, [r4, #4]
 8008a0a:	6923      	ldr	r3, [r4, #16]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	dc02      	bgt.n	8008a16 <_printf_i+0x126>
 8008a10:	2330      	movs	r3, #48	; 0x30
 8008a12:	3e01      	subs	r6, #1
 8008a14:	7033      	strb	r3, [r6, #0]
 8008a16:	9b04      	ldr	r3, [sp, #16]
 8008a18:	1b9b      	subs	r3, r3, r6
 8008a1a:	6123      	str	r3, [r4, #16]
 8008a1c:	9b07      	ldr	r3, [sp, #28]
 8008a1e:	0021      	movs	r1, r4
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	9805      	ldr	r0, [sp, #20]
 8008a24:	9b06      	ldr	r3, [sp, #24]
 8008a26:	aa09      	add	r2, sp, #36	; 0x24
 8008a28:	f7ff fef2 	bl	8008810 <_printf_common>
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	d147      	bne.n	8008ac0 <_printf_i+0x1d0>
 8008a30:	2001      	movs	r0, #1
 8008a32:	4240      	negs	r0, r0
 8008a34:	b00b      	add	sp, #44	; 0x2c
 8008a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a38:	2220      	movs	r2, #32
 8008a3a:	6809      	ldr	r1, [r1, #0]
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	6022      	str	r2, [r4, #0]
 8008a40:	2278      	movs	r2, #120	; 0x78
 8008a42:	4932      	ldr	r1, [pc, #200]	; (8008b0c <_printf_i+0x21c>)
 8008a44:	9103      	str	r1, [sp, #12]
 8008a46:	0021      	movs	r1, r4
 8008a48:	3145      	adds	r1, #69	; 0x45
 8008a4a:	700a      	strb	r2, [r1, #0]
 8008a4c:	6819      	ldr	r1, [r3, #0]
 8008a4e:	6822      	ldr	r2, [r4, #0]
 8008a50:	c920      	ldmia	r1!, {r5}
 8008a52:	0610      	lsls	r0, r2, #24
 8008a54:	d402      	bmi.n	8008a5c <_printf_i+0x16c>
 8008a56:	0650      	lsls	r0, r2, #25
 8008a58:	d500      	bpl.n	8008a5c <_printf_i+0x16c>
 8008a5a:	b2ad      	uxth	r5, r5
 8008a5c:	6019      	str	r1, [r3, #0]
 8008a5e:	07d3      	lsls	r3, r2, #31
 8008a60:	d502      	bpl.n	8008a68 <_printf_i+0x178>
 8008a62:	2320      	movs	r3, #32
 8008a64:	4313      	orrs	r3, r2
 8008a66:	6023      	str	r3, [r4, #0]
 8008a68:	2710      	movs	r7, #16
 8008a6a:	2d00      	cmp	r5, #0
 8008a6c:	d1a9      	bne.n	80089c2 <_printf_i+0xd2>
 8008a6e:	2220      	movs	r2, #32
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	4393      	bics	r3, r2
 8008a74:	6023      	str	r3, [r4, #0]
 8008a76:	e7a4      	b.n	80089c2 <_printf_i+0xd2>
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	680d      	ldr	r5, [r1, #0]
 8008a7c:	1d10      	adds	r0, r2, #4
 8008a7e:	6949      	ldr	r1, [r1, #20]
 8008a80:	6018      	str	r0, [r3, #0]
 8008a82:	6813      	ldr	r3, [r2, #0]
 8008a84:	062e      	lsls	r6, r5, #24
 8008a86:	d501      	bpl.n	8008a8c <_printf_i+0x19c>
 8008a88:	6019      	str	r1, [r3, #0]
 8008a8a:	e002      	b.n	8008a92 <_printf_i+0x1a2>
 8008a8c:	066d      	lsls	r5, r5, #25
 8008a8e:	d5fb      	bpl.n	8008a88 <_printf_i+0x198>
 8008a90:	8019      	strh	r1, [r3, #0]
 8008a92:	2300      	movs	r3, #0
 8008a94:	9e04      	ldr	r6, [sp, #16]
 8008a96:	6123      	str	r3, [r4, #16]
 8008a98:	e7c0      	b.n	8008a1c <_printf_i+0x12c>
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	1d11      	adds	r1, r2, #4
 8008a9e:	6019      	str	r1, [r3, #0]
 8008aa0:	6816      	ldr	r6, [r2, #0]
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	0030      	movs	r0, r6
 8008aa6:	6862      	ldr	r2, [r4, #4]
 8008aa8:	f000 fa1d 	bl	8008ee6 <memchr>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d001      	beq.n	8008ab4 <_printf_i+0x1c4>
 8008ab0:	1b80      	subs	r0, r0, r6
 8008ab2:	6060      	str	r0, [r4, #4]
 8008ab4:	6863      	ldr	r3, [r4, #4]
 8008ab6:	6123      	str	r3, [r4, #16]
 8008ab8:	2300      	movs	r3, #0
 8008aba:	9a04      	ldr	r2, [sp, #16]
 8008abc:	7013      	strb	r3, [r2, #0]
 8008abe:	e7ad      	b.n	8008a1c <_printf_i+0x12c>
 8008ac0:	0032      	movs	r2, r6
 8008ac2:	6923      	ldr	r3, [r4, #16]
 8008ac4:	9906      	ldr	r1, [sp, #24]
 8008ac6:	9805      	ldr	r0, [sp, #20]
 8008ac8:	9d07      	ldr	r5, [sp, #28]
 8008aca:	47a8      	blx	r5
 8008acc:	3001      	adds	r0, #1
 8008ace:	d0af      	beq.n	8008a30 <_printf_i+0x140>
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	079b      	lsls	r3, r3, #30
 8008ad4:	d415      	bmi.n	8008b02 <_printf_i+0x212>
 8008ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad8:	68e0      	ldr	r0, [r4, #12]
 8008ada:	4298      	cmp	r0, r3
 8008adc:	daaa      	bge.n	8008a34 <_printf_i+0x144>
 8008ade:	0018      	movs	r0, r3
 8008ae0:	e7a8      	b.n	8008a34 <_printf_i+0x144>
 8008ae2:	0022      	movs	r2, r4
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	9906      	ldr	r1, [sp, #24]
 8008ae8:	9805      	ldr	r0, [sp, #20]
 8008aea:	9e07      	ldr	r6, [sp, #28]
 8008aec:	3219      	adds	r2, #25
 8008aee:	47b0      	blx	r6
 8008af0:	3001      	adds	r0, #1
 8008af2:	d09d      	beq.n	8008a30 <_printf_i+0x140>
 8008af4:	3501      	adds	r5, #1
 8008af6:	68e3      	ldr	r3, [r4, #12]
 8008af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008afa:	1a9b      	subs	r3, r3, r2
 8008afc:	42ab      	cmp	r3, r5
 8008afe:	dcf0      	bgt.n	8008ae2 <_printf_i+0x1f2>
 8008b00:	e7e9      	b.n	8008ad6 <_printf_i+0x1e6>
 8008b02:	2500      	movs	r5, #0
 8008b04:	e7f7      	b.n	8008af6 <_printf_i+0x206>
 8008b06:	46c0      	nop			; (mov r8, r8)
 8008b08:	0800d37a 	.word	0x0800d37a
 8008b0c:	0800d38b 	.word	0x0800d38b

08008b10 <std>:
 8008b10:	2300      	movs	r3, #0
 8008b12:	b510      	push	{r4, lr}
 8008b14:	0004      	movs	r4, r0
 8008b16:	6003      	str	r3, [r0, #0]
 8008b18:	6043      	str	r3, [r0, #4]
 8008b1a:	6083      	str	r3, [r0, #8]
 8008b1c:	8181      	strh	r1, [r0, #12]
 8008b1e:	6643      	str	r3, [r0, #100]	; 0x64
 8008b20:	81c2      	strh	r2, [r0, #14]
 8008b22:	6103      	str	r3, [r0, #16]
 8008b24:	6143      	str	r3, [r0, #20]
 8008b26:	6183      	str	r3, [r0, #24]
 8008b28:	0019      	movs	r1, r3
 8008b2a:	2208      	movs	r2, #8
 8008b2c:	305c      	adds	r0, #92	; 0x5c
 8008b2e:	f000 f953 	bl	8008dd8 <memset>
 8008b32:	4b0b      	ldr	r3, [pc, #44]	; (8008b60 <std+0x50>)
 8008b34:	6224      	str	r4, [r4, #32]
 8008b36:	6263      	str	r3, [r4, #36]	; 0x24
 8008b38:	4b0a      	ldr	r3, [pc, #40]	; (8008b64 <std+0x54>)
 8008b3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b3c:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <std+0x58>)
 8008b3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b40:	4b0a      	ldr	r3, [pc, #40]	; (8008b6c <std+0x5c>)
 8008b42:	6323      	str	r3, [r4, #48]	; 0x30
 8008b44:	4b0a      	ldr	r3, [pc, #40]	; (8008b70 <std+0x60>)
 8008b46:	429c      	cmp	r4, r3
 8008b48:	d005      	beq.n	8008b56 <std+0x46>
 8008b4a:	4b0a      	ldr	r3, [pc, #40]	; (8008b74 <std+0x64>)
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	d002      	beq.n	8008b56 <std+0x46>
 8008b50:	4b09      	ldr	r3, [pc, #36]	; (8008b78 <std+0x68>)
 8008b52:	429c      	cmp	r4, r3
 8008b54:	d103      	bne.n	8008b5e <std+0x4e>
 8008b56:	0020      	movs	r0, r4
 8008b58:	3058      	adds	r0, #88	; 0x58
 8008b5a:	f000 f9c1 	bl	8008ee0 <__retarget_lock_init_recursive>
 8008b5e:	bd10      	pop	{r4, pc}
 8008b60:	08008d41 	.word	0x08008d41
 8008b64:	08008d69 	.word	0x08008d69
 8008b68:	08008da1 	.word	0x08008da1
 8008b6c:	08008dcd 	.word	0x08008dcd
 8008b70:	20000880 	.word	0x20000880
 8008b74:	200008e8 	.word	0x200008e8
 8008b78:	20000950 	.word	0x20000950

08008b7c <stdio_exit_handler>:
 8008b7c:	b510      	push	{r4, lr}
 8008b7e:	4a03      	ldr	r2, [pc, #12]	; (8008b8c <stdio_exit_handler+0x10>)
 8008b80:	4903      	ldr	r1, [pc, #12]	; (8008b90 <stdio_exit_handler+0x14>)
 8008b82:	4804      	ldr	r0, [pc, #16]	; (8008b94 <stdio_exit_handler+0x18>)
 8008b84:	f000 f86c 	bl	8008c60 <_fwalk_sglue>
 8008b88:	bd10      	pop	{r4, pc}
 8008b8a:	46c0      	nop			; (mov r8, r8)
 8008b8c:	20000028 	.word	0x20000028
 8008b90:	0800a955 	.word	0x0800a955
 8008b94:	20000034 	.word	0x20000034

08008b98 <cleanup_stdio>:
 8008b98:	6841      	ldr	r1, [r0, #4]
 8008b9a:	4b0b      	ldr	r3, [pc, #44]	; (8008bc8 <cleanup_stdio+0x30>)
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	0004      	movs	r4, r0
 8008ba0:	4299      	cmp	r1, r3
 8008ba2:	d001      	beq.n	8008ba8 <cleanup_stdio+0x10>
 8008ba4:	f001 fed6 	bl	800a954 <_fflush_r>
 8008ba8:	68a1      	ldr	r1, [r4, #8]
 8008baa:	4b08      	ldr	r3, [pc, #32]	; (8008bcc <cleanup_stdio+0x34>)
 8008bac:	4299      	cmp	r1, r3
 8008bae:	d002      	beq.n	8008bb6 <cleanup_stdio+0x1e>
 8008bb0:	0020      	movs	r0, r4
 8008bb2:	f001 fecf 	bl	800a954 <_fflush_r>
 8008bb6:	68e1      	ldr	r1, [r4, #12]
 8008bb8:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <cleanup_stdio+0x38>)
 8008bba:	4299      	cmp	r1, r3
 8008bbc:	d002      	beq.n	8008bc4 <cleanup_stdio+0x2c>
 8008bbe:	0020      	movs	r0, r4
 8008bc0:	f001 fec8 	bl	800a954 <_fflush_r>
 8008bc4:	bd10      	pop	{r4, pc}
 8008bc6:	46c0      	nop			; (mov r8, r8)
 8008bc8:	20000880 	.word	0x20000880
 8008bcc:	200008e8 	.word	0x200008e8
 8008bd0:	20000950 	.word	0x20000950

08008bd4 <global_stdio_init.part.0>:
 8008bd4:	b510      	push	{r4, lr}
 8008bd6:	4b09      	ldr	r3, [pc, #36]	; (8008bfc <global_stdio_init.part.0+0x28>)
 8008bd8:	4a09      	ldr	r2, [pc, #36]	; (8008c00 <global_stdio_init.part.0+0x2c>)
 8008bda:	2104      	movs	r1, #4
 8008bdc:	601a      	str	r2, [r3, #0]
 8008bde:	4809      	ldr	r0, [pc, #36]	; (8008c04 <global_stdio_init.part.0+0x30>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	f7ff ff95 	bl	8008b10 <std>
 8008be6:	2201      	movs	r2, #1
 8008be8:	2109      	movs	r1, #9
 8008bea:	4807      	ldr	r0, [pc, #28]	; (8008c08 <global_stdio_init.part.0+0x34>)
 8008bec:	f7ff ff90 	bl	8008b10 <std>
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	2112      	movs	r1, #18
 8008bf4:	4805      	ldr	r0, [pc, #20]	; (8008c0c <global_stdio_init.part.0+0x38>)
 8008bf6:	f7ff ff8b 	bl	8008b10 <std>
 8008bfa:	bd10      	pop	{r4, pc}
 8008bfc:	200009b8 	.word	0x200009b8
 8008c00:	08008b7d 	.word	0x08008b7d
 8008c04:	20000880 	.word	0x20000880
 8008c08:	200008e8 	.word	0x200008e8
 8008c0c:	20000950 	.word	0x20000950

08008c10 <__sfp_lock_acquire>:
 8008c10:	b510      	push	{r4, lr}
 8008c12:	4802      	ldr	r0, [pc, #8]	; (8008c1c <__sfp_lock_acquire+0xc>)
 8008c14:	f000 f965 	bl	8008ee2 <__retarget_lock_acquire_recursive>
 8008c18:	bd10      	pop	{r4, pc}
 8008c1a:	46c0      	nop			; (mov r8, r8)
 8008c1c:	200009c1 	.word	0x200009c1

08008c20 <__sfp_lock_release>:
 8008c20:	b510      	push	{r4, lr}
 8008c22:	4802      	ldr	r0, [pc, #8]	; (8008c2c <__sfp_lock_release+0xc>)
 8008c24:	f000 f95e 	bl	8008ee4 <__retarget_lock_release_recursive>
 8008c28:	bd10      	pop	{r4, pc}
 8008c2a:	46c0      	nop			; (mov r8, r8)
 8008c2c:	200009c1 	.word	0x200009c1

08008c30 <__sinit>:
 8008c30:	b510      	push	{r4, lr}
 8008c32:	0004      	movs	r4, r0
 8008c34:	f7ff ffec 	bl	8008c10 <__sfp_lock_acquire>
 8008c38:	6a23      	ldr	r3, [r4, #32]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d002      	beq.n	8008c44 <__sinit+0x14>
 8008c3e:	f7ff ffef 	bl	8008c20 <__sfp_lock_release>
 8008c42:	bd10      	pop	{r4, pc}
 8008c44:	4b04      	ldr	r3, [pc, #16]	; (8008c58 <__sinit+0x28>)
 8008c46:	6223      	str	r3, [r4, #32]
 8008c48:	4b04      	ldr	r3, [pc, #16]	; (8008c5c <__sinit+0x2c>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1f6      	bne.n	8008c3e <__sinit+0xe>
 8008c50:	f7ff ffc0 	bl	8008bd4 <global_stdio_init.part.0>
 8008c54:	e7f3      	b.n	8008c3e <__sinit+0xe>
 8008c56:	46c0      	nop			; (mov r8, r8)
 8008c58:	08008b99 	.word	0x08008b99
 8008c5c:	200009b8 	.word	0x200009b8

08008c60 <_fwalk_sglue>:
 8008c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c62:	0014      	movs	r4, r2
 8008c64:	2600      	movs	r6, #0
 8008c66:	9000      	str	r0, [sp, #0]
 8008c68:	9101      	str	r1, [sp, #4]
 8008c6a:	68a5      	ldr	r5, [r4, #8]
 8008c6c:	6867      	ldr	r7, [r4, #4]
 8008c6e:	3f01      	subs	r7, #1
 8008c70:	d504      	bpl.n	8008c7c <_fwalk_sglue+0x1c>
 8008c72:	6824      	ldr	r4, [r4, #0]
 8008c74:	2c00      	cmp	r4, #0
 8008c76:	d1f8      	bne.n	8008c6a <_fwalk_sglue+0xa>
 8008c78:	0030      	movs	r0, r6
 8008c7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c7c:	89ab      	ldrh	r3, [r5, #12]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d908      	bls.n	8008c94 <_fwalk_sglue+0x34>
 8008c82:	220e      	movs	r2, #14
 8008c84:	5eab      	ldrsh	r3, [r5, r2]
 8008c86:	3301      	adds	r3, #1
 8008c88:	d004      	beq.n	8008c94 <_fwalk_sglue+0x34>
 8008c8a:	0029      	movs	r1, r5
 8008c8c:	9800      	ldr	r0, [sp, #0]
 8008c8e:	9b01      	ldr	r3, [sp, #4]
 8008c90:	4798      	blx	r3
 8008c92:	4306      	orrs	r6, r0
 8008c94:	3568      	adds	r5, #104	; 0x68
 8008c96:	e7ea      	b.n	8008c6e <_fwalk_sglue+0xe>

08008c98 <sniprintf>:
 8008c98:	b40c      	push	{r2, r3}
 8008c9a:	b530      	push	{r4, r5, lr}
 8008c9c:	4b17      	ldr	r3, [pc, #92]	; (8008cfc <sniprintf+0x64>)
 8008c9e:	000c      	movs	r4, r1
 8008ca0:	681d      	ldr	r5, [r3, #0]
 8008ca2:	b09d      	sub	sp, #116	; 0x74
 8008ca4:	2900      	cmp	r1, #0
 8008ca6:	da08      	bge.n	8008cba <sniprintf+0x22>
 8008ca8:	238b      	movs	r3, #139	; 0x8b
 8008caa:	2001      	movs	r0, #1
 8008cac:	602b      	str	r3, [r5, #0]
 8008cae:	4240      	negs	r0, r0
 8008cb0:	b01d      	add	sp, #116	; 0x74
 8008cb2:	bc30      	pop	{r4, r5}
 8008cb4:	bc08      	pop	{r3}
 8008cb6:	b002      	add	sp, #8
 8008cb8:	4718      	bx	r3
 8008cba:	2382      	movs	r3, #130	; 0x82
 8008cbc:	466a      	mov	r2, sp
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	8293      	strh	r3, [r2, #20]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	9002      	str	r0, [sp, #8]
 8008cc6:	9006      	str	r0, [sp, #24]
 8008cc8:	4299      	cmp	r1, r3
 8008cca:	d000      	beq.n	8008cce <sniprintf+0x36>
 8008ccc:	1e4b      	subs	r3, r1, #1
 8008cce:	9304      	str	r3, [sp, #16]
 8008cd0:	9307      	str	r3, [sp, #28]
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	466a      	mov	r2, sp
 8008cd6:	425b      	negs	r3, r3
 8008cd8:	82d3      	strh	r3, [r2, #22]
 8008cda:	0028      	movs	r0, r5
 8008cdc:	ab21      	add	r3, sp, #132	; 0x84
 8008cde:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ce0:	a902      	add	r1, sp, #8
 8008ce2:	9301      	str	r3, [sp, #4]
 8008ce4:	f001 fcac 	bl	800a640 <_svfiprintf_r>
 8008ce8:	1c43      	adds	r3, r0, #1
 8008cea:	da01      	bge.n	8008cf0 <sniprintf+0x58>
 8008cec:	238b      	movs	r3, #139	; 0x8b
 8008cee:	602b      	str	r3, [r5, #0]
 8008cf0:	2c00      	cmp	r4, #0
 8008cf2:	d0dd      	beq.n	8008cb0 <sniprintf+0x18>
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	9b02      	ldr	r3, [sp, #8]
 8008cf8:	701a      	strb	r2, [r3, #0]
 8008cfa:	e7d9      	b.n	8008cb0 <sniprintf+0x18>
 8008cfc:	20000080 	.word	0x20000080

08008d00 <siprintf>:
 8008d00:	b40e      	push	{r1, r2, r3}
 8008d02:	b500      	push	{lr}
 8008d04:	490b      	ldr	r1, [pc, #44]	; (8008d34 <siprintf+0x34>)
 8008d06:	b09c      	sub	sp, #112	; 0x70
 8008d08:	ab1d      	add	r3, sp, #116	; 0x74
 8008d0a:	9002      	str	r0, [sp, #8]
 8008d0c:	9006      	str	r0, [sp, #24]
 8008d0e:	9107      	str	r1, [sp, #28]
 8008d10:	9104      	str	r1, [sp, #16]
 8008d12:	4809      	ldr	r0, [pc, #36]	; (8008d38 <siprintf+0x38>)
 8008d14:	4909      	ldr	r1, [pc, #36]	; (8008d3c <siprintf+0x3c>)
 8008d16:	cb04      	ldmia	r3!, {r2}
 8008d18:	9105      	str	r1, [sp, #20]
 8008d1a:	6800      	ldr	r0, [r0, #0]
 8008d1c:	a902      	add	r1, sp, #8
 8008d1e:	9301      	str	r3, [sp, #4]
 8008d20:	f001 fc8e 	bl	800a640 <_svfiprintf_r>
 8008d24:	2200      	movs	r2, #0
 8008d26:	9b02      	ldr	r3, [sp, #8]
 8008d28:	701a      	strb	r2, [r3, #0]
 8008d2a:	b01c      	add	sp, #112	; 0x70
 8008d2c:	bc08      	pop	{r3}
 8008d2e:	b003      	add	sp, #12
 8008d30:	4718      	bx	r3
 8008d32:	46c0      	nop			; (mov r8, r8)
 8008d34:	7fffffff 	.word	0x7fffffff
 8008d38:	20000080 	.word	0x20000080
 8008d3c:	ffff0208 	.word	0xffff0208

08008d40 <__sread>:
 8008d40:	b570      	push	{r4, r5, r6, lr}
 8008d42:	000c      	movs	r4, r1
 8008d44:	250e      	movs	r5, #14
 8008d46:	5f49      	ldrsh	r1, [r1, r5]
 8008d48:	f000 f878 	bl	8008e3c <_read_r>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	db03      	blt.n	8008d58 <__sread+0x18>
 8008d50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008d52:	181b      	adds	r3, r3, r0
 8008d54:	6563      	str	r3, [r4, #84]	; 0x54
 8008d56:	bd70      	pop	{r4, r5, r6, pc}
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	4a02      	ldr	r2, [pc, #8]	; (8008d64 <__sread+0x24>)
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	81a3      	strh	r3, [r4, #12]
 8008d60:	e7f9      	b.n	8008d56 <__sread+0x16>
 8008d62:	46c0      	nop			; (mov r8, r8)
 8008d64:	ffffefff 	.word	0xffffefff

08008d68 <__swrite>:
 8008d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6a:	001f      	movs	r7, r3
 8008d6c:	898b      	ldrh	r3, [r1, #12]
 8008d6e:	0005      	movs	r5, r0
 8008d70:	000c      	movs	r4, r1
 8008d72:	0016      	movs	r6, r2
 8008d74:	05db      	lsls	r3, r3, #23
 8008d76:	d505      	bpl.n	8008d84 <__swrite+0x1c>
 8008d78:	230e      	movs	r3, #14
 8008d7a:	5ec9      	ldrsh	r1, [r1, r3]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	2302      	movs	r3, #2
 8008d80:	f000 f848 	bl	8008e14 <_lseek_r>
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	4a05      	ldr	r2, [pc, #20]	; (8008d9c <__swrite+0x34>)
 8008d88:	0028      	movs	r0, r5
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	81a3      	strh	r3, [r4, #12]
 8008d8e:	0032      	movs	r2, r6
 8008d90:	230e      	movs	r3, #14
 8008d92:	5ee1      	ldrsh	r1, [r4, r3]
 8008d94:	003b      	movs	r3, r7
 8008d96:	f000 f865 	bl	8008e64 <_write_r>
 8008d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d9c:	ffffefff 	.word	0xffffefff

08008da0 <__sseek>:
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	000c      	movs	r4, r1
 8008da4:	250e      	movs	r5, #14
 8008da6:	5f49      	ldrsh	r1, [r1, r5]
 8008da8:	f000 f834 	bl	8008e14 <_lseek_r>
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	1c42      	adds	r2, r0, #1
 8008db0:	d103      	bne.n	8008dba <__sseek+0x1a>
 8008db2:	4a05      	ldr	r2, [pc, #20]	; (8008dc8 <__sseek+0x28>)
 8008db4:	4013      	ands	r3, r2
 8008db6:	81a3      	strh	r3, [r4, #12]
 8008db8:	bd70      	pop	{r4, r5, r6, pc}
 8008dba:	2280      	movs	r2, #128	; 0x80
 8008dbc:	0152      	lsls	r2, r2, #5
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	81a3      	strh	r3, [r4, #12]
 8008dc2:	6560      	str	r0, [r4, #84]	; 0x54
 8008dc4:	e7f8      	b.n	8008db8 <__sseek+0x18>
 8008dc6:	46c0      	nop			; (mov r8, r8)
 8008dc8:	ffffefff 	.word	0xffffefff

08008dcc <__sclose>:
 8008dcc:	b510      	push	{r4, lr}
 8008dce:	230e      	movs	r3, #14
 8008dd0:	5ec9      	ldrsh	r1, [r1, r3]
 8008dd2:	f000 f80d 	bl	8008df0 <_close_r>
 8008dd6:	bd10      	pop	{r4, pc}

08008dd8 <memset>:
 8008dd8:	0003      	movs	r3, r0
 8008dda:	1882      	adds	r2, r0, r2
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d100      	bne.n	8008de2 <memset+0xa>
 8008de0:	4770      	bx	lr
 8008de2:	7019      	strb	r1, [r3, #0]
 8008de4:	3301      	adds	r3, #1
 8008de6:	e7f9      	b.n	8008ddc <memset+0x4>

08008de8 <_localeconv_r>:
 8008de8:	4800      	ldr	r0, [pc, #0]	; (8008dec <_localeconv_r+0x4>)
 8008dea:	4770      	bx	lr
 8008dec:	20000174 	.word	0x20000174

08008df0 <_close_r>:
 8008df0:	2300      	movs	r3, #0
 8008df2:	b570      	push	{r4, r5, r6, lr}
 8008df4:	4d06      	ldr	r5, [pc, #24]	; (8008e10 <_close_r+0x20>)
 8008df6:	0004      	movs	r4, r0
 8008df8:	0008      	movs	r0, r1
 8008dfa:	602b      	str	r3, [r5, #0]
 8008dfc:	f7fb fb3b 	bl	8004476 <_close>
 8008e00:	1c43      	adds	r3, r0, #1
 8008e02:	d103      	bne.n	8008e0c <_close_r+0x1c>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d000      	beq.n	8008e0c <_close_r+0x1c>
 8008e0a:	6023      	str	r3, [r4, #0]
 8008e0c:	bd70      	pop	{r4, r5, r6, pc}
 8008e0e:	46c0      	nop			; (mov r8, r8)
 8008e10:	200009bc 	.word	0x200009bc

08008e14 <_lseek_r>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	0004      	movs	r4, r0
 8008e18:	0008      	movs	r0, r1
 8008e1a:	0011      	movs	r1, r2
 8008e1c:	001a      	movs	r2, r3
 8008e1e:	2300      	movs	r3, #0
 8008e20:	4d05      	ldr	r5, [pc, #20]	; (8008e38 <_lseek_r+0x24>)
 8008e22:	602b      	str	r3, [r5, #0]
 8008e24:	f7fb fb48 	bl	80044b8 <_lseek>
 8008e28:	1c43      	adds	r3, r0, #1
 8008e2a:	d103      	bne.n	8008e34 <_lseek_r+0x20>
 8008e2c:	682b      	ldr	r3, [r5, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d000      	beq.n	8008e34 <_lseek_r+0x20>
 8008e32:	6023      	str	r3, [r4, #0]
 8008e34:	bd70      	pop	{r4, r5, r6, pc}
 8008e36:	46c0      	nop			; (mov r8, r8)
 8008e38:	200009bc 	.word	0x200009bc

08008e3c <_read_r>:
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	0004      	movs	r4, r0
 8008e40:	0008      	movs	r0, r1
 8008e42:	0011      	movs	r1, r2
 8008e44:	001a      	movs	r2, r3
 8008e46:	2300      	movs	r3, #0
 8008e48:	4d05      	ldr	r5, [pc, #20]	; (8008e60 <_read_r+0x24>)
 8008e4a:	602b      	str	r3, [r5, #0]
 8008e4c:	f7fb fada 	bl	8004404 <_read>
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	d103      	bne.n	8008e5c <_read_r+0x20>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d000      	beq.n	8008e5c <_read_r+0x20>
 8008e5a:	6023      	str	r3, [r4, #0]
 8008e5c:	bd70      	pop	{r4, r5, r6, pc}
 8008e5e:	46c0      	nop			; (mov r8, r8)
 8008e60:	200009bc 	.word	0x200009bc

08008e64 <_write_r>:
 8008e64:	b570      	push	{r4, r5, r6, lr}
 8008e66:	0004      	movs	r4, r0
 8008e68:	0008      	movs	r0, r1
 8008e6a:	0011      	movs	r1, r2
 8008e6c:	001a      	movs	r2, r3
 8008e6e:	2300      	movs	r3, #0
 8008e70:	4d05      	ldr	r5, [pc, #20]	; (8008e88 <_write_r+0x24>)
 8008e72:	602b      	str	r3, [r5, #0]
 8008e74:	f7fb fae3 	bl	800443e <_write>
 8008e78:	1c43      	adds	r3, r0, #1
 8008e7a:	d103      	bne.n	8008e84 <_write_r+0x20>
 8008e7c:	682b      	ldr	r3, [r5, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d000      	beq.n	8008e84 <_write_r+0x20>
 8008e82:	6023      	str	r3, [r4, #0]
 8008e84:	bd70      	pop	{r4, r5, r6, pc}
 8008e86:	46c0      	nop			; (mov r8, r8)
 8008e88:	200009bc 	.word	0x200009bc

08008e8c <__errno>:
 8008e8c:	4b01      	ldr	r3, [pc, #4]	; (8008e94 <__errno+0x8>)
 8008e8e:	6818      	ldr	r0, [r3, #0]
 8008e90:	4770      	bx	lr
 8008e92:	46c0      	nop			; (mov r8, r8)
 8008e94:	20000080 	.word	0x20000080

08008e98 <__libc_init_array>:
 8008e98:	b570      	push	{r4, r5, r6, lr}
 8008e9a:	2600      	movs	r6, #0
 8008e9c:	4c0c      	ldr	r4, [pc, #48]	; (8008ed0 <__libc_init_array+0x38>)
 8008e9e:	4d0d      	ldr	r5, [pc, #52]	; (8008ed4 <__libc_init_array+0x3c>)
 8008ea0:	1b64      	subs	r4, r4, r5
 8008ea2:	10a4      	asrs	r4, r4, #2
 8008ea4:	42a6      	cmp	r6, r4
 8008ea6:	d109      	bne.n	8008ebc <__libc_init_array+0x24>
 8008ea8:	2600      	movs	r6, #0
 8008eaa:	f003 fac3 	bl	800c434 <_init>
 8008eae:	4c0a      	ldr	r4, [pc, #40]	; (8008ed8 <__libc_init_array+0x40>)
 8008eb0:	4d0a      	ldr	r5, [pc, #40]	; (8008edc <__libc_init_array+0x44>)
 8008eb2:	1b64      	subs	r4, r4, r5
 8008eb4:	10a4      	asrs	r4, r4, #2
 8008eb6:	42a6      	cmp	r6, r4
 8008eb8:	d105      	bne.n	8008ec6 <__libc_init_array+0x2e>
 8008eba:	bd70      	pop	{r4, r5, r6, pc}
 8008ebc:	00b3      	lsls	r3, r6, #2
 8008ebe:	58eb      	ldr	r3, [r5, r3]
 8008ec0:	4798      	blx	r3
 8008ec2:	3601      	adds	r6, #1
 8008ec4:	e7ee      	b.n	8008ea4 <__libc_init_array+0xc>
 8008ec6:	00b3      	lsls	r3, r6, #2
 8008ec8:	58eb      	ldr	r3, [r5, r3]
 8008eca:	4798      	blx	r3
 8008ecc:	3601      	adds	r6, #1
 8008ece:	e7f2      	b.n	8008eb6 <__libc_init_array+0x1e>
 8008ed0:	0800d718 	.word	0x0800d718
 8008ed4:	0800d718 	.word	0x0800d718
 8008ed8:	0800d71c 	.word	0x0800d71c
 8008edc:	0800d718 	.word	0x0800d718

08008ee0 <__retarget_lock_init_recursive>:
 8008ee0:	4770      	bx	lr

08008ee2 <__retarget_lock_acquire_recursive>:
 8008ee2:	4770      	bx	lr

08008ee4 <__retarget_lock_release_recursive>:
 8008ee4:	4770      	bx	lr

08008ee6 <memchr>:
 8008ee6:	b2c9      	uxtb	r1, r1
 8008ee8:	1882      	adds	r2, r0, r2
 8008eea:	4290      	cmp	r0, r2
 8008eec:	d101      	bne.n	8008ef2 <memchr+0xc>
 8008eee:	2000      	movs	r0, #0
 8008ef0:	4770      	bx	lr
 8008ef2:	7803      	ldrb	r3, [r0, #0]
 8008ef4:	428b      	cmp	r3, r1
 8008ef6:	d0fb      	beq.n	8008ef0 <memchr+0xa>
 8008ef8:	3001      	adds	r0, #1
 8008efa:	e7f6      	b.n	8008eea <memchr+0x4>

08008efc <quorem>:
 8008efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008efe:	6902      	ldr	r2, [r0, #16]
 8008f00:	690b      	ldr	r3, [r1, #16]
 8008f02:	b089      	sub	sp, #36	; 0x24
 8008f04:	0007      	movs	r7, r0
 8008f06:	9104      	str	r1, [sp, #16]
 8008f08:	2000      	movs	r0, #0
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	db69      	blt.n	8008fe2 <quorem+0xe6>
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	009c      	lsls	r4, r3, #2
 8008f12:	9301      	str	r3, [sp, #4]
 8008f14:	000b      	movs	r3, r1
 8008f16:	3314      	adds	r3, #20
 8008f18:	9306      	str	r3, [sp, #24]
 8008f1a:	191b      	adds	r3, r3, r4
 8008f1c:	9305      	str	r3, [sp, #20]
 8008f1e:	003b      	movs	r3, r7
 8008f20:	3314      	adds	r3, #20
 8008f22:	9303      	str	r3, [sp, #12]
 8008f24:	191c      	adds	r4, r3, r4
 8008f26:	9b05      	ldr	r3, [sp, #20]
 8008f28:	6826      	ldr	r6, [r4, #0]
 8008f2a:	681d      	ldr	r5, [r3, #0]
 8008f2c:	0030      	movs	r0, r6
 8008f2e:	3501      	adds	r5, #1
 8008f30:	0029      	movs	r1, r5
 8008f32:	f7f7 f905 	bl	8000140 <__udivsi3>
 8008f36:	9002      	str	r0, [sp, #8]
 8008f38:	42ae      	cmp	r6, r5
 8008f3a:	d329      	bcc.n	8008f90 <quorem+0x94>
 8008f3c:	9b06      	ldr	r3, [sp, #24]
 8008f3e:	2600      	movs	r6, #0
 8008f40:	469c      	mov	ip, r3
 8008f42:	9d03      	ldr	r5, [sp, #12]
 8008f44:	9606      	str	r6, [sp, #24]
 8008f46:	4662      	mov	r2, ip
 8008f48:	ca08      	ldmia	r2!, {r3}
 8008f4a:	6828      	ldr	r0, [r5, #0]
 8008f4c:	4694      	mov	ip, r2
 8008f4e:	9a02      	ldr	r2, [sp, #8]
 8008f50:	b299      	uxth	r1, r3
 8008f52:	4351      	muls	r1, r2
 8008f54:	0c1b      	lsrs	r3, r3, #16
 8008f56:	4353      	muls	r3, r2
 8008f58:	1989      	adds	r1, r1, r6
 8008f5a:	0c0a      	lsrs	r2, r1, #16
 8008f5c:	189b      	adds	r3, r3, r2
 8008f5e:	9307      	str	r3, [sp, #28]
 8008f60:	0c1e      	lsrs	r6, r3, #16
 8008f62:	9b06      	ldr	r3, [sp, #24]
 8008f64:	b282      	uxth	r2, r0
 8008f66:	18d2      	adds	r2, r2, r3
 8008f68:	466b      	mov	r3, sp
 8008f6a:	b289      	uxth	r1, r1
 8008f6c:	8b9b      	ldrh	r3, [r3, #28]
 8008f6e:	1a52      	subs	r2, r2, r1
 8008f70:	0c01      	lsrs	r1, r0, #16
 8008f72:	1ac9      	subs	r1, r1, r3
 8008f74:	1413      	asrs	r3, r2, #16
 8008f76:	18cb      	adds	r3, r1, r3
 8008f78:	1419      	asrs	r1, r3, #16
 8008f7a:	b292      	uxth	r2, r2
 8008f7c:	041b      	lsls	r3, r3, #16
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	c508      	stmia	r5!, {r3}
 8008f82:	9b05      	ldr	r3, [sp, #20]
 8008f84:	9106      	str	r1, [sp, #24]
 8008f86:	4563      	cmp	r3, ip
 8008f88:	d2dd      	bcs.n	8008f46 <quorem+0x4a>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d030      	beq.n	8008ff2 <quorem+0xf6>
 8008f90:	0038      	movs	r0, r7
 8008f92:	9904      	ldr	r1, [sp, #16]
 8008f94:	f001 f9de 	bl	800a354 <__mcmp>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	db21      	blt.n	8008fe0 <quorem+0xe4>
 8008f9c:	0038      	movs	r0, r7
 8008f9e:	2600      	movs	r6, #0
 8008fa0:	9b02      	ldr	r3, [sp, #8]
 8008fa2:	9c04      	ldr	r4, [sp, #16]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	9302      	str	r3, [sp, #8]
 8008fa8:	3014      	adds	r0, #20
 8008faa:	3414      	adds	r4, #20
 8008fac:	6803      	ldr	r3, [r0, #0]
 8008fae:	cc02      	ldmia	r4!, {r1}
 8008fb0:	b29d      	uxth	r5, r3
 8008fb2:	19ad      	adds	r5, r5, r6
 8008fb4:	b28a      	uxth	r2, r1
 8008fb6:	1aaa      	subs	r2, r5, r2
 8008fb8:	0c09      	lsrs	r1, r1, #16
 8008fba:	0c1b      	lsrs	r3, r3, #16
 8008fbc:	1a5b      	subs	r3, r3, r1
 8008fbe:	1411      	asrs	r1, r2, #16
 8008fc0:	185b      	adds	r3, r3, r1
 8008fc2:	141e      	asrs	r6, r3, #16
 8008fc4:	b292      	uxth	r2, r2
 8008fc6:	041b      	lsls	r3, r3, #16
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	c008      	stmia	r0!, {r3}
 8008fcc:	9b05      	ldr	r3, [sp, #20]
 8008fce:	42a3      	cmp	r3, r4
 8008fd0:	d2ec      	bcs.n	8008fac <quorem+0xb0>
 8008fd2:	9b01      	ldr	r3, [sp, #4]
 8008fd4:	9a03      	ldr	r2, [sp, #12]
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	18d3      	adds	r3, r2, r3
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	2a00      	cmp	r2, #0
 8008fde:	d015      	beq.n	800900c <quorem+0x110>
 8008fe0:	9802      	ldr	r0, [sp, #8]
 8008fe2:	b009      	add	sp, #36	; 0x24
 8008fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d106      	bne.n	8008ffa <quorem+0xfe>
 8008fec:	9b01      	ldr	r3, [sp, #4]
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	9301      	str	r3, [sp, #4]
 8008ff2:	9b03      	ldr	r3, [sp, #12]
 8008ff4:	3c04      	subs	r4, #4
 8008ff6:	42a3      	cmp	r3, r4
 8008ff8:	d3f5      	bcc.n	8008fe6 <quorem+0xea>
 8008ffa:	9b01      	ldr	r3, [sp, #4]
 8008ffc:	613b      	str	r3, [r7, #16]
 8008ffe:	e7c7      	b.n	8008f90 <quorem+0x94>
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	2a00      	cmp	r2, #0
 8009004:	d106      	bne.n	8009014 <quorem+0x118>
 8009006:	9a01      	ldr	r2, [sp, #4]
 8009008:	3a01      	subs	r2, #1
 800900a:	9201      	str	r2, [sp, #4]
 800900c:	9a03      	ldr	r2, [sp, #12]
 800900e:	3b04      	subs	r3, #4
 8009010:	429a      	cmp	r2, r3
 8009012:	d3f5      	bcc.n	8009000 <quorem+0x104>
 8009014:	9b01      	ldr	r3, [sp, #4]
 8009016:	613b      	str	r3, [r7, #16]
 8009018:	e7e2      	b.n	8008fe0 <quorem+0xe4>
	...

0800901c <_dtoa_r>:
 800901c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800901e:	0014      	movs	r4, r2
 8009020:	001d      	movs	r5, r3
 8009022:	69c6      	ldr	r6, [r0, #28]
 8009024:	b09d      	sub	sp, #116	; 0x74
 8009026:	9408      	str	r4, [sp, #32]
 8009028:	9509      	str	r5, [sp, #36]	; 0x24
 800902a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800902c:	9004      	str	r0, [sp, #16]
 800902e:	2e00      	cmp	r6, #0
 8009030:	d10f      	bne.n	8009052 <_dtoa_r+0x36>
 8009032:	2010      	movs	r0, #16
 8009034:	f000 fe4a 	bl	8009ccc <malloc>
 8009038:	9b04      	ldr	r3, [sp, #16]
 800903a:	1e02      	subs	r2, r0, #0
 800903c:	61d8      	str	r0, [r3, #28]
 800903e:	d104      	bne.n	800904a <_dtoa_r+0x2e>
 8009040:	21ef      	movs	r1, #239	; 0xef
 8009042:	4bc6      	ldr	r3, [pc, #792]	; (800935c <_dtoa_r+0x340>)
 8009044:	48c6      	ldr	r0, [pc, #792]	; (8009360 <_dtoa_r+0x344>)
 8009046:	f001 fcdf 	bl	800aa08 <__assert_func>
 800904a:	6046      	str	r6, [r0, #4]
 800904c:	6086      	str	r6, [r0, #8]
 800904e:	6006      	str	r6, [r0, #0]
 8009050:	60c6      	str	r6, [r0, #12]
 8009052:	9b04      	ldr	r3, [sp, #16]
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	6819      	ldr	r1, [r3, #0]
 8009058:	2900      	cmp	r1, #0
 800905a:	d00b      	beq.n	8009074 <_dtoa_r+0x58>
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	2301      	movs	r3, #1
 8009060:	4093      	lsls	r3, r2
 8009062:	604a      	str	r2, [r1, #4]
 8009064:	608b      	str	r3, [r1, #8]
 8009066:	9804      	ldr	r0, [sp, #16]
 8009068:	f000 ff32 	bl	8009ed0 <_Bfree>
 800906c:	2200      	movs	r2, #0
 800906e:	9b04      	ldr	r3, [sp, #16]
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	2d00      	cmp	r5, #0
 8009076:	da1e      	bge.n	80090b6 <_dtoa_r+0x9a>
 8009078:	2301      	movs	r3, #1
 800907a:	603b      	str	r3, [r7, #0]
 800907c:	006b      	lsls	r3, r5, #1
 800907e:	085b      	lsrs	r3, r3, #1
 8009080:	9309      	str	r3, [sp, #36]	; 0x24
 8009082:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009084:	4bb7      	ldr	r3, [pc, #732]	; (8009364 <_dtoa_r+0x348>)
 8009086:	4ab7      	ldr	r2, [pc, #732]	; (8009364 <_dtoa_r+0x348>)
 8009088:	403b      	ands	r3, r7
 800908a:	4293      	cmp	r3, r2
 800908c:	d116      	bne.n	80090bc <_dtoa_r+0xa0>
 800908e:	4bb6      	ldr	r3, [pc, #728]	; (8009368 <_dtoa_r+0x34c>)
 8009090:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009092:	6013      	str	r3, [r2, #0]
 8009094:	033b      	lsls	r3, r7, #12
 8009096:	0b1b      	lsrs	r3, r3, #12
 8009098:	4323      	orrs	r3, r4
 800909a:	d101      	bne.n	80090a0 <_dtoa_r+0x84>
 800909c:	f000 fdb5 	bl	8009c0a <_dtoa_r+0xbee>
 80090a0:	4bb2      	ldr	r3, [pc, #712]	; (800936c <_dtoa_r+0x350>)
 80090a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80090a4:	9306      	str	r3, [sp, #24]
 80090a6:	2a00      	cmp	r2, #0
 80090a8:	d002      	beq.n	80090b0 <_dtoa_r+0x94>
 80090aa:	4bb1      	ldr	r3, [pc, #708]	; (8009370 <_dtoa_r+0x354>)
 80090ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	9806      	ldr	r0, [sp, #24]
 80090b2:	b01d      	add	sp, #116	; 0x74
 80090b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090b6:	2300      	movs	r3, #0
 80090b8:	603b      	str	r3, [r7, #0]
 80090ba:	e7e2      	b.n	8009082 <_dtoa_r+0x66>
 80090bc:	9a08      	ldr	r2, [sp, #32]
 80090be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c0:	9210      	str	r2, [sp, #64]	; 0x40
 80090c2:	9311      	str	r3, [sp, #68]	; 0x44
 80090c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80090c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80090c8:	2200      	movs	r2, #0
 80090ca:	2300      	movs	r3, #0
 80090cc:	f7f7 f9be 	bl	800044c <__aeabi_dcmpeq>
 80090d0:	1e06      	subs	r6, r0, #0
 80090d2:	d009      	beq.n	80090e8 <_dtoa_r+0xcc>
 80090d4:	2301      	movs	r3, #1
 80090d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80090d8:	6013      	str	r3, [r2, #0]
 80090da:	4ba6      	ldr	r3, [pc, #664]	; (8009374 <_dtoa_r+0x358>)
 80090dc:	9306      	str	r3, [sp, #24]
 80090de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d0e5      	beq.n	80090b0 <_dtoa_r+0x94>
 80090e4:	4ba4      	ldr	r3, [pc, #656]	; (8009378 <_dtoa_r+0x35c>)
 80090e6:	e7e1      	b.n	80090ac <_dtoa_r+0x90>
 80090e8:	ab1a      	add	r3, sp, #104	; 0x68
 80090ea:	9301      	str	r3, [sp, #4]
 80090ec:	ab1b      	add	r3, sp, #108	; 0x6c
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	9804      	ldr	r0, [sp, #16]
 80090f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80090f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090f6:	f001 f9e1 	bl	800a4bc <__d2b>
 80090fa:	007a      	lsls	r2, r7, #1
 80090fc:	9005      	str	r0, [sp, #20]
 80090fe:	0d52      	lsrs	r2, r2, #21
 8009100:	d100      	bne.n	8009104 <_dtoa_r+0xe8>
 8009102:	e07b      	b.n	80091fc <_dtoa_r+0x1e0>
 8009104:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009106:	9617      	str	r6, [sp, #92]	; 0x5c
 8009108:	0319      	lsls	r1, r3, #12
 800910a:	4b9c      	ldr	r3, [pc, #624]	; (800937c <_dtoa_r+0x360>)
 800910c:	0b09      	lsrs	r1, r1, #12
 800910e:	430b      	orrs	r3, r1
 8009110:	499b      	ldr	r1, [pc, #620]	; (8009380 <_dtoa_r+0x364>)
 8009112:	1857      	adds	r7, r2, r1
 8009114:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009116:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009118:	0019      	movs	r1, r3
 800911a:	2200      	movs	r2, #0
 800911c:	4b99      	ldr	r3, [pc, #612]	; (8009384 <_dtoa_r+0x368>)
 800911e:	f7f9 fa3d 	bl	800259c <__aeabi_dsub>
 8009122:	4a99      	ldr	r2, [pc, #612]	; (8009388 <_dtoa_r+0x36c>)
 8009124:	4b99      	ldr	r3, [pc, #612]	; (800938c <_dtoa_r+0x370>)
 8009126:	f7f8 ff77 	bl	8002018 <__aeabi_dmul>
 800912a:	4a99      	ldr	r2, [pc, #612]	; (8009390 <_dtoa_r+0x374>)
 800912c:	4b99      	ldr	r3, [pc, #612]	; (8009394 <_dtoa_r+0x378>)
 800912e:	f7f8 f819 	bl	8001164 <__aeabi_dadd>
 8009132:	0004      	movs	r4, r0
 8009134:	0038      	movs	r0, r7
 8009136:	000d      	movs	r5, r1
 8009138:	f7f9 fe06 	bl	8002d48 <__aeabi_i2d>
 800913c:	4a96      	ldr	r2, [pc, #600]	; (8009398 <_dtoa_r+0x37c>)
 800913e:	4b97      	ldr	r3, [pc, #604]	; (800939c <_dtoa_r+0x380>)
 8009140:	f7f8 ff6a 	bl	8002018 <__aeabi_dmul>
 8009144:	0002      	movs	r2, r0
 8009146:	000b      	movs	r3, r1
 8009148:	0020      	movs	r0, r4
 800914a:	0029      	movs	r1, r5
 800914c:	f7f8 f80a 	bl	8001164 <__aeabi_dadd>
 8009150:	0004      	movs	r4, r0
 8009152:	000d      	movs	r5, r1
 8009154:	f7f9 fdc2 	bl	8002cdc <__aeabi_d2iz>
 8009158:	2200      	movs	r2, #0
 800915a:	9003      	str	r0, [sp, #12]
 800915c:	2300      	movs	r3, #0
 800915e:	0020      	movs	r0, r4
 8009160:	0029      	movs	r1, r5
 8009162:	f7f7 f979 	bl	8000458 <__aeabi_dcmplt>
 8009166:	2800      	cmp	r0, #0
 8009168:	d00b      	beq.n	8009182 <_dtoa_r+0x166>
 800916a:	9803      	ldr	r0, [sp, #12]
 800916c:	f7f9 fdec 	bl	8002d48 <__aeabi_i2d>
 8009170:	002b      	movs	r3, r5
 8009172:	0022      	movs	r2, r4
 8009174:	f7f7 f96a 	bl	800044c <__aeabi_dcmpeq>
 8009178:	4243      	negs	r3, r0
 800917a:	4158      	adcs	r0, r3
 800917c:	9b03      	ldr	r3, [sp, #12]
 800917e:	1a1b      	subs	r3, r3, r0
 8009180:	9303      	str	r3, [sp, #12]
 8009182:	2301      	movs	r3, #1
 8009184:	9316      	str	r3, [sp, #88]	; 0x58
 8009186:	9b03      	ldr	r3, [sp, #12]
 8009188:	2b16      	cmp	r3, #22
 800918a:	d810      	bhi.n	80091ae <_dtoa_r+0x192>
 800918c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800918e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009190:	9a03      	ldr	r2, [sp, #12]
 8009192:	4b83      	ldr	r3, [pc, #524]	; (80093a0 <_dtoa_r+0x384>)
 8009194:	00d2      	lsls	r2, r2, #3
 8009196:	189b      	adds	r3, r3, r2
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	f7f7 f95c 	bl	8000458 <__aeabi_dcmplt>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d047      	beq.n	8009234 <_dtoa_r+0x218>
 80091a4:	9b03      	ldr	r3, [sp, #12]
 80091a6:	3b01      	subs	r3, #1
 80091a8:	9303      	str	r3, [sp, #12]
 80091aa:	2300      	movs	r3, #0
 80091ac:	9316      	str	r3, [sp, #88]	; 0x58
 80091ae:	2200      	movs	r2, #0
 80091b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80091b2:	920a      	str	r2, [sp, #40]	; 0x28
 80091b4:	1bdb      	subs	r3, r3, r7
 80091b6:	1e5a      	subs	r2, r3, #1
 80091b8:	d53e      	bpl.n	8009238 <_dtoa_r+0x21c>
 80091ba:	2201      	movs	r2, #1
 80091bc:	1ad3      	subs	r3, r2, r3
 80091be:	930a      	str	r3, [sp, #40]	; 0x28
 80091c0:	2300      	movs	r3, #0
 80091c2:	930c      	str	r3, [sp, #48]	; 0x30
 80091c4:	9b03      	ldr	r3, [sp, #12]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	db38      	blt.n	800923c <_dtoa_r+0x220>
 80091ca:	9a03      	ldr	r2, [sp, #12]
 80091cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091ce:	4694      	mov	ip, r2
 80091d0:	4463      	add	r3, ip
 80091d2:	930c      	str	r3, [sp, #48]	; 0x30
 80091d4:	2300      	movs	r3, #0
 80091d6:	9213      	str	r2, [sp, #76]	; 0x4c
 80091d8:	930d      	str	r3, [sp, #52]	; 0x34
 80091da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091dc:	2401      	movs	r4, #1
 80091de:	2b09      	cmp	r3, #9
 80091e0:	d867      	bhi.n	80092b2 <_dtoa_r+0x296>
 80091e2:	2b05      	cmp	r3, #5
 80091e4:	dd02      	ble.n	80091ec <_dtoa_r+0x1d0>
 80091e6:	2400      	movs	r4, #0
 80091e8:	3b04      	subs	r3, #4
 80091ea:	9322      	str	r3, [sp, #136]	; 0x88
 80091ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091ee:	1e98      	subs	r0, r3, #2
 80091f0:	2803      	cmp	r0, #3
 80091f2:	d867      	bhi.n	80092c4 <_dtoa_r+0x2a8>
 80091f4:	f7f6 ff90 	bl	8000118 <__gnu_thumb1_case_uqi>
 80091f8:	5b383a2b 	.word	0x5b383a2b
 80091fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80091fe:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8009200:	18f6      	adds	r6, r6, r3
 8009202:	4b68      	ldr	r3, [pc, #416]	; (80093a4 <_dtoa_r+0x388>)
 8009204:	18f2      	adds	r2, r6, r3
 8009206:	2a20      	cmp	r2, #32
 8009208:	dd0f      	ble.n	800922a <_dtoa_r+0x20e>
 800920a:	2340      	movs	r3, #64	; 0x40
 800920c:	1a9b      	subs	r3, r3, r2
 800920e:	409f      	lsls	r7, r3
 8009210:	4b65      	ldr	r3, [pc, #404]	; (80093a8 <_dtoa_r+0x38c>)
 8009212:	0038      	movs	r0, r7
 8009214:	18f3      	adds	r3, r6, r3
 8009216:	40dc      	lsrs	r4, r3
 8009218:	4320      	orrs	r0, r4
 800921a:	f7f9 fdc5 	bl	8002da8 <__aeabi_ui2d>
 800921e:	2201      	movs	r2, #1
 8009220:	4b62      	ldr	r3, [pc, #392]	; (80093ac <_dtoa_r+0x390>)
 8009222:	1e77      	subs	r7, r6, #1
 8009224:	18cb      	adds	r3, r1, r3
 8009226:	9217      	str	r2, [sp, #92]	; 0x5c
 8009228:	e776      	b.n	8009118 <_dtoa_r+0xfc>
 800922a:	2320      	movs	r3, #32
 800922c:	0020      	movs	r0, r4
 800922e:	1a9b      	subs	r3, r3, r2
 8009230:	4098      	lsls	r0, r3
 8009232:	e7f2      	b.n	800921a <_dtoa_r+0x1fe>
 8009234:	9016      	str	r0, [sp, #88]	; 0x58
 8009236:	e7ba      	b.n	80091ae <_dtoa_r+0x192>
 8009238:	920c      	str	r2, [sp, #48]	; 0x30
 800923a:	e7c3      	b.n	80091c4 <_dtoa_r+0x1a8>
 800923c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800923e:	9a03      	ldr	r2, [sp, #12]
 8009240:	1a9b      	subs	r3, r3, r2
 8009242:	930a      	str	r3, [sp, #40]	; 0x28
 8009244:	4253      	negs	r3, r2
 8009246:	930d      	str	r3, [sp, #52]	; 0x34
 8009248:	2300      	movs	r3, #0
 800924a:	9313      	str	r3, [sp, #76]	; 0x4c
 800924c:	e7c5      	b.n	80091da <_dtoa_r+0x1be>
 800924e:	2300      	movs	r3, #0
 8009250:	930f      	str	r3, [sp, #60]	; 0x3c
 8009252:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009254:	930b      	str	r3, [sp, #44]	; 0x2c
 8009256:	9307      	str	r3, [sp, #28]
 8009258:	2b00      	cmp	r3, #0
 800925a:	dc13      	bgt.n	8009284 <_dtoa_r+0x268>
 800925c:	2301      	movs	r3, #1
 800925e:	001a      	movs	r2, r3
 8009260:	930b      	str	r3, [sp, #44]	; 0x2c
 8009262:	9307      	str	r3, [sp, #28]
 8009264:	9223      	str	r2, [sp, #140]	; 0x8c
 8009266:	e00d      	b.n	8009284 <_dtoa_r+0x268>
 8009268:	2301      	movs	r3, #1
 800926a:	e7f1      	b.n	8009250 <_dtoa_r+0x234>
 800926c:	2300      	movs	r3, #0
 800926e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009270:	930f      	str	r3, [sp, #60]	; 0x3c
 8009272:	4694      	mov	ip, r2
 8009274:	9b03      	ldr	r3, [sp, #12]
 8009276:	4463      	add	r3, ip
 8009278:	930b      	str	r3, [sp, #44]	; 0x2c
 800927a:	3301      	adds	r3, #1
 800927c:	9307      	str	r3, [sp, #28]
 800927e:	2b00      	cmp	r3, #0
 8009280:	dc00      	bgt.n	8009284 <_dtoa_r+0x268>
 8009282:	2301      	movs	r3, #1
 8009284:	9a04      	ldr	r2, [sp, #16]
 8009286:	2100      	movs	r1, #0
 8009288:	69d0      	ldr	r0, [r2, #28]
 800928a:	2204      	movs	r2, #4
 800928c:	0015      	movs	r5, r2
 800928e:	3514      	adds	r5, #20
 8009290:	429d      	cmp	r5, r3
 8009292:	d91b      	bls.n	80092cc <_dtoa_r+0x2b0>
 8009294:	6041      	str	r1, [r0, #4]
 8009296:	9804      	ldr	r0, [sp, #16]
 8009298:	f000 fdd6 	bl	8009e48 <_Balloc>
 800929c:	9006      	str	r0, [sp, #24]
 800929e:	2800      	cmp	r0, #0
 80092a0:	d117      	bne.n	80092d2 <_dtoa_r+0x2b6>
 80092a2:	21b0      	movs	r1, #176	; 0xb0
 80092a4:	4b42      	ldr	r3, [pc, #264]	; (80093b0 <_dtoa_r+0x394>)
 80092a6:	482e      	ldr	r0, [pc, #184]	; (8009360 <_dtoa_r+0x344>)
 80092a8:	9a06      	ldr	r2, [sp, #24]
 80092aa:	31ff      	adds	r1, #255	; 0xff
 80092ac:	e6cb      	b.n	8009046 <_dtoa_r+0x2a>
 80092ae:	2301      	movs	r3, #1
 80092b0:	e7dd      	b.n	800926e <_dtoa_r+0x252>
 80092b2:	2300      	movs	r3, #0
 80092b4:	940f      	str	r4, [sp, #60]	; 0x3c
 80092b6:	9322      	str	r3, [sp, #136]	; 0x88
 80092b8:	3b01      	subs	r3, #1
 80092ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80092bc:	9307      	str	r3, [sp, #28]
 80092be:	2200      	movs	r2, #0
 80092c0:	3313      	adds	r3, #19
 80092c2:	e7cf      	b.n	8009264 <_dtoa_r+0x248>
 80092c4:	2301      	movs	r3, #1
 80092c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80092c8:	3b02      	subs	r3, #2
 80092ca:	e7f6      	b.n	80092ba <_dtoa_r+0x29e>
 80092cc:	3101      	adds	r1, #1
 80092ce:	0052      	lsls	r2, r2, #1
 80092d0:	e7dc      	b.n	800928c <_dtoa_r+0x270>
 80092d2:	9b04      	ldr	r3, [sp, #16]
 80092d4:	9a06      	ldr	r2, [sp, #24]
 80092d6:	69db      	ldr	r3, [r3, #28]
 80092d8:	601a      	str	r2, [r3, #0]
 80092da:	9b07      	ldr	r3, [sp, #28]
 80092dc:	2b0e      	cmp	r3, #14
 80092de:	d900      	bls.n	80092e2 <_dtoa_r+0x2c6>
 80092e0:	e0e5      	b.n	80094ae <_dtoa_r+0x492>
 80092e2:	2c00      	cmp	r4, #0
 80092e4:	d100      	bne.n	80092e8 <_dtoa_r+0x2cc>
 80092e6:	e0e2      	b.n	80094ae <_dtoa_r+0x492>
 80092e8:	9b03      	ldr	r3, [sp, #12]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	dd64      	ble.n	80093b8 <_dtoa_r+0x39c>
 80092ee:	210f      	movs	r1, #15
 80092f0:	9a03      	ldr	r2, [sp, #12]
 80092f2:	4b2b      	ldr	r3, [pc, #172]	; (80093a0 <_dtoa_r+0x384>)
 80092f4:	400a      	ands	r2, r1
 80092f6:	00d2      	lsls	r2, r2, #3
 80092f8:	189b      	adds	r3, r3, r2
 80092fa:	681e      	ldr	r6, [r3, #0]
 80092fc:	685f      	ldr	r7, [r3, #4]
 80092fe:	9b03      	ldr	r3, [sp, #12]
 8009300:	2402      	movs	r4, #2
 8009302:	111d      	asrs	r5, r3, #4
 8009304:	05db      	lsls	r3, r3, #23
 8009306:	d50a      	bpl.n	800931e <_dtoa_r+0x302>
 8009308:	4b2a      	ldr	r3, [pc, #168]	; (80093b4 <_dtoa_r+0x398>)
 800930a:	400d      	ands	r5, r1
 800930c:	6a1a      	ldr	r2, [r3, #32]
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009312:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009314:	f7f8 fa86 	bl	8001824 <__aeabi_ddiv>
 8009318:	9008      	str	r0, [sp, #32]
 800931a:	9109      	str	r1, [sp, #36]	; 0x24
 800931c:	3401      	adds	r4, #1
 800931e:	4b25      	ldr	r3, [pc, #148]	; (80093b4 <_dtoa_r+0x398>)
 8009320:	930e      	str	r3, [sp, #56]	; 0x38
 8009322:	2d00      	cmp	r5, #0
 8009324:	d108      	bne.n	8009338 <_dtoa_r+0x31c>
 8009326:	9808      	ldr	r0, [sp, #32]
 8009328:	9909      	ldr	r1, [sp, #36]	; 0x24
 800932a:	0032      	movs	r2, r6
 800932c:	003b      	movs	r3, r7
 800932e:	f7f8 fa79 	bl	8001824 <__aeabi_ddiv>
 8009332:	9008      	str	r0, [sp, #32]
 8009334:	9109      	str	r1, [sp, #36]	; 0x24
 8009336:	e05a      	b.n	80093ee <_dtoa_r+0x3d2>
 8009338:	2301      	movs	r3, #1
 800933a:	421d      	tst	r5, r3
 800933c:	d009      	beq.n	8009352 <_dtoa_r+0x336>
 800933e:	18e4      	adds	r4, r4, r3
 8009340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009342:	0030      	movs	r0, r6
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	0039      	movs	r1, r7
 800934a:	f7f8 fe65 	bl	8002018 <__aeabi_dmul>
 800934e:	0006      	movs	r6, r0
 8009350:	000f      	movs	r7, r1
 8009352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009354:	106d      	asrs	r5, r5, #1
 8009356:	3308      	adds	r3, #8
 8009358:	e7e2      	b.n	8009320 <_dtoa_r+0x304>
 800935a:	46c0      	nop			; (mov r8, r8)
 800935c:	0800d3a9 	.word	0x0800d3a9
 8009360:	0800d3c0 	.word	0x0800d3c0
 8009364:	7ff00000 	.word	0x7ff00000
 8009368:	0000270f 	.word	0x0000270f
 800936c:	0800d3a5 	.word	0x0800d3a5
 8009370:	0800d3a8 	.word	0x0800d3a8
 8009374:	0800d378 	.word	0x0800d378
 8009378:	0800d379 	.word	0x0800d379
 800937c:	3ff00000 	.word	0x3ff00000
 8009380:	fffffc01 	.word	0xfffffc01
 8009384:	3ff80000 	.word	0x3ff80000
 8009388:	636f4361 	.word	0x636f4361
 800938c:	3fd287a7 	.word	0x3fd287a7
 8009390:	8b60c8b3 	.word	0x8b60c8b3
 8009394:	3fc68a28 	.word	0x3fc68a28
 8009398:	509f79fb 	.word	0x509f79fb
 800939c:	3fd34413 	.word	0x3fd34413
 80093a0:	0800d4b0 	.word	0x0800d4b0
 80093a4:	00000432 	.word	0x00000432
 80093a8:	00000412 	.word	0x00000412
 80093ac:	fe100000 	.word	0xfe100000
 80093b0:	0800d418 	.word	0x0800d418
 80093b4:	0800d488 	.word	0x0800d488
 80093b8:	9b03      	ldr	r3, [sp, #12]
 80093ba:	2402      	movs	r4, #2
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d016      	beq.n	80093ee <_dtoa_r+0x3d2>
 80093c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80093c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80093c4:	220f      	movs	r2, #15
 80093c6:	425d      	negs	r5, r3
 80093c8:	402a      	ands	r2, r5
 80093ca:	4bdd      	ldr	r3, [pc, #884]	; (8009740 <_dtoa_r+0x724>)
 80093cc:	00d2      	lsls	r2, r2, #3
 80093ce:	189b      	adds	r3, r3, r2
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	f7f8 fe20 	bl	8002018 <__aeabi_dmul>
 80093d8:	2701      	movs	r7, #1
 80093da:	2300      	movs	r3, #0
 80093dc:	9008      	str	r0, [sp, #32]
 80093de:	9109      	str	r1, [sp, #36]	; 0x24
 80093e0:	4ed8      	ldr	r6, [pc, #864]	; (8009744 <_dtoa_r+0x728>)
 80093e2:	112d      	asrs	r5, r5, #4
 80093e4:	2d00      	cmp	r5, #0
 80093e6:	d000      	beq.n	80093ea <_dtoa_r+0x3ce>
 80093e8:	e091      	b.n	800950e <_dtoa_r+0x4f2>
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1a1      	bne.n	8009332 <_dtoa_r+0x316>
 80093ee:	9e08      	ldr	r6, [sp, #32]
 80093f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80093f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d100      	bne.n	80093fa <_dtoa_r+0x3de>
 80093f8:	e094      	b.n	8009524 <_dtoa_r+0x508>
 80093fa:	2200      	movs	r2, #0
 80093fc:	0030      	movs	r0, r6
 80093fe:	0039      	movs	r1, r7
 8009400:	4bd1      	ldr	r3, [pc, #836]	; (8009748 <_dtoa_r+0x72c>)
 8009402:	f7f7 f829 	bl	8000458 <__aeabi_dcmplt>
 8009406:	2800      	cmp	r0, #0
 8009408:	d100      	bne.n	800940c <_dtoa_r+0x3f0>
 800940a:	e08b      	b.n	8009524 <_dtoa_r+0x508>
 800940c:	9b07      	ldr	r3, [sp, #28]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d100      	bne.n	8009414 <_dtoa_r+0x3f8>
 8009412:	e087      	b.n	8009524 <_dtoa_r+0x508>
 8009414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009416:	2b00      	cmp	r3, #0
 8009418:	dd45      	ble.n	80094a6 <_dtoa_r+0x48a>
 800941a:	9b03      	ldr	r3, [sp, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	3b01      	subs	r3, #1
 8009420:	930e      	str	r3, [sp, #56]	; 0x38
 8009422:	0030      	movs	r0, r6
 8009424:	4bc9      	ldr	r3, [pc, #804]	; (800974c <_dtoa_r+0x730>)
 8009426:	0039      	movs	r1, r7
 8009428:	f7f8 fdf6 	bl	8002018 <__aeabi_dmul>
 800942c:	9008      	str	r0, [sp, #32]
 800942e:	9109      	str	r1, [sp, #36]	; 0x24
 8009430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009432:	3401      	adds	r4, #1
 8009434:	0020      	movs	r0, r4
 8009436:	9e08      	ldr	r6, [sp, #32]
 8009438:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800943a:	9312      	str	r3, [sp, #72]	; 0x48
 800943c:	f7f9 fc84 	bl	8002d48 <__aeabi_i2d>
 8009440:	0032      	movs	r2, r6
 8009442:	003b      	movs	r3, r7
 8009444:	f7f8 fde8 	bl	8002018 <__aeabi_dmul>
 8009448:	2200      	movs	r2, #0
 800944a:	4bc1      	ldr	r3, [pc, #772]	; (8009750 <_dtoa_r+0x734>)
 800944c:	f7f7 fe8a 	bl	8001164 <__aeabi_dadd>
 8009450:	4ac0      	ldr	r2, [pc, #768]	; (8009754 <_dtoa_r+0x738>)
 8009452:	9014      	str	r0, [sp, #80]	; 0x50
 8009454:	9115      	str	r1, [sp, #84]	; 0x54
 8009456:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009458:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800945a:	4694      	mov	ip, r2
 800945c:	9308      	str	r3, [sp, #32]
 800945e:	9409      	str	r4, [sp, #36]	; 0x24
 8009460:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009462:	4463      	add	r3, ip
 8009464:	9318      	str	r3, [sp, #96]	; 0x60
 8009466:	9309      	str	r3, [sp, #36]	; 0x24
 8009468:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800946a:	2b00      	cmp	r3, #0
 800946c:	d15e      	bne.n	800952c <_dtoa_r+0x510>
 800946e:	2200      	movs	r2, #0
 8009470:	4bb9      	ldr	r3, [pc, #740]	; (8009758 <_dtoa_r+0x73c>)
 8009472:	0030      	movs	r0, r6
 8009474:	0039      	movs	r1, r7
 8009476:	f7f9 f891 	bl	800259c <__aeabi_dsub>
 800947a:	9a08      	ldr	r2, [sp, #32]
 800947c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800947e:	0004      	movs	r4, r0
 8009480:	000d      	movs	r5, r1
 8009482:	f7f6 fffd 	bl	8000480 <__aeabi_dcmpgt>
 8009486:	2800      	cmp	r0, #0
 8009488:	d000      	beq.n	800948c <_dtoa_r+0x470>
 800948a:	e2b3      	b.n	80099f4 <_dtoa_r+0x9d8>
 800948c:	48b3      	ldr	r0, [pc, #716]	; (800975c <_dtoa_r+0x740>)
 800948e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009490:	4684      	mov	ip, r0
 8009492:	4461      	add	r1, ip
 8009494:	000b      	movs	r3, r1
 8009496:	0020      	movs	r0, r4
 8009498:	0029      	movs	r1, r5
 800949a:	9a08      	ldr	r2, [sp, #32]
 800949c:	f7f6 ffdc 	bl	8000458 <__aeabi_dcmplt>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d000      	beq.n	80094a6 <_dtoa_r+0x48a>
 80094a4:	e2a3      	b.n	80099ee <_dtoa_r+0x9d2>
 80094a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094a8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80094aa:	9308      	str	r3, [sp, #32]
 80094ac:	9409      	str	r4, [sp, #36]	; 0x24
 80094ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	da00      	bge.n	80094b6 <_dtoa_r+0x49a>
 80094b4:	e179      	b.n	80097aa <_dtoa_r+0x78e>
 80094b6:	9a03      	ldr	r2, [sp, #12]
 80094b8:	2a0e      	cmp	r2, #14
 80094ba:	dd00      	ble.n	80094be <_dtoa_r+0x4a2>
 80094bc:	e175      	b.n	80097aa <_dtoa_r+0x78e>
 80094be:	4ba0      	ldr	r3, [pc, #640]	; (8009740 <_dtoa_r+0x724>)
 80094c0:	00d2      	lsls	r2, r2, #3
 80094c2:	189b      	adds	r3, r3, r2
 80094c4:	681e      	ldr	r6, [r3, #0]
 80094c6:	685f      	ldr	r7, [r3, #4]
 80094c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	db00      	blt.n	80094d0 <_dtoa_r+0x4b4>
 80094ce:	e0e5      	b.n	800969c <_dtoa_r+0x680>
 80094d0:	9b07      	ldr	r3, [sp, #28]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	dd00      	ble.n	80094d8 <_dtoa_r+0x4bc>
 80094d6:	e0e1      	b.n	800969c <_dtoa_r+0x680>
 80094d8:	d000      	beq.n	80094dc <_dtoa_r+0x4c0>
 80094da:	e288      	b.n	80099ee <_dtoa_r+0x9d2>
 80094dc:	2200      	movs	r2, #0
 80094de:	0030      	movs	r0, r6
 80094e0:	0039      	movs	r1, r7
 80094e2:	4b9d      	ldr	r3, [pc, #628]	; (8009758 <_dtoa_r+0x73c>)
 80094e4:	f7f8 fd98 	bl	8002018 <__aeabi_dmul>
 80094e8:	9a08      	ldr	r2, [sp, #32]
 80094ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ec:	f7f6 ffd2 	bl	8000494 <__aeabi_dcmpge>
 80094f0:	9e07      	ldr	r6, [sp, #28]
 80094f2:	0037      	movs	r7, r6
 80094f4:	2800      	cmp	r0, #0
 80094f6:	d000      	beq.n	80094fa <_dtoa_r+0x4de>
 80094f8:	e25f      	b.n	80099ba <_dtoa_r+0x99e>
 80094fa:	9b06      	ldr	r3, [sp, #24]
 80094fc:	9a06      	ldr	r2, [sp, #24]
 80094fe:	3301      	adds	r3, #1
 8009500:	9308      	str	r3, [sp, #32]
 8009502:	2331      	movs	r3, #49	; 0x31
 8009504:	7013      	strb	r3, [r2, #0]
 8009506:	9b03      	ldr	r3, [sp, #12]
 8009508:	3301      	adds	r3, #1
 800950a:	9303      	str	r3, [sp, #12]
 800950c:	e25a      	b.n	80099c4 <_dtoa_r+0x9a8>
 800950e:	423d      	tst	r5, r7
 8009510:	d005      	beq.n	800951e <_dtoa_r+0x502>
 8009512:	6832      	ldr	r2, [r6, #0]
 8009514:	6873      	ldr	r3, [r6, #4]
 8009516:	f7f8 fd7f 	bl	8002018 <__aeabi_dmul>
 800951a:	003b      	movs	r3, r7
 800951c:	3401      	adds	r4, #1
 800951e:	106d      	asrs	r5, r5, #1
 8009520:	3608      	adds	r6, #8
 8009522:	e75f      	b.n	80093e4 <_dtoa_r+0x3c8>
 8009524:	9b03      	ldr	r3, [sp, #12]
 8009526:	930e      	str	r3, [sp, #56]	; 0x38
 8009528:	9b07      	ldr	r3, [sp, #28]
 800952a:	e783      	b.n	8009434 <_dtoa_r+0x418>
 800952c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800952e:	4b84      	ldr	r3, [pc, #528]	; (8009740 <_dtoa_r+0x724>)
 8009530:	3a01      	subs	r2, #1
 8009532:	00d2      	lsls	r2, r2, #3
 8009534:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009536:	189b      	adds	r3, r3, r2
 8009538:	9c08      	ldr	r4, [sp, #32]
 800953a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	2900      	cmp	r1, #0
 8009542:	d051      	beq.n	80095e8 <_dtoa_r+0x5cc>
 8009544:	2000      	movs	r0, #0
 8009546:	4986      	ldr	r1, [pc, #536]	; (8009760 <_dtoa_r+0x744>)
 8009548:	f7f8 f96c 	bl	8001824 <__aeabi_ddiv>
 800954c:	0022      	movs	r2, r4
 800954e:	002b      	movs	r3, r5
 8009550:	f7f9 f824 	bl	800259c <__aeabi_dsub>
 8009554:	9a06      	ldr	r2, [sp, #24]
 8009556:	0004      	movs	r4, r0
 8009558:	4694      	mov	ip, r2
 800955a:	000d      	movs	r5, r1
 800955c:	9b06      	ldr	r3, [sp, #24]
 800955e:	9314      	str	r3, [sp, #80]	; 0x50
 8009560:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009562:	4463      	add	r3, ip
 8009564:	9318      	str	r3, [sp, #96]	; 0x60
 8009566:	0039      	movs	r1, r7
 8009568:	0030      	movs	r0, r6
 800956a:	f7f9 fbb7 	bl	8002cdc <__aeabi_d2iz>
 800956e:	9012      	str	r0, [sp, #72]	; 0x48
 8009570:	f7f9 fbea 	bl	8002d48 <__aeabi_i2d>
 8009574:	0002      	movs	r2, r0
 8009576:	000b      	movs	r3, r1
 8009578:	0030      	movs	r0, r6
 800957a:	0039      	movs	r1, r7
 800957c:	f7f9 f80e 	bl	800259c <__aeabi_dsub>
 8009580:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009582:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009584:	3301      	adds	r3, #1
 8009586:	9308      	str	r3, [sp, #32]
 8009588:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800958a:	0006      	movs	r6, r0
 800958c:	3330      	adds	r3, #48	; 0x30
 800958e:	7013      	strb	r3, [r2, #0]
 8009590:	0022      	movs	r2, r4
 8009592:	002b      	movs	r3, r5
 8009594:	000f      	movs	r7, r1
 8009596:	f7f6 ff5f 	bl	8000458 <__aeabi_dcmplt>
 800959a:	2800      	cmp	r0, #0
 800959c:	d174      	bne.n	8009688 <_dtoa_r+0x66c>
 800959e:	0032      	movs	r2, r6
 80095a0:	003b      	movs	r3, r7
 80095a2:	2000      	movs	r0, #0
 80095a4:	4968      	ldr	r1, [pc, #416]	; (8009748 <_dtoa_r+0x72c>)
 80095a6:	f7f8 fff9 	bl	800259c <__aeabi_dsub>
 80095aa:	0022      	movs	r2, r4
 80095ac:	002b      	movs	r3, r5
 80095ae:	f7f6 ff53 	bl	8000458 <__aeabi_dcmplt>
 80095b2:	2800      	cmp	r0, #0
 80095b4:	d000      	beq.n	80095b8 <_dtoa_r+0x59c>
 80095b6:	e0d7      	b.n	8009768 <_dtoa_r+0x74c>
 80095b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80095ba:	9a08      	ldr	r2, [sp, #32]
 80095bc:	4293      	cmp	r3, r2
 80095be:	d100      	bne.n	80095c2 <_dtoa_r+0x5a6>
 80095c0:	e771      	b.n	80094a6 <_dtoa_r+0x48a>
 80095c2:	2200      	movs	r2, #0
 80095c4:	0020      	movs	r0, r4
 80095c6:	0029      	movs	r1, r5
 80095c8:	4b60      	ldr	r3, [pc, #384]	; (800974c <_dtoa_r+0x730>)
 80095ca:	f7f8 fd25 	bl	8002018 <__aeabi_dmul>
 80095ce:	4b5f      	ldr	r3, [pc, #380]	; (800974c <_dtoa_r+0x730>)
 80095d0:	0004      	movs	r4, r0
 80095d2:	000d      	movs	r5, r1
 80095d4:	0030      	movs	r0, r6
 80095d6:	0039      	movs	r1, r7
 80095d8:	2200      	movs	r2, #0
 80095da:	f7f8 fd1d 	bl	8002018 <__aeabi_dmul>
 80095de:	9b08      	ldr	r3, [sp, #32]
 80095e0:	0006      	movs	r6, r0
 80095e2:	000f      	movs	r7, r1
 80095e4:	9314      	str	r3, [sp, #80]	; 0x50
 80095e6:	e7be      	b.n	8009566 <_dtoa_r+0x54a>
 80095e8:	0020      	movs	r0, r4
 80095ea:	0029      	movs	r1, r5
 80095ec:	f7f8 fd14 	bl	8002018 <__aeabi_dmul>
 80095f0:	9a06      	ldr	r2, [sp, #24]
 80095f2:	9b06      	ldr	r3, [sp, #24]
 80095f4:	4694      	mov	ip, r2
 80095f6:	9308      	str	r3, [sp, #32]
 80095f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095fa:	9014      	str	r0, [sp, #80]	; 0x50
 80095fc:	9115      	str	r1, [sp, #84]	; 0x54
 80095fe:	4463      	add	r3, ip
 8009600:	9319      	str	r3, [sp, #100]	; 0x64
 8009602:	0030      	movs	r0, r6
 8009604:	0039      	movs	r1, r7
 8009606:	f7f9 fb69 	bl	8002cdc <__aeabi_d2iz>
 800960a:	9018      	str	r0, [sp, #96]	; 0x60
 800960c:	f7f9 fb9c 	bl	8002d48 <__aeabi_i2d>
 8009610:	0002      	movs	r2, r0
 8009612:	000b      	movs	r3, r1
 8009614:	0030      	movs	r0, r6
 8009616:	0039      	movs	r1, r7
 8009618:	f7f8 ffc0 	bl	800259c <__aeabi_dsub>
 800961c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800961e:	9b08      	ldr	r3, [sp, #32]
 8009620:	3630      	adds	r6, #48	; 0x30
 8009622:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009624:	701e      	strb	r6, [r3, #0]
 8009626:	3301      	adds	r3, #1
 8009628:	0004      	movs	r4, r0
 800962a:	000d      	movs	r5, r1
 800962c:	9308      	str	r3, [sp, #32]
 800962e:	4293      	cmp	r3, r2
 8009630:	d12d      	bne.n	800968e <_dtoa_r+0x672>
 8009632:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009634:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009636:	9a06      	ldr	r2, [sp, #24]
 8009638:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800963a:	4694      	mov	ip, r2
 800963c:	4463      	add	r3, ip
 800963e:	2200      	movs	r2, #0
 8009640:	9308      	str	r3, [sp, #32]
 8009642:	4b47      	ldr	r3, [pc, #284]	; (8009760 <_dtoa_r+0x744>)
 8009644:	f7f7 fd8e 	bl	8001164 <__aeabi_dadd>
 8009648:	0002      	movs	r2, r0
 800964a:	000b      	movs	r3, r1
 800964c:	0020      	movs	r0, r4
 800964e:	0029      	movs	r1, r5
 8009650:	f7f6 ff16 	bl	8000480 <__aeabi_dcmpgt>
 8009654:	2800      	cmp	r0, #0
 8009656:	d000      	beq.n	800965a <_dtoa_r+0x63e>
 8009658:	e086      	b.n	8009768 <_dtoa_r+0x74c>
 800965a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800965c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800965e:	2000      	movs	r0, #0
 8009660:	493f      	ldr	r1, [pc, #252]	; (8009760 <_dtoa_r+0x744>)
 8009662:	f7f8 ff9b 	bl	800259c <__aeabi_dsub>
 8009666:	0002      	movs	r2, r0
 8009668:	000b      	movs	r3, r1
 800966a:	0020      	movs	r0, r4
 800966c:	0029      	movs	r1, r5
 800966e:	f7f6 fef3 	bl	8000458 <__aeabi_dcmplt>
 8009672:	2800      	cmp	r0, #0
 8009674:	d100      	bne.n	8009678 <_dtoa_r+0x65c>
 8009676:	e716      	b.n	80094a6 <_dtoa_r+0x48a>
 8009678:	9b08      	ldr	r3, [sp, #32]
 800967a:	001a      	movs	r2, r3
 800967c:	3a01      	subs	r2, #1
 800967e:	9208      	str	r2, [sp, #32]
 8009680:	7812      	ldrb	r2, [r2, #0]
 8009682:	2a30      	cmp	r2, #48	; 0x30
 8009684:	d0f8      	beq.n	8009678 <_dtoa_r+0x65c>
 8009686:	9308      	str	r3, [sp, #32]
 8009688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800968a:	9303      	str	r3, [sp, #12]
 800968c:	e046      	b.n	800971c <_dtoa_r+0x700>
 800968e:	2200      	movs	r2, #0
 8009690:	4b2e      	ldr	r3, [pc, #184]	; (800974c <_dtoa_r+0x730>)
 8009692:	f7f8 fcc1 	bl	8002018 <__aeabi_dmul>
 8009696:	0006      	movs	r6, r0
 8009698:	000f      	movs	r7, r1
 800969a:	e7b2      	b.n	8009602 <_dtoa_r+0x5e6>
 800969c:	9b06      	ldr	r3, [sp, #24]
 800969e:	9a06      	ldr	r2, [sp, #24]
 80096a0:	930a      	str	r3, [sp, #40]	; 0x28
 80096a2:	9b07      	ldr	r3, [sp, #28]
 80096a4:	9c08      	ldr	r4, [sp, #32]
 80096a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80096a8:	3b01      	subs	r3, #1
 80096aa:	189b      	adds	r3, r3, r2
 80096ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80096ae:	0032      	movs	r2, r6
 80096b0:	003b      	movs	r3, r7
 80096b2:	0020      	movs	r0, r4
 80096b4:	0029      	movs	r1, r5
 80096b6:	f7f8 f8b5 	bl	8001824 <__aeabi_ddiv>
 80096ba:	f7f9 fb0f 	bl	8002cdc <__aeabi_d2iz>
 80096be:	9007      	str	r0, [sp, #28]
 80096c0:	f7f9 fb42 	bl	8002d48 <__aeabi_i2d>
 80096c4:	0032      	movs	r2, r6
 80096c6:	003b      	movs	r3, r7
 80096c8:	f7f8 fca6 	bl	8002018 <__aeabi_dmul>
 80096cc:	0002      	movs	r2, r0
 80096ce:	000b      	movs	r3, r1
 80096d0:	0020      	movs	r0, r4
 80096d2:	0029      	movs	r1, r5
 80096d4:	f7f8 ff62 	bl	800259c <__aeabi_dsub>
 80096d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096da:	001a      	movs	r2, r3
 80096dc:	3201      	adds	r2, #1
 80096de:	920a      	str	r2, [sp, #40]	; 0x28
 80096e0:	9208      	str	r2, [sp, #32]
 80096e2:	9a07      	ldr	r2, [sp, #28]
 80096e4:	3230      	adds	r2, #48	; 0x30
 80096e6:	701a      	strb	r2, [r3, #0]
 80096e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d14f      	bne.n	800978e <_dtoa_r+0x772>
 80096ee:	0002      	movs	r2, r0
 80096f0:	000b      	movs	r3, r1
 80096f2:	f7f7 fd37 	bl	8001164 <__aeabi_dadd>
 80096f6:	0032      	movs	r2, r6
 80096f8:	003b      	movs	r3, r7
 80096fa:	0004      	movs	r4, r0
 80096fc:	000d      	movs	r5, r1
 80096fe:	f7f6 febf 	bl	8000480 <__aeabi_dcmpgt>
 8009702:	2800      	cmp	r0, #0
 8009704:	d12e      	bne.n	8009764 <_dtoa_r+0x748>
 8009706:	0032      	movs	r2, r6
 8009708:	003b      	movs	r3, r7
 800970a:	0020      	movs	r0, r4
 800970c:	0029      	movs	r1, r5
 800970e:	f7f6 fe9d 	bl	800044c <__aeabi_dcmpeq>
 8009712:	2800      	cmp	r0, #0
 8009714:	d002      	beq.n	800971c <_dtoa_r+0x700>
 8009716:	9b07      	ldr	r3, [sp, #28]
 8009718:	07de      	lsls	r6, r3, #31
 800971a:	d423      	bmi.n	8009764 <_dtoa_r+0x748>
 800971c:	9905      	ldr	r1, [sp, #20]
 800971e:	9804      	ldr	r0, [sp, #16]
 8009720:	f000 fbd6 	bl	8009ed0 <_Bfree>
 8009724:	2300      	movs	r3, #0
 8009726:	9a08      	ldr	r2, [sp, #32]
 8009728:	7013      	strb	r3, [r2, #0]
 800972a:	9b03      	ldr	r3, [sp, #12]
 800972c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800972e:	3301      	adds	r3, #1
 8009730:	6013      	str	r3, [r2, #0]
 8009732:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009734:	2b00      	cmp	r3, #0
 8009736:	d100      	bne.n	800973a <_dtoa_r+0x71e>
 8009738:	e4ba      	b.n	80090b0 <_dtoa_r+0x94>
 800973a:	9a08      	ldr	r2, [sp, #32]
 800973c:	601a      	str	r2, [r3, #0]
 800973e:	e4b7      	b.n	80090b0 <_dtoa_r+0x94>
 8009740:	0800d4b0 	.word	0x0800d4b0
 8009744:	0800d488 	.word	0x0800d488
 8009748:	3ff00000 	.word	0x3ff00000
 800974c:	40240000 	.word	0x40240000
 8009750:	401c0000 	.word	0x401c0000
 8009754:	fcc00000 	.word	0xfcc00000
 8009758:	40140000 	.word	0x40140000
 800975c:	7cc00000 	.word	0x7cc00000
 8009760:	3fe00000 	.word	0x3fe00000
 8009764:	9b03      	ldr	r3, [sp, #12]
 8009766:	930e      	str	r3, [sp, #56]	; 0x38
 8009768:	9b08      	ldr	r3, [sp, #32]
 800976a:	9308      	str	r3, [sp, #32]
 800976c:	3b01      	subs	r3, #1
 800976e:	781a      	ldrb	r2, [r3, #0]
 8009770:	2a39      	cmp	r2, #57	; 0x39
 8009772:	d108      	bne.n	8009786 <_dtoa_r+0x76a>
 8009774:	9a06      	ldr	r2, [sp, #24]
 8009776:	429a      	cmp	r2, r3
 8009778:	d1f7      	bne.n	800976a <_dtoa_r+0x74e>
 800977a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800977c:	9906      	ldr	r1, [sp, #24]
 800977e:	3201      	adds	r2, #1
 8009780:	920e      	str	r2, [sp, #56]	; 0x38
 8009782:	2230      	movs	r2, #48	; 0x30
 8009784:	700a      	strb	r2, [r1, #0]
 8009786:	781a      	ldrb	r2, [r3, #0]
 8009788:	3201      	adds	r2, #1
 800978a:	701a      	strb	r2, [r3, #0]
 800978c:	e77c      	b.n	8009688 <_dtoa_r+0x66c>
 800978e:	2200      	movs	r2, #0
 8009790:	4ba9      	ldr	r3, [pc, #676]	; (8009a38 <_dtoa_r+0xa1c>)
 8009792:	f7f8 fc41 	bl	8002018 <__aeabi_dmul>
 8009796:	2200      	movs	r2, #0
 8009798:	2300      	movs	r3, #0
 800979a:	0004      	movs	r4, r0
 800979c:	000d      	movs	r5, r1
 800979e:	f7f6 fe55 	bl	800044c <__aeabi_dcmpeq>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d100      	bne.n	80097a8 <_dtoa_r+0x78c>
 80097a6:	e782      	b.n	80096ae <_dtoa_r+0x692>
 80097a8:	e7b8      	b.n	800971c <_dtoa_r+0x700>
 80097aa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80097ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80097ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80097b0:	2f00      	cmp	r7, #0
 80097b2:	d012      	beq.n	80097da <_dtoa_r+0x7be>
 80097b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80097b6:	2a01      	cmp	r2, #1
 80097b8:	dc6e      	bgt.n	8009898 <_dtoa_r+0x87c>
 80097ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80097bc:	2a00      	cmp	r2, #0
 80097be:	d065      	beq.n	800988c <_dtoa_r+0x870>
 80097c0:	4a9e      	ldr	r2, [pc, #632]	; (8009a3c <_dtoa_r+0xa20>)
 80097c2:	189b      	adds	r3, r3, r2
 80097c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097c6:	2101      	movs	r1, #1
 80097c8:	18d2      	adds	r2, r2, r3
 80097ca:	920a      	str	r2, [sp, #40]	; 0x28
 80097cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097ce:	9804      	ldr	r0, [sp, #16]
 80097d0:	18d3      	adds	r3, r2, r3
 80097d2:	930c      	str	r3, [sp, #48]	; 0x30
 80097d4:	f000 fc2c 	bl	800a030 <__i2b>
 80097d8:	0007      	movs	r7, r0
 80097da:	2c00      	cmp	r4, #0
 80097dc:	d00e      	beq.n	80097fc <_dtoa_r+0x7e0>
 80097de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	dd0b      	ble.n	80097fc <_dtoa_r+0x7e0>
 80097e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097e6:	0023      	movs	r3, r4
 80097e8:	4294      	cmp	r4, r2
 80097ea:	dd00      	ble.n	80097ee <_dtoa_r+0x7d2>
 80097ec:	0013      	movs	r3, r2
 80097ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097f0:	1ae4      	subs	r4, r4, r3
 80097f2:	1ad2      	subs	r2, r2, r3
 80097f4:	920a      	str	r2, [sp, #40]	; 0x28
 80097f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097f8:	1ad3      	subs	r3, r2, r3
 80097fa:	930c      	str	r3, [sp, #48]	; 0x30
 80097fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d01e      	beq.n	8009840 <_dtoa_r+0x824>
 8009802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009804:	2b00      	cmp	r3, #0
 8009806:	d05c      	beq.n	80098c2 <_dtoa_r+0x8a6>
 8009808:	2d00      	cmp	r5, #0
 800980a:	dd10      	ble.n	800982e <_dtoa_r+0x812>
 800980c:	0039      	movs	r1, r7
 800980e:	002a      	movs	r2, r5
 8009810:	9804      	ldr	r0, [sp, #16]
 8009812:	f000 fcd5 	bl	800a1c0 <__pow5mult>
 8009816:	9a05      	ldr	r2, [sp, #20]
 8009818:	0001      	movs	r1, r0
 800981a:	0007      	movs	r7, r0
 800981c:	9804      	ldr	r0, [sp, #16]
 800981e:	f000 fc1f 	bl	800a060 <__multiply>
 8009822:	0006      	movs	r6, r0
 8009824:	9905      	ldr	r1, [sp, #20]
 8009826:	9804      	ldr	r0, [sp, #16]
 8009828:	f000 fb52 	bl	8009ed0 <_Bfree>
 800982c:	9605      	str	r6, [sp, #20]
 800982e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009830:	1b5a      	subs	r2, r3, r5
 8009832:	42ab      	cmp	r3, r5
 8009834:	d004      	beq.n	8009840 <_dtoa_r+0x824>
 8009836:	9905      	ldr	r1, [sp, #20]
 8009838:	9804      	ldr	r0, [sp, #16]
 800983a:	f000 fcc1 	bl	800a1c0 <__pow5mult>
 800983e:	9005      	str	r0, [sp, #20]
 8009840:	2101      	movs	r1, #1
 8009842:	9804      	ldr	r0, [sp, #16]
 8009844:	f000 fbf4 	bl	800a030 <__i2b>
 8009848:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800984a:	0006      	movs	r6, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	dd3a      	ble.n	80098c6 <_dtoa_r+0x8aa>
 8009850:	001a      	movs	r2, r3
 8009852:	0001      	movs	r1, r0
 8009854:	9804      	ldr	r0, [sp, #16]
 8009856:	f000 fcb3 	bl	800a1c0 <__pow5mult>
 800985a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800985c:	0006      	movs	r6, r0
 800985e:	2500      	movs	r5, #0
 8009860:	2b01      	cmp	r3, #1
 8009862:	dc38      	bgt.n	80098d6 <_dtoa_r+0x8ba>
 8009864:	2500      	movs	r5, #0
 8009866:	9b08      	ldr	r3, [sp, #32]
 8009868:	42ab      	cmp	r3, r5
 800986a:	d130      	bne.n	80098ce <_dtoa_r+0x8b2>
 800986c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986e:	031b      	lsls	r3, r3, #12
 8009870:	42ab      	cmp	r3, r5
 8009872:	d12c      	bne.n	80098ce <_dtoa_r+0x8b2>
 8009874:	4b72      	ldr	r3, [pc, #456]	; (8009a40 <_dtoa_r+0xa24>)
 8009876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009878:	4213      	tst	r3, r2
 800987a:	d028      	beq.n	80098ce <_dtoa_r+0x8b2>
 800987c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800987e:	3501      	adds	r5, #1
 8009880:	3301      	adds	r3, #1
 8009882:	930a      	str	r3, [sp, #40]	; 0x28
 8009884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009886:	3301      	adds	r3, #1
 8009888:	930c      	str	r3, [sp, #48]	; 0x30
 800988a:	e020      	b.n	80098ce <_dtoa_r+0x8b2>
 800988c:	2336      	movs	r3, #54	; 0x36
 800988e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009890:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009892:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009894:	1a9b      	subs	r3, r3, r2
 8009896:	e795      	b.n	80097c4 <_dtoa_r+0x7a8>
 8009898:	9b07      	ldr	r3, [sp, #28]
 800989a:	1e5d      	subs	r5, r3, #1
 800989c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800989e:	42ab      	cmp	r3, r5
 80098a0:	db07      	blt.n	80098b2 <_dtoa_r+0x896>
 80098a2:	1b5d      	subs	r5, r3, r5
 80098a4:	9b07      	ldr	r3, [sp, #28]
 80098a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	da8b      	bge.n	80097c4 <_dtoa_r+0x7a8>
 80098ac:	1ae4      	subs	r4, r4, r3
 80098ae:	2300      	movs	r3, #0
 80098b0:	e788      	b.n	80097c4 <_dtoa_r+0x7a8>
 80098b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80098b6:	1aeb      	subs	r3, r5, r3
 80098b8:	18d3      	adds	r3, r2, r3
 80098ba:	950d      	str	r5, [sp, #52]	; 0x34
 80098bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80098be:	2500      	movs	r5, #0
 80098c0:	e7f0      	b.n	80098a4 <_dtoa_r+0x888>
 80098c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098c4:	e7b7      	b.n	8009836 <_dtoa_r+0x81a>
 80098c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098c8:	2500      	movs	r5, #0
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	ddca      	ble.n	8009864 <_dtoa_r+0x848>
 80098ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098d0:	2001      	movs	r0, #1
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d008      	beq.n	80098e8 <_dtoa_r+0x8cc>
 80098d6:	6933      	ldr	r3, [r6, #16]
 80098d8:	3303      	adds	r3, #3
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	18f3      	adds	r3, r6, r3
 80098de:	6858      	ldr	r0, [r3, #4]
 80098e0:	f000 fb5e 	bl	8009fa0 <__hi0bits>
 80098e4:	2320      	movs	r3, #32
 80098e6:	1a18      	subs	r0, r3, r0
 80098e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098ea:	1818      	adds	r0, r3, r0
 80098ec:	0002      	movs	r2, r0
 80098ee:	231f      	movs	r3, #31
 80098f0:	401a      	ands	r2, r3
 80098f2:	4218      	tst	r0, r3
 80098f4:	d047      	beq.n	8009986 <_dtoa_r+0x96a>
 80098f6:	3301      	adds	r3, #1
 80098f8:	1a9b      	subs	r3, r3, r2
 80098fa:	2b04      	cmp	r3, #4
 80098fc:	dd3f      	ble.n	800997e <_dtoa_r+0x962>
 80098fe:	231c      	movs	r3, #28
 8009900:	1a9b      	subs	r3, r3, r2
 8009902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009904:	18e4      	adds	r4, r4, r3
 8009906:	18d2      	adds	r2, r2, r3
 8009908:	920a      	str	r2, [sp, #40]	; 0x28
 800990a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800990c:	18d3      	adds	r3, r2, r3
 800990e:	930c      	str	r3, [sp, #48]	; 0x30
 8009910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009912:	2b00      	cmp	r3, #0
 8009914:	dd05      	ble.n	8009922 <_dtoa_r+0x906>
 8009916:	001a      	movs	r2, r3
 8009918:	9905      	ldr	r1, [sp, #20]
 800991a:	9804      	ldr	r0, [sp, #16]
 800991c:	f000 fcac 	bl	800a278 <__lshift>
 8009920:	9005      	str	r0, [sp, #20]
 8009922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009924:	2b00      	cmp	r3, #0
 8009926:	dd05      	ble.n	8009934 <_dtoa_r+0x918>
 8009928:	0031      	movs	r1, r6
 800992a:	001a      	movs	r2, r3
 800992c:	9804      	ldr	r0, [sp, #16]
 800992e:	f000 fca3 	bl	800a278 <__lshift>
 8009932:	0006      	movs	r6, r0
 8009934:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009936:	2b00      	cmp	r3, #0
 8009938:	d027      	beq.n	800998a <_dtoa_r+0x96e>
 800993a:	0031      	movs	r1, r6
 800993c:	9805      	ldr	r0, [sp, #20]
 800993e:	f000 fd09 	bl	800a354 <__mcmp>
 8009942:	2800      	cmp	r0, #0
 8009944:	da21      	bge.n	800998a <_dtoa_r+0x96e>
 8009946:	9b03      	ldr	r3, [sp, #12]
 8009948:	220a      	movs	r2, #10
 800994a:	3b01      	subs	r3, #1
 800994c:	9303      	str	r3, [sp, #12]
 800994e:	9905      	ldr	r1, [sp, #20]
 8009950:	2300      	movs	r3, #0
 8009952:	9804      	ldr	r0, [sp, #16]
 8009954:	f000 fae0 	bl	8009f18 <__multadd>
 8009958:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800995a:	9005      	str	r0, [sp, #20]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d100      	bne.n	8009962 <_dtoa_r+0x946>
 8009960:	e15d      	b.n	8009c1e <_dtoa_r+0xc02>
 8009962:	2300      	movs	r3, #0
 8009964:	0039      	movs	r1, r7
 8009966:	220a      	movs	r2, #10
 8009968:	9804      	ldr	r0, [sp, #16]
 800996a:	f000 fad5 	bl	8009f18 <__multadd>
 800996e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009970:	0007      	movs	r7, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	dc49      	bgt.n	8009a0a <_dtoa_r+0x9ee>
 8009976:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009978:	2b02      	cmp	r3, #2
 800997a:	dc0e      	bgt.n	800999a <_dtoa_r+0x97e>
 800997c:	e045      	b.n	8009a0a <_dtoa_r+0x9ee>
 800997e:	2b04      	cmp	r3, #4
 8009980:	d0c6      	beq.n	8009910 <_dtoa_r+0x8f4>
 8009982:	331c      	adds	r3, #28
 8009984:	e7bd      	b.n	8009902 <_dtoa_r+0x8e6>
 8009986:	0013      	movs	r3, r2
 8009988:	e7fb      	b.n	8009982 <_dtoa_r+0x966>
 800998a:	9b07      	ldr	r3, [sp, #28]
 800998c:	2b00      	cmp	r3, #0
 800998e:	dc36      	bgt.n	80099fe <_dtoa_r+0x9e2>
 8009990:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009992:	2b02      	cmp	r3, #2
 8009994:	dd33      	ble.n	80099fe <_dtoa_r+0x9e2>
 8009996:	9b07      	ldr	r3, [sp, #28]
 8009998:	930b      	str	r3, [sp, #44]	; 0x2c
 800999a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10c      	bne.n	80099ba <_dtoa_r+0x99e>
 80099a0:	0031      	movs	r1, r6
 80099a2:	2205      	movs	r2, #5
 80099a4:	9804      	ldr	r0, [sp, #16]
 80099a6:	f000 fab7 	bl	8009f18 <__multadd>
 80099aa:	0006      	movs	r6, r0
 80099ac:	0001      	movs	r1, r0
 80099ae:	9805      	ldr	r0, [sp, #20]
 80099b0:	f000 fcd0 	bl	800a354 <__mcmp>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	dd00      	ble.n	80099ba <_dtoa_r+0x99e>
 80099b8:	e59f      	b.n	80094fa <_dtoa_r+0x4de>
 80099ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80099bc:	43db      	mvns	r3, r3
 80099be:	9303      	str	r3, [sp, #12]
 80099c0:	9b06      	ldr	r3, [sp, #24]
 80099c2:	9308      	str	r3, [sp, #32]
 80099c4:	2500      	movs	r5, #0
 80099c6:	0031      	movs	r1, r6
 80099c8:	9804      	ldr	r0, [sp, #16]
 80099ca:	f000 fa81 	bl	8009ed0 <_Bfree>
 80099ce:	2f00      	cmp	r7, #0
 80099d0:	d100      	bne.n	80099d4 <_dtoa_r+0x9b8>
 80099d2:	e6a3      	b.n	800971c <_dtoa_r+0x700>
 80099d4:	2d00      	cmp	r5, #0
 80099d6:	d005      	beq.n	80099e4 <_dtoa_r+0x9c8>
 80099d8:	42bd      	cmp	r5, r7
 80099da:	d003      	beq.n	80099e4 <_dtoa_r+0x9c8>
 80099dc:	0029      	movs	r1, r5
 80099de:	9804      	ldr	r0, [sp, #16]
 80099e0:	f000 fa76 	bl	8009ed0 <_Bfree>
 80099e4:	0039      	movs	r1, r7
 80099e6:	9804      	ldr	r0, [sp, #16]
 80099e8:	f000 fa72 	bl	8009ed0 <_Bfree>
 80099ec:	e696      	b.n	800971c <_dtoa_r+0x700>
 80099ee:	2600      	movs	r6, #0
 80099f0:	0037      	movs	r7, r6
 80099f2:	e7e2      	b.n	80099ba <_dtoa_r+0x99e>
 80099f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099f6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80099f8:	9303      	str	r3, [sp, #12]
 80099fa:	0037      	movs	r7, r6
 80099fc:	e57d      	b.n	80094fa <_dtoa_r+0x4de>
 80099fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d100      	bne.n	8009a06 <_dtoa_r+0x9ea>
 8009a04:	e0c3      	b.n	8009b8e <_dtoa_r+0xb72>
 8009a06:	9b07      	ldr	r3, [sp, #28]
 8009a08:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a0a:	2c00      	cmp	r4, #0
 8009a0c:	dd05      	ble.n	8009a1a <_dtoa_r+0x9fe>
 8009a0e:	0039      	movs	r1, r7
 8009a10:	0022      	movs	r2, r4
 8009a12:	9804      	ldr	r0, [sp, #16]
 8009a14:	f000 fc30 	bl	800a278 <__lshift>
 8009a18:	0007      	movs	r7, r0
 8009a1a:	0038      	movs	r0, r7
 8009a1c:	2d00      	cmp	r5, #0
 8009a1e:	d024      	beq.n	8009a6a <_dtoa_r+0xa4e>
 8009a20:	6879      	ldr	r1, [r7, #4]
 8009a22:	9804      	ldr	r0, [sp, #16]
 8009a24:	f000 fa10 	bl	8009e48 <_Balloc>
 8009a28:	1e04      	subs	r4, r0, #0
 8009a2a:	d111      	bne.n	8009a50 <_dtoa_r+0xa34>
 8009a2c:	0022      	movs	r2, r4
 8009a2e:	4b05      	ldr	r3, [pc, #20]	; (8009a44 <_dtoa_r+0xa28>)
 8009a30:	4805      	ldr	r0, [pc, #20]	; (8009a48 <_dtoa_r+0xa2c>)
 8009a32:	4906      	ldr	r1, [pc, #24]	; (8009a4c <_dtoa_r+0xa30>)
 8009a34:	f7ff fb07 	bl	8009046 <_dtoa_r+0x2a>
 8009a38:	40240000 	.word	0x40240000
 8009a3c:	00000433 	.word	0x00000433
 8009a40:	7ff00000 	.word	0x7ff00000
 8009a44:	0800d418 	.word	0x0800d418
 8009a48:	0800d3c0 	.word	0x0800d3c0
 8009a4c:	000002ef 	.word	0x000002ef
 8009a50:	0039      	movs	r1, r7
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	310c      	adds	r1, #12
 8009a56:	3202      	adds	r2, #2
 8009a58:	0092      	lsls	r2, r2, #2
 8009a5a:	300c      	adds	r0, #12
 8009a5c:	f000 ffca 	bl	800a9f4 <memcpy>
 8009a60:	2201      	movs	r2, #1
 8009a62:	0021      	movs	r1, r4
 8009a64:	9804      	ldr	r0, [sp, #16]
 8009a66:	f000 fc07 	bl	800a278 <__lshift>
 8009a6a:	9b06      	ldr	r3, [sp, #24]
 8009a6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a6e:	9307      	str	r3, [sp, #28]
 8009a70:	3b01      	subs	r3, #1
 8009a72:	189b      	adds	r3, r3, r2
 8009a74:	2201      	movs	r2, #1
 8009a76:	003d      	movs	r5, r7
 8009a78:	0007      	movs	r7, r0
 8009a7a:	930e      	str	r3, [sp, #56]	; 0x38
 8009a7c:	9b08      	ldr	r3, [sp, #32]
 8009a7e:	4013      	ands	r3, r2
 8009a80:	930d      	str	r3, [sp, #52]	; 0x34
 8009a82:	0031      	movs	r1, r6
 8009a84:	9805      	ldr	r0, [sp, #20]
 8009a86:	f7ff fa39 	bl	8008efc <quorem>
 8009a8a:	0029      	movs	r1, r5
 8009a8c:	0004      	movs	r4, r0
 8009a8e:	900b      	str	r0, [sp, #44]	; 0x2c
 8009a90:	9805      	ldr	r0, [sp, #20]
 8009a92:	f000 fc5f 	bl	800a354 <__mcmp>
 8009a96:	003a      	movs	r2, r7
 8009a98:	900c      	str	r0, [sp, #48]	; 0x30
 8009a9a:	0031      	movs	r1, r6
 8009a9c:	9804      	ldr	r0, [sp, #16]
 8009a9e:	f000 fc75 	bl	800a38c <__mdiff>
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	68c3      	ldr	r3, [r0, #12]
 8009aa6:	3430      	adds	r4, #48	; 0x30
 8009aa8:	9008      	str	r0, [sp, #32]
 8009aaa:	920a      	str	r2, [sp, #40]	; 0x28
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d104      	bne.n	8009aba <_dtoa_r+0xa9e>
 8009ab0:	0001      	movs	r1, r0
 8009ab2:	9805      	ldr	r0, [sp, #20]
 8009ab4:	f000 fc4e 	bl	800a354 <__mcmp>
 8009ab8:	900a      	str	r0, [sp, #40]	; 0x28
 8009aba:	9908      	ldr	r1, [sp, #32]
 8009abc:	9804      	ldr	r0, [sp, #16]
 8009abe:	f000 fa07 	bl	8009ed0 <_Bfree>
 8009ac2:	9b07      	ldr	r3, [sp, #28]
 8009ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	9308      	str	r3, [sp, #32]
 8009aca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009acc:	4313      	orrs	r3, r2
 8009ace:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	d109      	bne.n	8009ae8 <_dtoa_r+0xacc>
 8009ad4:	2c39      	cmp	r4, #57	; 0x39
 8009ad6:	d022      	beq.n	8009b1e <_dtoa_r+0xb02>
 8009ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	dd01      	ble.n	8009ae2 <_dtoa_r+0xac6>
 8009ade:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009ae0:	3431      	adds	r4, #49	; 0x31
 8009ae2:	9b07      	ldr	r3, [sp, #28]
 8009ae4:	701c      	strb	r4, [r3, #0]
 8009ae6:	e76e      	b.n	80099c6 <_dtoa_r+0x9aa>
 8009ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	db04      	blt.n	8009af8 <_dtoa_r+0xadc>
 8009aee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009af0:	4313      	orrs	r3, r2
 8009af2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009af4:	4313      	orrs	r3, r2
 8009af6:	d11e      	bne.n	8009b36 <_dtoa_r+0xb1a>
 8009af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	ddf1      	ble.n	8009ae2 <_dtoa_r+0xac6>
 8009afe:	9905      	ldr	r1, [sp, #20]
 8009b00:	2201      	movs	r2, #1
 8009b02:	9804      	ldr	r0, [sp, #16]
 8009b04:	f000 fbb8 	bl	800a278 <__lshift>
 8009b08:	0031      	movs	r1, r6
 8009b0a:	9005      	str	r0, [sp, #20]
 8009b0c:	f000 fc22 	bl	800a354 <__mcmp>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	dc02      	bgt.n	8009b1a <_dtoa_r+0xafe>
 8009b14:	d1e5      	bne.n	8009ae2 <_dtoa_r+0xac6>
 8009b16:	07e3      	lsls	r3, r4, #31
 8009b18:	d5e3      	bpl.n	8009ae2 <_dtoa_r+0xac6>
 8009b1a:	2c39      	cmp	r4, #57	; 0x39
 8009b1c:	d1df      	bne.n	8009ade <_dtoa_r+0xac2>
 8009b1e:	2339      	movs	r3, #57	; 0x39
 8009b20:	9a07      	ldr	r2, [sp, #28]
 8009b22:	7013      	strb	r3, [r2, #0]
 8009b24:	9b08      	ldr	r3, [sp, #32]
 8009b26:	9308      	str	r3, [sp, #32]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	781a      	ldrb	r2, [r3, #0]
 8009b2c:	2a39      	cmp	r2, #57	; 0x39
 8009b2e:	d063      	beq.n	8009bf8 <_dtoa_r+0xbdc>
 8009b30:	3201      	adds	r2, #1
 8009b32:	701a      	strb	r2, [r3, #0]
 8009b34:	e747      	b.n	80099c6 <_dtoa_r+0x9aa>
 8009b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	dd03      	ble.n	8009b44 <_dtoa_r+0xb28>
 8009b3c:	2c39      	cmp	r4, #57	; 0x39
 8009b3e:	d0ee      	beq.n	8009b1e <_dtoa_r+0xb02>
 8009b40:	3401      	adds	r4, #1
 8009b42:	e7ce      	b.n	8009ae2 <_dtoa_r+0xac6>
 8009b44:	9b07      	ldr	r3, [sp, #28]
 8009b46:	9a07      	ldr	r2, [sp, #28]
 8009b48:	701c      	strb	r4, [r3, #0]
 8009b4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d03e      	beq.n	8009bce <_dtoa_r+0xbb2>
 8009b50:	2300      	movs	r3, #0
 8009b52:	220a      	movs	r2, #10
 8009b54:	9905      	ldr	r1, [sp, #20]
 8009b56:	9804      	ldr	r0, [sp, #16]
 8009b58:	f000 f9de 	bl	8009f18 <__multadd>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	9005      	str	r0, [sp, #20]
 8009b60:	220a      	movs	r2, #10
 8009b62:	0029      	movs	r1, r5
 8009b64:	9804      	ldr	r0, [sp, #16]
 8009b66:	42bd      	cmp	r5, r7
 8009b68:	d106      	bne.n	8009b78 <_dtoa_r+0xb5c>
 8009b6a:	f000 f9d5 	bl	8009f18 <__multadd>
 8009b6e:	0005      	movs	r5, r0
 8009b70:	0007      	movs	r7, r0
 8009b72:	9b08      	ldr	r3, [sp, #32]
 8009b74:	9307      	str	r3, [sp, #28]
 8009b76:	e784      	b.n	8009a82 <_dtoa_r+0xa66>
 8009b78:	f000 f9ce 	bl	8009f18 <__multadd>
 8009b7c:	0039      	movs	r1, r7
 8009b7e:	0005      	movs	r5, r0
 8009b80:	2300      	movs	r3, #0
 8009b82:	220a      	movs	r2, #10
 8009b84:	9804      	ldr	r0, [sp, #16]
 8009b86:	f000 f9c7 	bl	8009f18 <__multadd>
 8009b8a:	0007      	movs	r7, r0
 8009b8c:	e7f1      	b.n	8009b72 <_dtoa_r+0xb56>
 8009b8e:	9b07      	ldr	r3, [sp, #28]
 8009b90:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b92:	2500      	movs	r5, #0
 8009b94:	0031      	movs	r1, r6
 8009b96:	9805      	ldr	r0, [sp, #20]
 8009b98:	f7ff f9b0 	bl	8008efc <quorem>
 8009b9c:	9b06      	ldr	r3, [sp, #24]
 8009b9e:	3030      	adds	r0, #48	; 0x30
 8009ba0:	5558      	strb	r0, [r3, r5]
 8009ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ba4:	3501      	adds	r5, #1
 8009ba6:	0004      	movs	r4, r0
 8009ba8:	42ab      	cmp	r3, r5
 8009baa:	dd07      	ble.n	8009bbc <_dtoa_r+0xba0>
 8009bac:	2300      	movs	r3, #0
 8009bae:	220a      	movs	r2, #10
 8009bb0:	9905      	ldr	r1, [sp, #20]
 8009bb2:	9804      	ldr	r0, [sp, #16]
 8009bb4:	f000 f9b0 	bl	8009f18 <__multadd>
 8009bb8:	9005      	str	r0, [sp, #20]
 8009bba:	e7eb      	b.n	8009b94 <_dtoa_r+0xb78>
 8009bbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	2a00      	cmp	r2, #0
 8009bc2:	dd00      	ble.n	8009bc6 <_dtoa_r+0xbaa>
 8009bc4:	0013      	movs	r3, r2
 8009bc6:	2500      	movs	r5, #0
 8009bc8:	9a06      	ldr	r2, [sp, #24]
 8009bca:	18d3      	adds	r3, r2, r3
 8009bcc:	9308      	str	r3, [sp, #32]
 8009bce:	9905      	ldr	r1, [sp, #20]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	9804      	ldr	r0, [sp, #16]
 8009bd4:	f000 fb50 	bl	800a278 <__lshift>
 8009bd8:	0031      	movs	r1, r6
 8009bda:	9005      	str	r0, [sp, #20]
 8009bdc:	f000 fbba 	bl	800a354 <__mcmp>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	dc9f      	bgt.n	8009b24 <_dtoa_r+0xb08>
 8009be4:	d101      	bne.n	8009bea <_dtoa_r+0xbce>
 8009be6:	07e4      	lsls	r4, r4, #31
 8009be8:	d49c      	bmi.n	8009b24 <_dtoa_r+0xb08>
 8009bea:	9b08      	ldr	r3, [sp, #32]
 8009bec:	9308      	str	r3, [sp, #32]
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	781a      	ldrb	r2, [r3, #0]
 8009bf2:	2a30      	cmp	r2, #48	; 0x30
 8009bf4:	d0fa      	beq.n	8009bec <_dtoa_r+0xbd0>
 8009bf6:	e6e6      	b.n	80099c6 <_dtoa_r+0x9aa>
 8009bf8:	9a06      	ldr	r2, [sp, #24]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d193      	bne.n	8009b26 <_dtoa_r+0xb0a>
 8009bfe:	9b03      	ldr	r3, [sp, #12]
 8009c00:	3301      	adds	r3, #1
 8009c02:	9303      	str	r3, [sp, #12]
 8009c04:	2331      	movs	r3, #49	; 0x31
 8009c06:	7013      	strb	r3, [r2, #0]
 8009c08:	e6dd      	b.n	80099c6 <_dtoa_r+0x9aa>
 8009c0a:	4b09      	ldr	r3, [pc, #36]	; (8009c30 <_dtoa_r+0xc14>)
 8009c0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009c0e:	9306      	str	r3, [sp, #24]
 8009c10:	4b08      	ldr	r3, [pc, #32]	; (8009c34 <_dtoa_r+0xc18>)
 8009c12:	2a00      	cmp	r2, #0
 8009c14:	d001      	beq.n	8009c1a <_dtoa_r+0xbfe>
 8009c16:	f7ff fa49 	bl	80090ac <_dtoa_r+0x90>
 8009c1a:	f7ff fa49 	bl	80090b0 <_dtoa_r+0x94>
 8009c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	dcb6      	bgt.n	8009b92 <_dtoa_r+0xb76>
 8009c24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	dd00      	ble.n	8009c2c <_dtoa_r+0xc10>
 8009c2a:	e6b6      	b.n	800999a <_dtoa_r+0x97e>
 8009c2c:	e7b1      	b.n	8009b92 <_dtoa_r+0xb76>
 8009c2e:	46c0      	nop			; (mov r8, r8)
 8009c30:	0800d39c 	.word	0x0800d39c
 8009c34:	0800d3a4 	.word	0x0800d3a4

08009c38 <_free_r>:
 8009c38:	b570      	push	{r4, r5, r6, lr}
 8009c3a:	0005      	movs	r5, r0
 8009c3c:	2900      	cmp	r1, #0
 8009c3e:	d010      	beq.n	8009c62 <_free_r+0x2a>
 8009c40:	1f0c      	subs	r4, r1, #4
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	da00      	bge.n	8009c4a <_free_r+0x12>
 8009c48:	18e4      	adds	r4, r4, r3
 8009c4a:	0028      	movs	r0, r5
 8009c4c:	f000 f8ec 	bl	8009e28 <__malloc_lock>
 8009c50:	4a1d      	ldr	r2, [pc, #116]	; (8009cc8 <_free_r+0x90>)
 8009c52:	6813      	ldr	r3, [r2, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d105      	bne.n	8009c64 <_free_r+0x2c>
 8009c58:	6063      	str	r3, [r4, #4]
 8009c5a:	6014      	str	r4, [r2, #0]
 8009c5c:	0028      	movs	r0, r5
 8009c5e:	f000 f8eb 	bl	8009e38 <__malloc_unlock>
 8009c62:	bd70      	pop	{r4, r5, r6, pc}
 8009c64:	42a3      	cmp	r3, r4
 8009c66:	d908      	bls.n	8009c7a <_free_r+0x42>
 8009c68:	6820      	ldr	r0, [r4, #0]
 8009c6a:	1821      	adds	r1, r4, r0
 8009c6c:	428b      	cmp	r3, r1
 8009c6e:	d1f3      	bne.n	8009c58 <_free_r+0x20>
 8009c70:	6819      	ldr	r1, [r3, #0]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	1809      	adds	r1, r1, r0
 8009c76:	6021      	str	r1, [r4, #0]
 8009c78:	e7ee      	b.n	8009c58 <_free_r+0x20>
 8009c7a:	001a      	movs	r2, r3
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <_free_r+0x4e>
 8009c82:	42a3      	cmp	r3, r4
 8009c84:	d9f9      	bls.n	8009c7a <_free_r+0x42>
 8009c86:	6811      	ldr	r1, [r2, #0]
 8009c88:	1850      	adds	r0, r2, r1
 8009c8a:	42a0      	cmp	r0, r4
 8009c8c:	d10b      	bne.n	8009ca6 <_free_r+0x6e>
 8009c8e:	6820      	ldr	r0, [r4, #0]
 8009c90:	1809      	adds	r1, r1, r0
 8009c92:	1850      	adds	r0, r2, r1
 8009c94:	6011      	str	r1, [r2, #0]
 8009c96:	4283      	cmp	r3, r0
 8009c98:	d1e0      	bne.n	8009c5c <_free_r+0x24>
 8009c9a:	6818      	ldr	r0, [r3, #0]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	1841      	adds	r1, r0, r1
 8009ca0:	6011      	str	r1, [r2, #0]
 8009ca2:	6053      	str	r3, [r2, #4]
 8009ca4:	e7da      	b.n	8009c5c <_free_r+0x24>
 8009ca6:	42a0      	cmp	r0, r4
 8009ca8:	d902      	bls.n	8009cb0 <_free_r+0x78>
 8009caa:	230c      	movs	r3, #12
 8009cac:	602b      	str	r3, [r5, #0]
 8009cae:	e7d5      	b.n	8009c5c <_free_r+0x24>
 8009cb0:	6820      	ldr	r0, [r4, #0]
 8009cb2:	1821      	adds	r1, r4, r0
 8009cb4:	428b      	cmp	r3, r1
 8009cb6:	d103      	bne.n	8009cc0 <_free_r+0x88>
 8009cb8:	6819      	ldr	r1, [r3, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	1809      	adds	r1, r1, r0
 8009cbe:	6021      	str	r1, [r4, #0]
 8009cc0:	6063      	str	r3, [r4, #4]
 8009cc2:	6054      	str	r4, [r2, #4]
 8009cc4:	e7ca      	b.n	8009c5c <_free_r+0x24>
 8009cc6:	46c0      	nop			; (mov r8, r8)
 8009cc8:	200009c4 	.word	0x200009c4

08009ccc <malloc>:
 8009ccc:	b510      	push	{r4, lr}
 8009cce:	4b03      	ldr	r3, [pc, #12]	; (8009cdc <malloc+0x10>)
 8009cd0:	0001      	movs	r1, r0
 8009cd2:	6818      	ldr	r0, [r3, #0]
 8009cd4:	f000 f826 	bl	8009d24 <_malloc_r>
 8009cd8:	bd10      	pop	{r4, pc}
 8009cda:	46c0      	nop			; (mov r8, r8)
 8009cdc:	20000080 	.word	0x20000080

08009ce0 <sbrk_aligned>:
 8009ce0:	b570      	push	{r4, r5, r6, lr}
 8009ce2:	4e0f      	ldr	r6, [pc, #60]	; (8009d20 <sbrk_aligned+0x40>)
 8009ce4:	000d      	movs	r5, r1
 8009ce6:	6831      	ldr	r1, [r6, #0]
 8009ce8:	0004      	movs	r4, r0
 8009cea:	2900      	cmp	r1, #0
 8009cec:	d102      	bne.n	8009cf4 <sbrk_aligned+0x14>
 8009cee:	f000 fe6f 	bl	800a9d0 <_sbrk_r>
 8009cf2:	6030      	str	r0, [r6, #0]
 8009cf4:	0029      	movs	r1, r5
 8009cf6:	0020      	movs	r0, r4
 8009cf8:	f000 fe6a 	bl	800a9d0 <_sbrk_r>
 8009cfc:	1c43      	adds	r3, r0, #1
 8009cfe:	d00a      	beq.n	8009d16 <sbrk_aligned+0x36>
 8009d00:	2303      	movs	r3, #3
 8009d02:	1cc5      	adds	r5, r0, #3
 8009d04:	439d      	bics	r5, r3
 8009d06:	42a8      	cmp	r0, r5
 8009d08:	d007      	beq.n	8009d1a <sbrk_aligned+0x3a>
 8009d0a:	1a29      	subs	r1, r5, r0
 8009d0c:	0020      	movs	r0, r4
 8009d0e:	f000 fe5f 	bl	800a9d0 <_sbrk_r>
 8009d12:	3001      	adds	r0, #1
 8009d14:	d101      	bne.n	8009d1a <sbrk_aligned+0x3a>
 8009d16:	2501      	movs	r5, #1
 8009d18:	426d      	negs	r5, r5
 8009d1a:	0028      	movs	r0, r5
 8009d1c:	bd70      	pop	{r4, r5, r6, pc}
 8009d1e:	46c0      	nop			; (mov r8, r8)
 8009d20:	200009c8 	.word	0x200009c8

08009d24 <_malloc_r>:
 8009d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d26:	2203      	movs	r2, #3
 8009d28:	1ccb      	adds	r3, r1, #3
 8009d2a:	4393      	bics	r3, r2
 8009d2c:	3308      	adds	r3, #8
 8009d2e:	0006      	movs	r6, r0
 8009d30:	001f      	movs	r7, r3
 8009d32:	2b0c      	cmp	r3, #12
 8009d34:	d238      	bcs.n	8009da8 <_malloc_r+0x84>
 8009d36:	270c      	movs	r7, #12
 8009d38:	42b9      	cmp	r1, r7
 8009d3a:	d837      	bhi.n	8009dac <_malloc_r+0x88>
 8009d3c:	0030      	movs	r0, r6
 8009d3e:	f000 f873 	bl	8009e28 <__malloc_lock>
 8009d42:	4b38      	ldr	r3, [pc, #224]	; (8009e24 <_malloc_r+0x100>)
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	001c      	movs	r4, r3
 8009d4a:	2c00      	cmp	r4, #0
 8009d4c:	d133      	bne.n	8009db6 <_malloc_r+0x92>
 8009d4e:	0039      	movs	r1, r7
 8009d50:	0030      	movs	r0, r6
 8009d52:	f7ff ffc5 	bl	8009ce0 <sbrk_aligned>
 8009d56:	0004      	movs	r4, r0
 8009d58:	1c43      	adds	r3, r0, #1
 8009d5a:	d15e      	bne.n	8009e1a <_malloc_r+0xf6>
 8009d5c:	9b00      	ldr	r3, [sp, #0]
 8009d5e:	681c      	ldr	r4, [r3, #0]
 8009d60:	0025      	movs	r5, r4
 8009d62:	2d00      	cmp	r5, #0
 8009d64:	d14e      	bne.n	8009e04 <_malloc_r+0xe0>
 8009d66:	2c00      	cmp	r4, #0
 8009d68:	d051      	beq.n	8009e0e <_malloc_r+0xea>
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	0029      	movs	r1, r5
 8009d6e:	18e3      	adds	r3, r4, r3
 8009d70:	0030      	movs	r0, r6
 8009d72:	9301      	str	r3, [sp, #4]
 8009d74:	f000 fe2c 	bl	800a9d0 <_sbrk_r>
 8009d78:	9b01      	ldr	r3, [sp, #4]
 8009d7a:	4283      	cmp	r3, r0
 8009d7c:	d147      	bne.n	8009e0e <_malloc_r+0xea>
 8009d7e:	6823      	ldr	r3, [r4, #0]
 8009d80:	0030      	movs	r0, r6
 8009d82:	1aff      	subs	r7, r7, r3
 8009d84:	0039      	movs	r1, r7
 8009d86:	f7ff ffab 	bl	8009ce0 <sbrk_aligned>
 8009d8a:	3001      	adds	r0, #1
 8009d8c:	d03f      	beq.n	8009e0e <_malloc_r+0xea>
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	19db      	adds	r3, r3, r7
 8009d92:	6023      	str	r3, [r4, #0]
 8009d94:	9b00      	ldr	r3, [sp, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d040      	beq.n	8009e1e <_malloc_r+0xfa>
 8009d9c:	685a      	ldr	r2, [r3, #4]
 8009d9e:	42a2      	cmp	r2, r4
 8009da0:	d133      	bne.n	8009e0a <_malloc_r+0xe6>
 8009da2:	2200      	movs	r2, #0
 8009da4:	605a      	str	r2, [r3, #4]
 8009da6:	e014      	b.n	8009dd2 <_malloc_r+0xae>
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	dac5      	bge.n	8009d38 <_malloc_r+0x14>
 8009dac:	230c      	movs	r3, #12
 8009dae:	2500      	movs	r5, #0
 8009db0:	6033      	str	r3, [r6, #0]
 8009db2:	0028      	movs	r0, r5
 8009db4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009db6:	6821      	ldr	r1, [r4, #0]
 8009db8:	1bc9      	subs	r1, r1, r7
 8009dba:	d420      	bmi.n	8009dfe <_malloc_r+0xda>
 8009dbc:	290b      	cmp	r1, #11
 8009dbe:	d918      	bls.n	8009df2 <_malloc_r+0xce>
 8009dc0:	19e2      	adds	r2, r4, r7
 8009dc2:	6027      	str	r7, [r4, #0]
 8009dc4:	42a3      	cmp	r3, r4
 8009dc6:	d112      	bne.n	8009dee <_malloc_r+0xca>
 8009dc8:	9b00      	ldr	r3, [sp, #0]
 8009dca:	601a      	str	r2, [r3, #0]
 8009dcc:	6863      	ldr	r3, [r4, #4]
 8009dce:	6011      	str	r1, [r2, #0]
 8009dd0:	6053      	str	r3, [r2, #4]
 8009dd2:	0030      	movs	r0, r6
 8009dd4:	0025      	movs	r5, r4
 8009dd6:	f000 f82f 	bl	8009e38 <__malloc_unlock>
 8009dda:	2207      	movs	r2, #7
 8009ddc:	350b      	adds	r5, #11
 8009dde:	1d23      	adds	r3, r4, #4
 8009de0:	4395      	bics	r5, r2
 8009de2:	1aea      	subs	r2, r5, r3
 8009de4:	429d      	cmp	r5, r3
 8009de6:	d0e4      	beq.n	8009db2 <_malloc_r+0x8e>
 8009de8:	1b5b      	subs	r3, r3, r5
 8009dea:	50a3      	str	r3, [r4, r2]
 8009dec:	e7e1      	b.n	8009db2 <_malloc_r+0x8e>
 8009dee:	605a      	str	r2, [r3, #4]
 8009df0:	e7ec      	b.n	8009dcc <_malloc_r+0xa8>
 8009df2:	6862      	ldr	r2, [r4, #4]
 8009df4:	42a3      	cmp	r3, r4
 8009df6:	d1d5      	bne.n	8009da4 <_malloc_r+0x80>
 8009df8:	9b00      	ldr	r3, [sp, #0]
 8009dfa:	601a      	str	r2, [r3, #0]
 8009dfc:	e7e9      	b.n	8009dd2 <_malloc_r+0xae>
 8009dfe:	0023      	movs	r3, r4
 8009e00:	6864      	ldr	r4, [r4, #4]
 8009e02:	e7a2      	b.n	8009d4a <_malloc_r+0x26>
 8009e04:	002c      	movs	r4, r5
 8009e06:	686d      	ldr	r5, [r5, #4]
 8009e08:	e7ab      	b.n	8009d62 <_malloc_r+0x3e>
 8009e0a:	0013      	movs	r3, r2
 8009e0c:	e7c4      	b.n	8009d98 <_malloc_r+0x74>
 8009e0e:	230c      	movs	r3, #12
 8009e10:	0030      	movs	r0, r6
 8009e12:	6033      	str	r3, [r6, #0]
 8009e14:	f000 f810 	bl	8009e38 <__malloc_unlock>
 8009e18:	e7cb      	b.n	8009db2 <_malloc_r+0x8e>
 8009e1a:	6027      	str	r7, [r4, #0]
 8009e1c:	e7d9      	b.n	8009dd2 <_malloc_r+0xae>
 8009e1e:	605b      	str	r3, [r3, #4]
 8009e20:	deff      	udf	#255	; 0xff
 8009e22:	46c0      	nop			; (mov r8, r8)
 8009e24:	200009c4 	.word	0x200009c4

08009e28 <__malloc_lock>:
 8009e28:	b510      	push	{r4, lr}
 8009e2a:	4802      	ldr	r0, [pc, #8]	; (8009e34 <__malloc_lock+0xc>)
 8009e2c:	f7ff f859 	bl	8008ee2 <__retarget_lock_acquire_recursive>
 8009e30:	bd10      	pop	{r4, pc}
 8009e32:	46c0      	nop			; (mov r8, r8)
 8009e34:	200009c0 	.word	0x200009c0

08009e38 <__malloc_unlock>:
 8009e38:	b510      	push	{r4, lr}
 8009e3a:	4802      	ldr	r0, [pc, #8]	; (8009e44 <__malloc_unlock+0xc>)
 8009e3c:	f7ff f852 	bl	8008ee4 <__retarget_lock_release_recursive>
 8009e40:	bd10      	pop	{r4, pc}
 8009e42:	46c0      	nop			; (mov r8, r8)
 8009e44:	200009c0 	.word	0x200009c0

08009e48 <_Balloc>:
 8009e48:	b570      	push	{r4, r5, r6, lr}
 8009e4a:	69c5      	ldr	r5, [r0, #28]
 8009e4c:	0006      	movs	r6, r0
 8009e4e:	000c      	movs	r4, r1
 8009e50:	2d00      	cmp	r5, #0
 8009e52:	d10e      	bne.n	8009e72 <_Balloc+0x2a>
 8009e54:	2010      	movs	r0, #16
 8009e56:	f7ff ff39 	bl	8009ccc <malloc>
 8009e5a:	1e02      	subs	r2, r0, #0
 8009e5c:	61f0      	str	r0, [r6, #28]
 8009e5e:	d104      	bne.n	8009e6a <_Balloc+0x22>
 8009e60:	216b      	movs	r1, #107	; 0x6b
 8009e62:	4b19      	ldr	r3, [pc, #100]	; (8009ec8 <_Balloc+0x80>)
 8009e64:	4819      	ldr	r0, [pc, #100]	; (8009ecc <_Balloc+0x84>)
 8009e66:	f000 fdcf 	bl	800aa08 <__assert_func>
 8009e6a:	6045      	str	r5, [r0, #4]
 8009e6c:	6085      	str	r5, [r0, #8]
 8009e6e:	6005      	str	r5, [r0, #0]
 8009e70:	60c5      	str	r5, [r0, #12]
 8009e72:	69f5      	ldr	r5, [r6, #28]
 8009e74:	68eb      	ldr	r3, [r5, #12]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d013      	beq.n	8009ea2 <_Balloc+0x5a>
 8009e7a:	69f3      	ldr	r3, [r6, #28]
 8009e7c:	00a2      	lsls	r2, r4, #2
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	189b      	adds	r3, r3, r2
 8009e82:	6818      	ldr	r0, [r3, #0]
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d118      	bne.n	8009eba <_Balloc+0x72>
 8009e88:	2101      	movs	r1, #1
 8009e8a:	000d      	movs	r5, r1
 8009e8c:	40a5      	lsls	r5, r4
 8009e8e:	1d6a      	adds	r2, r5, #5
 8009e90:	0030      	movs	r0, r6
 8009e92:	0092      	lsls	r2, r2, #2
 8009e94:	f000 fdd6 	bl	800aa44 <_calloc_r>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d00c      	beq.n	8009eb6 <_Balloc+0x6e>
 8009e9c:	6044      	str	r4, [r0, #4]
 8009e9e:	6085      	str	r5, [r0, #8]
 8009ea0:	e00d      	b.n	8009ebe <_Balloc+0x76>
 8009ea2:	2221      	movs	r2, #33	; 0x21
 8009ea4:	2104      	movs	r1, #4
 8009ea6:	0030      	movs	r0, r6
 8009ea8:	f000 fdcc 	bl	800aa44 <_calloc_r>
 8009eac:	69f3      	ldr	r3, [r6, #28]
 8009eae:	60e8      	str	r0, [r5, #12]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1e1      	bne.n	8009e7a <_Balloc+0x32>
 8009eb6:	2000      	movs	r0, #0
 8009eb8:	bd70      	pop	{r4, r5, r6, pc}
 8009eba:	6802      	ldr	r2, [r0, #0]
 8009ebc:	601a      	str	r2, [r3, #0]
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	6103      	str	r3, [r0, #16]
 8009ec2:	60c3      	str	r3, [r0, #12]
 8009ec4:	e7f8      	b.n	8009eb8 <_Balloc+0x70>
 8009ec6:	46c0      	nop			; (mov r8, r8)
 8009ec8:	0800d3a9 	.word	0x0800d3a9
 8009ecc:	0800d429 	.word	0x0800d429

08009ed0 <_Bfree>:
 8009ed0:	b570      	push	{r4, r5, r6, lr}
 8009ed2:	69c6      	ldr	r6, [r0, #28]
 8009ed4:	0005      	movs	r5, r0
 8009ed6:	000c      	movs	r4, r1
 8009ed8:	2e00      	cmp	r6, #0
 8009eda:	d10e      	bne.n	8009efa <_Bfree+0x2a>
 8009edc:	2010      	movs	r0, #16
 8009ede:	f7ff fef5 	bl	8009ccc <malloc>
 8009ee2:	1e02      	subs	r2, r0, #0
 8009ee4:	61e8      	str	r0, [r5, #28]
 8009ee6:	d104      	bne.n	8009ef2 <_Bfree+0x22>
 8009ee8:	218f      	movs	r1, #143	; 0x8f
 8009eea:	4b09      	ldr	r3, [pc, #36]	; (8009f10 <_Bfree+0x40>)
 8009eec:	4809      	ldr	r0, [pc, #36]	; (8009f14 <_Bfree+0x44>)
 8009eee:	f000 fd8b 	bl	800aa08 <__assert_func>
 8009ef2:	6046      	str	r6, [r0, #4]
 8009ef4:	6086      	str	r6, [r0, #8]
 8009ef6:	6006      	str	r6, [r0, #0]
 8009ef8:	60c6      	str	r6, [r0, #12]
 8009efa:	2c00      	cmp	r4, #0
 8009efc:	d007      	beq.n	8009f0e <_Bfree+0x3e>
 8009efe:	69eb      	ldr	r3, [r5, #28]
 8009f00:	6862      	ldr	r2, [r4, #4]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	0092      	lsls	r2, r2, #2
 8009f06:	189b      	adds	r3, r3, r2
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	6022      	str	r2, [r4, #0]
 8009f0c:	601c      	str	r4, [r3, #0]
 8009f0e:	bd70      	pop	{r4, r5, r6, pc}
 8009f10:	0800d3a9 	.word	0x0800d3a9
 8009f14:	0800d429 	.word	0x0800d429

08009f18 <__multadd>:
 8009f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f1a:	000e      	movs	r6, r1
 8009f1c:	9001      	str	r0, [sp, #4]
 8009f1e:	000c      	movs	r4, r1
 8009f20:	001d      	movs	r5, r3
 8009f22:	2000      	movs	r0, #0
 8009f24:	690f      	ldr	r7, [r1, #16]
 8009f26:	3614      	adds	r6, #20
 8009f28:	6833      	ldr	r3, [r6, #0]
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	b299      	uxth	r1, r3
 8009f2e:	4351      	muls	r1, r2
 8009f30:	0c1b      	lsrs	r3, r3, #16
 8009f32:	4353      	muls	r3, r2
 8009f34:	1949      	adds	r1, r1, r5
 8009f36:	0c0d      	lsrs	r5, r1, #16
 8009f38:	195b      	adds	r3, r3, r5
 8009f3a:	0c1d      	lsrs	r5, r3, #16
 8009f3c:	b289      	uxth	r1, r1
 8009f3e:	041b      	lsls	r3, r3, #16
 8009f40:	185b      	adds	r3, r3, r1
 8009f42:	c608      	stmia	r6!, {r3}
 8009f44:	4287      	cmp	r7, r0
 8009f46:	dcef      	bgt.n	8009f28 <__multadd+0x10>
 8009f48:	2d00      	cmp	r5, #0
 8009f4a:	d022      	beq.n	8009f92 <__multadd+0x7a>
 8009f4c:	68a3      	ldr	r3, [r4, #8]
 8009f4e:	42bb      	cmp	r3, r7
 8009f50:	dc19      	bgt.n	8009f86 <__multadd+0x6e>
 8009f52:	6861      	ldr	r1, [r4, #4]
 8009f54:	9801      	ldr	r0, [sp, #4]
 8009f56:	3101      	adds	r1, #1
 8009f58:	f7ff ff76 	bl	8009e48 <_Balloc>
 8009f5c:	1e06      	subs	r6, r0, #0
 8009f5e:	d105      	bne.n	8009f6c <__multadd+0x54>
 8009f60:	0032      	movs	r2, r6
 8009f62:	21ba      	movs	r1, #186	; 0xba
 8009f64:	4b0c      	ldr	r3, [pc, #48]	; (8009f98 <__multadd+0x80>)
 8009f66:	480d      	ldr	r0, [pc, #52]	; (8009f9c <__multadd+0x84>)
 8009f68:	f000 fd4e 	bl	800aa08 <__assert_func>
 8009f6c:	0021      	movs	r1, r4
 8009f6e:	6922      	ldr	r2, [r4, #16]
 8009f70:	310c      	adds	r1, #12
 8009f72:	3202      	adds	r2, #2
 8009f74:	0092      	lsls	r2, r2, #2
 8009f76:	300c      	adds	r0, #12
 8009f78:	f000 fd3c 	bl	800a9f4 <memcpy>
 8009f7c:	0021      	movs	r1, r4
 8009f7e:	9801      	ldr	r0, [sp, #4]
 8009f80:	f7ff ffa6 	bl	8009ed0 <_Bfree>
 8009f84:	0034      	movs	r4, r6
 8009f86:	1d3b      	adds	r3, r7, #4
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	18e3      	adds	r3, r4, r3
 8009f8c:	605d      	str	r5, [r3, #4]
 8009f8e:	1c7b      	adds	r3, r7, #1
 8009f90:	6123      	str	r3, [r4, #16]
 8009f92:	0020      	movs	r0, r4
 8009f94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f96:	46c0      	nop			; (mov r8, r8)
 8009f98:	0800d418 	.word	0x0800d418
 8009f9c:	0800d429 	.word	0x0800d429

08009fa0 <__hi0bits>:
 8009fa0:	0003      	movs	r3, r0
 8009fa2:	0c02      	lsrs	r2, r0, #16
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	4282      	cmp	r2, r0
 8009fa8:	d101      	bne.n	8009fae <__hi0bits+0xe>
 8009faa:	041b      	lsls	r3, r3, #16
 8009fac:	3010      	adds	r0, #16
 8009fae:	0e1a      	lsrs	r2, r3, #24
 8009fb0:	d101      	bne.n	8009fb6 <__hi0bits+0x16>
 8009fb2:	3008      	adds	r0, #8
 8009fb4:	021b      	lsls	r3, r3, #8
 8009fb6:	0f1a      	lsrs	r2, r3, #28
 8009fb8:	d101      	bne.n	8009fbe <__hi0bits+0x1e>
 8009fba:	3004      	adds	r0, #4
 8009fbc:	011b      	lsls	r3, r3, #4
 8009fbe:	0f9a      	lsrs	r2, r3, #30
 8009fc0:	d101      	bne.n	8009fc6 <__hi0bits+0x26>
 8009fc2:	3002      	adds	r0, #2
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	db03      	blt.n	8009fd2 <__hi0bits+0x32>
 8009fca:	3001      	adds	r0, #1
 8009fcc:	005b      	lsls	r3, r3, #1
 8009fce:	d400      	bmi.n	8009fd2 <__hi0bits+0x32>
 8009fd0:	2020      	movs	r0, #32
 8009fd2:	4770      	bx	lr

08009fd4 <__lo0bits>:
 8009fd4:	6803      	ldr	r3, [r0, #0]
 8009fd6:	0001      	movs	r1, r0
 8009fd8:	2207      	movs	r2, #7
 8009fda:	0018      	movs	r0, r3
 8009fdc:	4010      	ands	r0, r2
 8009fde:	4213      	tst	r3, r2
 8009fe0:	d00d      	beq.n	8009ffe <__lo0bits+0x2a>
 8009fe2:	3a06      	subs	r2, #6
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	4213      	tst	r3, r2
 8009fe8:	d105      	bne.n	8009ff6 <__lo0bits+0x22>
 8009fea:	3002      	adds	r0, #2
 8009fec:	4203      	tst	r3, r0
 8009fee:	d003      	beq.n	8009ff8 <__lo0bits+0x24>
 8009ff0:	40d3      	lsrs	r3, r2
 8009ff2:	0010      	movs	r0, r2
 8009ff4:	600b      	str	r3, [r1, #0]
 8009ff6:	4770      	bx	lr
 8009ff8:	089b      	lsrs	r3, r3, #2
 8009ffa:	600b      	str	r3, [r1, #0]
 8009ffc:	e7fb      	b.n	8009ff6 <__lo0bits+0x22>
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	2a00      	cmp	r2, #0
 800a002:	d101      	bne.n	800a008 <__lo0bits+0x34>
 800a004:	2010      	movs	r0, #16
 800a006:	0c1b      	lsrs	r3, r3, #16
 800a008:	b2da      	uxtb	r2, r3
 800a00a:	2a00      	cmp	r2, #0
 800a00c:	d101      	bne.n	800a012 <__lo0bits+0x3e>
 800a00e:	3008      	adds	r0, #8
 800a010:	0a1b      	lsrs	r3, r3, #8
 800a012:	071a      	lsls	r2, r3, #28
 800a014:	d101      	bne.n	800a01a <__lo0bits+0x46>
 800a016:	3004      	adds	r0, #4
 800a018:	091b      	lsrs	r3, r3, #4
 800a01a:	079a      	lsls	r2, r3, #30
 800a01c:	d101      	bne.n	800a022 <__lo0bits+0x4e>
 800a01e:	3002      	adds	r0, #2
 800a020:	089b      	lsrs	r3, r3, #2
 800a022:	07da      	lsls	r2, r3, #31
 800a024:	d4e9      	bmi.n	8009ffa <__lo0bits+0x26>
 800a026:	3001      	adds	r0, #1
 800a028:	085b      	lsrs	r3, r3, #1
 800a02a:	d1e6      	bne.n	8009ffa <__lo0bits+0x26>
 800a02c:	2020      	movs	r0, #32
 800a02e:	e7e2      	b.n	8009ff6 <__lo0bits+0x22>

0800a030 <__i2b>:
 800a030:	b510      	push	{r4, lr}
 800a032:	000c      	movs	r4, r1
 800a034:	2101      	movs	r1, #1
 800a036:	f7ff ff07 	bl	8009e48 <_Balloc>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d107      	bne.n	800a04e <__i2b+0x1e>
 800a03e:	2146      	movs	r1, #70	; 0x46
 800a040:	4c05      	ldr	r4, [pc, #20]	; (800a058 <__i2b+0x28>)
 800a042:	0002      	movs	r2, r0
 800a044:	4b05      	ldr	r3, [pc, #20]	; (800a05c <__i2b+0x2c>)
 800a046:	0020      	movs	r0, r4
 800a048:	31ff      	adds	r1, #255	; 0xff
 800a04a:	f000 fcdd 	bl	800aa08 <__assert_func>
 800a04e:	2301      	movs	r3, #1
 800a050:	6144      	str	r4, [r0, #20]
 800a052:	6103      	str	r3, [r0, #16]
 800a054:	bd10      	pop	{r4, pc}
 800a056:	46c0      	nop			; (mov r8, r8)
 800a058:	0800d429 	.word	0x0800d429
 800a05c:	0800d418 	.word	0x0800d418

0800a060 <__multiply>:
 800a060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a062:	0015      	movs	r5, r2
 800a064:	690a      	ldr	r2, [r1, #16]
 800a066:	692b      	ldr	r3, [r5, #16]
 800a068:	000c      	movs	r4, r1
 800a06a:	b08b      	sub	sp, #44	; 0x2c
 800a06c:	429a      	cmp	r2, r3
 800a06e:	da01      	bge.n	800a074 <__multiply+0x14>
 800a070:	002c      	movs	r4, r5
 800a072:	000d      	movs	r5, r1
 800a074:	6927      	ldr	r7, [r4, #16]
 800a076:	692e      	ldr	r6, [r5, #16]
 800a078:	6861      	ldr	r1, [r4, #4]
 800a07a:	19bb      	adds	r3, r7, r6
 800a07c:	9303      	str	r3, [sp, #12]
 800a07e:	68a3      	ldr	r3, [r4, #8]
 800a080:	19ba      	adds	r2, r7, r6
 800a082:	4293      	cmp	r3, r2
 800a084:	da00      	bge.n	800a088 <__multiply+0x28>
 800a086:	3101      	adds	r1, #1
 800a088:	f7ff fede 	bl	8009e48 <_Balloc>
 800a08c:	9002      	str	r0, [sp, #8]
 800a08e:	2800      	cmp	r0, #0
 800a090:	d106      	bne.n	800a0a0 <__multiply+0x40>
 800a092:	21b1      	movs	r1, #177	; 0xb1
 800a094:	4b48      	ldr	r3, [pc, #288]	; (800a1b8 <__multiply+0x158>)
 800a096:	4849      	ldr	r0, [pc, #292]	; (800a1bc <__multiply+0x15c>)
 800a098:	9a02      	ldr	r2, [sp, #8]
 800a09a:	0049      	lsls	r1, r1, #1
 800a09c:	f000 fcb4 	bl	800aa08 <__assert_func>
 800a0a0:	9b02      	ldr	r3, [sp, #8]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	3314      	adds	r3, #20
 800a0a6:	469c      	mov	ip, r3
 800a0a8:	19bb      	adds	r3, r7, r6
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	4463      	add	r3, ip
 800a0ae:	9304      	str	r3, [sp, #16]
 800a0b0:	4663      	mov	r3, ip
 800a0b2:	9904      	ldr	r1, [sp, #16]
 800a0b4:	428b      	cmp	r3, r1
 800a0b6:	d32a      	bcc.n	800a10e <__multiply+0xae>
 800a0b8:	0023      	movs	r3, r4
 800a0ba:	00bf      	lsls	r7, r7, #2
 800a0bc:	3314      	adds	r3, #20
 800a0be:	3514      	adds	r5, #20
 800a0c0:	9308      	str	r3, [sp, #32]
 800a0c2:	00b6      	lsls	r6, r6, #2
 800a0c4:	19db      	adds	r3, r3, r7
 800a0c6:	9305      	str	r3, [sp, #20]
 800a0c8:	19ab      	adds	r3, r5, r6
 800a0ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a0cc:	2304      	movs	r3, #4
 800a0ce:	9306      	str	r3, [sp, #24]
 800a0d0:	0023      	movs	r3, r4
 800a0d2:	9a05      	ldr	r2, [sp, #20]
 800a0d4:	3315      	adds	r3, #21
 800a0d6:	9501      	str	r5, [sp, #4]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d305      	bcc.n	800a0e8 <__multiply+0x88>
 800a0dc:	1b13      	subs	r3, r2, r4
 800a0de:	3b15      	subs	r3, #21
 800a0e0:	089b      	lsrs	r3, r3, #2
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	9306      	str	r3, [sp, #24]
 800a0e8:	9b01      	ldr	r3, [sp, #4]
 800a0ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d310      	bcc.n	800a112 <__multiply+0xb2>
 800a0f0:	9b03      	ldr	r3, [sp, #12]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	dd05      	ble.n	800a102 <__multiply+0xa2>
 800a0f6:	9b04      	ldr	r3, [sp, #16]
 800a0f8:	3b04      	subs	r3, #4
 800a0fa:	9304      	str	r3, [sp, #16]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d056      	beq.n	800a1b0 <__multiply+0x150>
 800a102:	9b02      	ldr	r3, [sp, #8]
 800a104:	9a03      	ldr	r2, [sp, #12]
 800a106:	0018      	movs	r0, r3
 800a108:	611a      	str	r2, [r3, #16]
 800a10a:	b00b      	add	sp, #44	; 0x2c
 800a10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a10e:	c304      	stmia	r3!, {r2}
 800a110:	e7cf      	b.n	800a0b2 <__multiply+0x52>
 800a112:	9b01      	ldr	r3, [sp, #4]
 800a114:	6818      	ldr	r0, [r3, #0]
 800a116:	b280      	uxth	r0, r0
 800a118:	2800      	cmp	r0, #0
 800a11a:	d01e      	beq.n	800a15a <__multiply+0xfa>
 800a11c:	4667      	mov	r7, ip
 800a11e:	2500      	movs	r5, #0
 800a120:	9e08      	ldr	r6, [sp, #32]
 800a122:	ce02      	ldmia	r6!, {r1}
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	9307      	str	r3, [sp, #28]
 800a128:	b28b      	uxth	r3, r1
 800a12a:	4343      	muls	r3, r0
 800a12c:	001a      	movs	r2, r3
 800a12e:	466b      	mov	r3, sp
 800a130:	8b9b      	ldrh	r3, [r3, #28]
 800a132:	18d3      	adds	r3, r2, r3
 800a134:	195b      	adds	r3, r3, r5
 800a136:	0c0d      	lsrs	r5, r1, #16
 800a138:	4345      	muls	r5, r0
 800a13a:	9a07      	ldr	r2, [sp, #28]
 800a13c:	0c11      	lsrs	r1, r2, #16
 800a13e:	1869      	adds	r1, r5, r1
 800a140:	0c1a      	lsrs	r2, r3, #16
 800a142:	188a      	adds	r2, r1, r2
 800a144:	b29b      	uxth	r3, r3
 800a146:	0c15      	lsrs	r5, r2, #16
 800a148:	0412      	lsls	r2, r2, #16
 800a14a:	431a      	orrs	r2, r3
 800a14c:	9b05      	ldr	r3, [sp, #20]
 800a14e:	c704      	stmia	r7!, {r2}
 800a150:	42b3      	cmp	r3, r6
 800a152:	d8e6      	bhi.n	800a122 <__multiply+0xc2>
 800a154:	4663      	mov	r3, ip
 800a156:	9a06      	ldr	r2, [sp, #24]
 800a158:	509d      	str	r5, [r3, r2]
 800a15a:	9b01      	ldr	r3, [sp, #4]
 800a15c:	6818      	ldr	r0, [r3, #0]
 800a15e:	0c00      	lsrs	r0, r0, #16
 800a160:	d020      	beq.n	800a1a4 <__multiply+0x144>
 800a162:	4663      	mov	r3, ip
 800a164:	0025      	movs	r5, r4
 800a166:	4661      	mov	r1, ip
 800a168:	2700      	movs	r7, #0
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	3514      	adds	r5, #20
 800a16e:	682a      	ldr	r2, [r5, #0]
 800a170:	680e      	ldr	r6, [r1, #0]
 800a172:	b292      	uxth	r2, r2
 800a174:	4342      	muls	r2, r0
 800a176:	0c36      	lsrs	r6, r6, #16
 800a178:	1992      	adds	r2, r2, r6
 800a17a:	19d2      	adds	r2, r2, r7
 800a17c:	0416      	lsls	r6, r2, #16
 800a17e:	b29b      	uxth	r3, r3
 800a180:	431e      	orrs	r6, r3
 800a182:	600e      	str	r6, [r1, #0]
 800a184:	cd40      	ldmia	r5!, {r6}
 800a186:	684b      	ldr	r3, [r1, #4]
 800a188:	0c36      	lsrs	r6, r6, #16
 800a18a:	4346      	muls	r6, r0
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	0c12      	lsrs	r2, r2, #16
 800a190:	18f3      	adds	r3, r6, r3
 800a192:	189b      	adds	r3, r3, r2
 800a194:	9a05      	ldr	r2, [sp, #20]
 800a196:	0c1f      	lsrs	r7, r3, #16
 800a198:	3104      	adds	r1, #4
 800a19a:	42aa      	cmp	r2, r5
 800a19c:	d8e7      	bhi.n	800a16e <__multiply+0x10e>
 800a19e:	4662      	mov	r2, ip
 800a1a0:	9906      	ldr	r1, [sp, #24]
 800a1a2:	5053      	str	r3, [r2, r1]
 800a1a4:	9b01      	ldr	r3, [sp, #4]
 800a1a6:	3304      	adds	r3, #4
 800a1a8:	9301      	str	r3, [sp, #4]
 800a1aa:	2304      	movs	r3, #4
 800a1ac:	449c      	add	ip, r3
 800a1ae:	e79b      	b.n	800a0e8 <__multiply+0x88>
 800a1b0:	9b03      	ldr	r3, [sp, #12]
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	9303      	str	r3, [sp, #12]
 800a1b6:	e79b      	b.n	800a0f0 <__multiply+0x90>
 800a1b8:	0800d418 	.word	0x0800d418
 800a1bc:	0800d429 	.word	0x0800d429

0800a1c0 <__pow5mult>:
 800a1c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	0015      	movs	r5, r2
 800a1c6:	0007      	movs	r7, r0
 800a1c8:	000e      	movs	r6, r1
 800a1ca:	401a      	ands	r2, r3
 800a1cc:	421d      	tst	r5, r3
 800a1ce:	d008      	beq.n	800a1e2 <__pow5mult+0x22>
 800a1d0:	4925      	ldr	r1, [pc, #148]	; (800a268 <__pow5mult+0xa8>)
 800a1d2:	3a01      	subs	r2, #1
 800a1d4:	0092      	lsls	r2, r2, #2
 800a1d6:	5852      	ldr	r2, [r2, r1]
 800a1d8:	2300      	movs	r3, #0
 800a1da:	0031      	movs	r1, r6
 800a1dc:	f7ff fe9c 	bl	8009f18 <__multadd>
 800a1e0:	0006      	movs	r6, r0
 800a1e2:	10ad      	asrs	r5, r5, #2
 800a1e4:	d03d      	beq.n	800a262 <__pow5mult+0xa2>
 800a1e6:	69fc      	ldr	r4, [r7, #28]
 800a1e8:	2c00      	cmp	r4, #0
 800a1ea:	d10f      	bne.n	800a20c <__pow5mult+0x4c>
 800a1ec:	2010      	movs	r0, #16
 800a1ee:	f7ff fd6d 	bl	8009ccc <malloc>
 800a1f2:	1e02      	subs	r2, r0, #0
 800a1f4:	61f8      	str	r0, [r7, #28]
 800a1f6:	d105      	bne.n	800a204 <__pow5mult+0x44>
 800a1f8:	21b4      	movs	r1, #180	; 0xb4
 800a1fa:	4b1c      	ldr	r3, [pc, #112]	; (800a26c <__pow5mult+0xac>)
 800a1fc:	481c      	ldr	r0, [pc, #112]	; (800a270 <__pow5mult+0xb0>)
 800a1fe:	31ff      	adds	r1, #255	; 0xff
 800a200:	f000 fc02 	bl	800aa08 <__assert_func>
 800a204:	6044      	str	r4, [r0, #4]
 800a206:	6084      	str	r4, [r0, #8]
 800a208:	6004      	str	r4, [r0, #0]
 800a20a:	60c4      	str	r4, [r0, #12]
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	689c      	ldr	r4, [r3, #8]
 800a210:	9301      	str	r3, [sp, #4]
 800a212:	2c00      	cmp	r4, #0
 800a214:	d108      	bne.n	800a228 <__pow5mult+0x68>
 800a216:	0038      	movs	r0, r7
 800a218:	4916      	ldr	r1, [pc, #88]	; (800a274 <__pow5mult+0xb4>)
 800a21a:	f7ff ff09 	bl	800a030 <__i2b>
 800a21e:	9b01      	ldr	r3, [sp, #4]
 800a220:	0004      	movs	r4, r0
 800a222:	6098      	str	r0, [r3, #8]
 800a224:	2300      	movs	r3, #0
 800a226:	6003      	str	r3, [r0, #0]
 800a228:	2301      	movs	r3, #1
 800a22a:	421d      	tst	r5, r3
 800a22c:	d00a      	beq.n	800a244 <__pow5mult+0x84>
 800a22e:	0031      	movs	r1, r6
 800a230:	0022      	movs	r2, r4
 800a232:	0038      	movs	r0, r7
 800a234:	f7ff ff14 	bl	800a060 <__multiply>
 800a238:	0031      	movs	r1, r6
 800a23a:	9001      	str	r0, [sp, #4]
 800a23c:	0038      	movs	r0, r7
 800a23e:	f7ff fe47 	bl	8009ed0 <_Bfree>
 800a242:	9e01      	ldr	r6, [sp, #4]
 800a244:	106d      	asrs	r5, r5, #1
 800a246:	d00c      	beq.n	800a262 <__pow5mult+0xa2>
 800a248:	6820      	ldr	r0, [r4, #0]
 800a24a:	2800      	cmp	r0, #0
 800a24c:	d107      	bne.n	800a25e <__pow5mult+0x9e>
 800a24e:	0022      	movs	r2, r4
 800a250:	0021      	movs	r1, r4
 800a252:	0038      	movs	r0, r7
 800a254:	f7ff ff04 	bl	800a060 <__multiply>
 800a258:	2300      	movs	r3, #0
 800a25a:	6020      	str	r0, [r4, #0]
 800a25c:	6003      	str	r3, [r0, #0]
 800a25e:	0004      	movs	r4, r0
 800a260:	e7e2      	b.n	800a228 <__pow5mult+0x68>
 800a262:	0030      	movs	r0, r6
 800a264:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a266:	46c0      	nop			; (mov r8, r8)
 800a268:	0800d578 	.word	0x0800d578
 800a26c:	0800d3a9 	.word	0x0800d3a9
 800a270:	0800d429 	.word	0x0800d429
 800a274:	00000271 	.word	0x00000271

0800a278 <__lshift>:
 800a278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a27a:	000c      	movs	r4, r1
 800a27c:	0017      	movs	r7, r2
 800a27e:	6923      	ldr	r3, [r4, #16]
 800a280:	1155      	asrs	r5, r2, #5
 800a282:	b087      	sub	sp, #28
 800a284:	18eb      	adds	r3, r5, r3
 800a286:	9302      	str	r3, [sp, #8]
 800a288:	3301      	adds	r3, #1
 800a28a:	9301      	str	r3, [sp, #4]
 800a28c:	6849      	ldr	r1, [r1, #4]
 800a28e:	68a3      	ldr	r3, [r4, #8]
 800a290:	9004      	str	r0, [sp, #16]
 800a292:	9a01      	ldr	r2, [sp, #4]
 800a294:	4293      	cmp	r3, r2
 800a296:	db10      	blt.n	800a2ba <__lshift+0x42>
 800a298:	9804      	ldr	r0, [sp, #16]
 800a29a:	f7ff fdd5 	bl	8009e48 <_Balloc>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	0002      	movs	r2, r0
 800a2a2:	0006      	movs	r6, r0
 800a2a4:	0019      	movs	r1, r3
 800a2a6:	3214      	adds	r2, #20
 800a2a8:	4298      	cmp	r0, r3
 800a2aa:	d10c      	bne.n	800a2c6 <__lshift+0x4e>
 800a2ac:	31df      	adds	r1, #223	; 0xdf
 800a2ae:	0032      	movs	r2, r6
 800a2b0:	4b26      	ldr	r3, [pc, #152]	; (800a34c <__lshift+0xd4>)
 800a2b2:	4827      	ldr	r0, [pc, #156]	; (800a350 <__lshift+0xd8>)
 800a2b4:	31ff      	adds	r1, #255	; 0xff
 800a2b6:	f000 fba7 	bl	800aa08 <__assert_func>
 800a2ba:	3101      	adds	r1, #1
 800a2bc:	005b      	lsls	r3, r3, #1
 800a2be:	e7e8      	b.n	800a292 <__lshift+0x1a>
 800a2c0:	0098      	lsls	r0, r3, #2
 800a2c2:	5011      	str	r1, [r2, r0]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	42ab      	cmp	r3, r5
 800a2c8:	dbfa      	blt.n	800a2c0 <__lshift+0x48>
 800a2ca:	43eb      	mvns	r3, r5
 800a2cc:	17db      	asrs	r3, r3, #31
 800a2ce:	401d      	ands	r5, r3
 800a2d0:	211f      	movs	r1, #31
 800a2d2:	0023      	movs	r3, r4
 800a2d4:	0038      	movs	r0, r7
 800a2d6:	00ad      	lsls	r5, r5, #2
 800a2d8:	1955      	adds	r5, r2, r5
 800a2da:	6922      	ldr	r2, [r4, #16]
 800a2dc:	3314      	adds	r3, #20
 800a2de:	0092      	lsls	r2, r2, #2
 800a2e0:	4008      	ands	r0, r1
 800a2e2:	4684      	mov	ip, r0
 800a2e4:	189a      	adds	r2, r3, r2
 800a2e6:	420f      	tst	r7, r1
 800a2e8:	d02a      	beq.n	800a340 <__lshift+0xc8>
 800a2ea:	3101      	adds	r1, #1
 800a2ec:	1a09      	subs	r1, r1, r0
 800a2ee:	9105      	str	r1, [sp, #20]
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	9503      	str	r5, [sp, #12]
 800a2f4:	4667      	mov	r7, ip
 800a2f6:	6818      	ldr	r0, [r3, #0]
 800a2f8:	40b8      	lsls	r0, r7
 800a2fa:	4308      	orrs	r0, r1
 800a2fc:	9903      	ldr	r1, [sp, #12]
 800a2fe:	c101      	stmia	r1!, {r0}
 800a300:	9103      	str	r1, [sp, #12]
 800a302:	9805      	ldr	r0, [sp, #20]
 800a304:	cb02      	ldmia	r3!, {r1}
 800a306:	40c1      	lsrs	r1, r0
 800a308:	429a      	cmp	r2, r3
 800a30a:	d8f3      	bhi.n	800a2f4 <__lshift+0x7c>
 800a30c:	0020      	movs	r0, r4
 800a30e:	3015      	adds	r0, #21
 800a310:	2304      	movs	r3, #4
 800a312:	4282      	cmp	r2, r0
 800a314:	d304      	bcc.n	800a320 <__lshift+0xa8>
 800a316:	1b13      	subs	r3, r2, r4
 800a318:	3b15      	subs	r3, #21
 800a31a:	089b      	lsrs	r3, r3, #2
 800a31c:	3301      	adds	r3, #1
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	50e9      	str	r1, [r5, r3]
 800a322:	2900      	cmp	r1, #0
 800a324:	d002      	beq.n	800a32c <__lshift+0xb4>
 800a326:	9b02      	ldr	r3, [sp, #8]
 800a328:	3302      	adds	r3, #2
 800a32a:	9301      	str	r3, [sp, #4]
 800a32c:	9b01      	ldr	r3, [sp, #4]
 800a32e:	9804      	ldr	r0, [sp, #16]
 800a330:	3b01      	subs	r3, #1
 800a332:	0021      	movs	r1, r4
 800a334:	6133      	str	r3, [r6, #16]
 800a336:	f7ff fdcb 	bl	8009ed0 <_Bfree>
 800a33a:	0030      	movs	r0, r6
 800a33c:	b007      	add	sp, #28
 800a33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a340:	cb02      	ldmia	r3!, {r1}
 800a342:	c502      	stmia	r5!, {r1}
 800a344:	429a      	cmp	r2, r3
 800a346:	d8fb      	bhi.n	800a340 <__lshift+0xc8>
 800a348:	e7f0      	b.n	800a32c <__lshift+0xb4>
 800a34a:	46c0      	nop			; (mov r8, r8)
 800a34c:	0800d418 	.word	0x0800d418
 800a350:	0800d429 	.word	0x0800d429

0800a354 <__mcmp>:
 800a354:	b530      	push	{r4, r5, lr}
 800a356:	690b      	ldr	r3, [r1, #16]
 800a358:	6904      	ldr	r4, [r0, #16]
 800a35a:	0002      	movs	r2, r0
 800a35c:	1ae0      	subs	r0, r4, r3
 800a35e:	429c      	cmp	r4, r3
 800a360:	d10e      	bne.n	800a380 <__mcmp+0x2c>
 800a362:	3214      	adds	r2, #20
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	3114      	adds	r1, #20
 800a368:	0014      	movs	r4, r2
 800a36a:	18c9      	adds	r1, r1, r3
 800a36c:	18d2      	adds	r2, r2, r3
 800a36e:	3a04      	subs	r2, #4
 800a370:	3904      	subs	r1, #4
 800a372:	6815      	ldr	r5, [r2, #0]
 800a374:	680b      	ldr	r3, [r1, #0]
 800a376:	429d      	cmp	r5, r3
 800a378:	d003      	beq.n	800a382 <__mcmp+0x2e>
 800a37a:	2001      	movs	r0, #1
 800a37c:	429d      	cmp	r5, r3
 800a37e:	d303      	bcc.n	800a388 <__mcmp+0x34>
 800a380:	bd30      	pop	{r4, r5, pc}
 800a382:	4294      	cmp	r4, r2
 800a384:	d3f3      	bcc.n	800a36e <__mcmp+0x1a>
 800a386:	e7fb      	b.n	800a380 <__mcmp+0x2c>
 800a388:	4240      	negs	r0, r0
 800a38a:	e7f9      	b.n	800a380 <__mcmp+0x2c>

0800a38c <__mdiff>:
 800a38c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a38e:	000e      	movs	r6, r1
 800a390:	0007      	movs	r7, r0
 800a392:	0011      	movs	r1, r2
 800a394:	0030      	movs	r0, r6
 800a396:	b087      	sub	sp, #28
 800a398:	0014      	movs	r4, r2
 800a39a:	f7ff ffdb 	bl	800a354 <__mcmp>
 800a39e:	1e05      	subs	r5, r0, #0
 800a3a0:	d110      	bne.n	800a3c4 <__mdiff+0x38>
 800a3a2:	0001      	movs	r1, r0
 800a3a4:	0038      	movs	r0, r7
 800a3a6:	f7ff fd4f 	bl	8009e48 <_Balloc>
 800a3aa:	1e02      	subs	r2, r0, #0
 800a3ac:	d104      	bne.n	800a3b8 <__mdiff+0x2c>
 800a3ae:	4b3f      	ldr	r3, [pc, #252]	; (800a4ac <__mdiff+0x120>)
 800a3b0:	483f      	ldr	r0, [pc, #252]	; (800a4b0 <__mdiff+0x124>)
 800a3b2:	4940      	ldr	r1, [pc, #256]	; (800a4b4 <__mdiff+0x128>)
 800a3b4:	f000 fb28 	bl	800aa08 <__assert_func>
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	6145      	str	r5, [r0, #20]
 800a3bc:	6103      	str	r3, [r0, #16]
 800a3be:	0010      	movs	r0, r2
 800a3c0:	b007      	add	sp, #28
 800a3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	9301      	str	r3, [sp, #4]
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	db04      	blt.n	800a3d6 <__mdiff+0x4a>
 800a3cc:	0023      	movs	r3, r4
 800a3ce:	0034      	movs	r4, r6
 800a3d0:	001e      	movs	r6, r3
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	9301      	str	r3, [sp, #4]
 800a3d6:	0038      	movs	r0, r7
 800a3d8:	6861      	ldr	r1, [r4, #4]
 800a3da:	f7ff fd35 	bl	8009e48 <_Balloc>
 800a3de:	1e02      	subs	r2, r0, #0
 800a3e0:	d103      	bne.n	800a3ea <__mdiff+0x5e>
 800a3e2:	4b32      	ldr	r3, [pc, #200]	; (800a4ac <__mdiff+0x120>)
 800a3e4:	4832      	ldr	r0, [pc, #200]	; (800a4b0 <__mdiff+0x124>)
 800a3e6:	4934      	ldr	r1, [pc, #208]	; (800a4b8 <__mdiff+0x12c>)
 800a3e8:	e7e4      	b.n	800a3b4 <__mdiff+0x28>
 800a3ea:	9b01      	ldr	r3, [sp, #4]
 800a3ec:	2700      	movs	r7, #0
 800a3ee:	60c3      	str	r3, [r0, #12]
 800a3f0:	6920      	ldr	r0, [r4, #16]
 800a3f2:	3414      	adds	r4, #20
 800a3f4:	0083      	lsls	r3, r0, #2
 800a3f6:	18e3      	adds	r3, r4, r3
 800a3f8:	0021      	movs	r1, r4
 800a3fa:	9401      	str	r4, [sp, #4]
 800a3fc:	0034      	movs	r4, r6
 800a3fe:	9302      	str	r3, [sp, #8]
 800a400:	6933      	ldr	r3, [r6, #16]
 800a402:	3414      	adds	r4, #20
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	18e3      	adds	r3, r4, r3
 800a408:	9303      	str	r3, [sp, #12]
 800a40a:	0013      	movs	r3, r2
 800a40c:	3314      	adds	r3, #20
 800a40e:	469c      	mov	ip, r3
 800a410:	9305      	str	r3, [sp, #20]
 800a412:	9104      	str	r1, [sp, #16]
 800a414:	9b04      	ldr	r3, [sp, #16]
 800a416:	cc02      	ldmia	r4!, {r1}
 800a418:	cb20      	ldmia	r3!, {r5}
 800a41a:	9304      	str	r3, [sp, #16]
 800a41c:	b2ab      	uxth	r3, r5
 800a41e:	19df      	adds	r7, r3, r7
 800a420:	b28b      	uxth	r3, r1
 800a422:	1afb      	subs	r3, r7, r3
 800a424:	0c09      	lsrs	r1, r1, #16
 800a426:	0c2d      	lsrs	r5, r5, #16
 800a428:	1a6d      	subs	r5, r5, r1
 800a42a:	1419      	asrs	r1, r3, #16
 800a42c:	1869      	adds	r1, r5, r1
 800a42e:	b29b      	uxth	r3, r3
 800a430:	140f      	asrs	r7, r1, #16
 800a432:	0409      	lsls	r1, r1, #16
 800a434:	4319      	orrs	r1, r3
 800a436:	4663      	mov	r3, ip
 800a438:	c302      	stmia	r3!, {r1}
 800a43a:	469c      	mov	ip, r3
 800a43c:	9b03      	ldr	r3, [sp, #12]
 800a43e:	42a3      	cmp	r3, r4
 800a440:	d8e8      	bhi.n	800a414 <__mdiff+0x88>
 800a442:	0031      	movs	r1, r6
 800a444:	9c03      	ldr	r4, [sp, #12]
 800a446:	3115      	adds	r1, #21
 800a448:	2304      	movs	r3, #4
 800a44a:	428c      	cmp	r4, r1
 800a44c:	d304      	bcc.n	800a458 <__mdiff+0xcc>
 800a44e:	1ba3      	subs	r3, r4, r6
 800a450:	3b15      	subs	r3, #21
 800a452:	089b      	lsrs	r3, r3, #2
 800a454:	3301      	adds	r3, #1
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	9901      	ldr	r1, [sp, #4]
 800a45a:	18cd      	adds	r5, r1, r3
 800a45c:	9905      	ldr	r1, [sp, #20]
 800a45e:	002e      	movs	r6, r5
 800a460:	18cb      	adds	r3, r1, r3
 800a462:	469c      	mov	ip, r3
 800a464:	9902      	ldr	r1, [sp, #8]
 800a466:	428e      	cmp	r6, r1
 800a468:	d310      	bcc.n	800a48c <__mdiff+0x100>
 800a46a:	9e02      	ldr	r6, [sp, #8]
 800a46c:	1ee9      	subs	r1, r5, #3
 800a46e:	2400      	movs	r4, #0
 800a470:	428e      	cmp	r6, r1
 800a472:	d304      	bcc.n	800a47e <__mdiff+0xf2>
 800a474:	0031      	movs	r1, r6
 800a476:	3103      	adds	r1, #3
 800a478:	1b49      	subs	r1, r1, r5
 800a47a:	0889      	lsrs	r1, r1, #2
 800a47c:	008c      	lsls	r4, r1, #2
 800a47e:	191b      	adds	r3, r3, r4
 800a480:	3b04      	subs	r3, #4
 800a482:	6819      	ldr	r1, [r3, #0]
 800a484:	2900      	cmp	r1, #0
 800a486:	d00f      	beq.n	800a4a8 <__mdiff+0x11c>
 800a488:	6110      	str	r0, [r2, #16]
 800a48a:	e798      	b.n	800a3be <__mdiff+0x32>
 800a48c:	ce02      	ldmia	r6!, {r1}
 800a48e:	b28c      	uxth	r4, r1
 800a490:	19e4      	adds	r4, r4, r7
 800a492:	0c0f      	lsrs	r7, r1, #16
 800a494:	1421      	asrs	r1, r4, #16
 800a496:	1879      	adds	r1, r7, r1
 800a498:	b2a4      	uxth	r4, r4
 800a49a:	140f      	asrs	r7, r1, #16
 800a49c:	0409      	lsls	r1, r1, #16
 800a49e:	4321      	orrs	r1, r4
 800a4a0:	4664      	mov	r4, ip
 800a4a2:	c402      	stmia	r4!, {r1}
 800a4a4:	46a4      	mov	ip, r4
 800a4a6:	e7dd      	b.n	800a464 <__mdiff+0xd8>
 800a4a8:	3801      	subs	r0, #1
 800a4aa:	e7e9      	b.n	800a480 <__mdiff+0xf4>
 800a4ac:	0800d418 	.word	0x0800d418
 800a4b0:	0800d429 	.word	0x0800d429
 800a4b4:	00000237 	.word	0x00000237
 800a4b8:	00000245 	.word	0x00000245

0800a4bc <__d2b>:
 800a4bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4be:	2101      	movs	r1, #1
 800a4c0:	0014      	movs	r4, r2
 800a4c2:	001d      	movs	r5, r3
 800a4c4:	9f08      	ldr	r7, [sp, #32]
 800a4c6:	f7ff fcbf 	bl	8009e48 <_Balloc>
 800a4ca:	1e06      	subs	r6, r0, #0
 800a4cc:	d105      	bne.n	800a4da <__d2b+0x1e>
 800a4ce:	0032      	movs	r2, r6
 800a4d0:	4b24      	ldr	r3, [pc, #144]	; (800a564 <__d2b+0xa8>)
 800a4d2:	4825      	ldr	r0, [pc, #148]	; (800a568 <__d2b+0xac>)
 800a4d4:	4925      	ldr	r1, [pc, #148]	; (800a56c <__d2b+0xb0>)
 800a4d6:	f000 fa97 	bl	800aa08 <__assert_func>
 800a4da:	032b      	lsls	r3, r5, #12
 800a4dc:	006d      	lsls	r5, r5, #1
 800a4de:	0b1b      	lsrs	r3, r3, #12
 800a4e0:	0d6d      	lsrs	r5, r5, #21
 800a4e2:	d125      	bne.n	800a530 <__d2b+0x74>
 800a4e4:	9301      	str	r3, [sp, #4]
 800a4e6:	2c00      	cmp	r4, #0
 800a4e8:	d028      	beq.n	800a53c <__d2b+0x80>
 800a4ea:	4668      	mov	r0, sp
 800a4ec:	9400      	str	r4, [sp, #0]
 800a4ee:	f7ff fd71 	bl	8009fd4 <__lo0bits>
 800a4f2:	9b01      	ldr	r3, [sp, #4]
 800a4f4:	9900      	ldr	r1, [sp, #0]
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d01e      	beq.n	800a538 <__d2b+0x7c>
 800a4fa:	2220      	movs	r2, #32
 800a4fc:	001c      	movs	r4, r3
 800a4fe:	1a12      	subs	r2, r2, r0
 800a500:	4094      	lsls	r4, r2
 800a502:	0022      	movs	r2, r4
 800a504:	40c3      	lsrs	r3, r0
 800a506:	430a      	orrs	r2, r1
 800a508:	6172      	str	r2, [r6, #20]
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	9c01      	ldr	r4, [sp, #4]
 800a50e:	61b4      	str	r4, [r6, #24]
 800a510:	1e63      	subs	r3, r4, #1
 800a512:	419c      	sbcs	r4, r3
 800a514:	3401      	adds	r4, #1
 800a516:	6134      	str	r4, [r6, #16]
 800a518:	2d00      	cmp	r5, #0
 800a51a:	d017      	beq.n	800a54c <__d2b+0x90>
 800a51c:	2435      	movs	r4, #53	; 0x35
 800a51e:	4b14      	ldr	r3, [pc, #80]	; (800a570 <__d2b+0xb4>)
 800a520:	18ed      	adds	r5, r5, r3
 800a522:	182d      	adds	r5, r5, r0
 800a524:	603d      	str	r5, [r7, #0]
 800a526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a528:	1a24      	subs	r4, r4, r0
 800a52a:	601c      	str	r4, [r3, #0]
 800a52c:	0030      	movs	r0, r6
 800a52e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a530:	2280      	movs	r2, #128	; 0x80
 800a532:	0352      	lsls	r2, r2, #13
 800a534:	4313      	orrs	r3, r2
 800a536:	e7d5      	b.n	800a4e4 <__d2b+0x28>
 800a538:	6171      	str	r1, [r6, #20]
 800a53a:	e7e7      	b.n	800a50c <__d2b+0x50>
 800a53c:	a801      	add	r0, sp, #4
 800a53e:	f7ff fd49 	bl	8009fd4 <__lo0bits>
 800a542:	9b01      	ldr	r3, [sp, #4]
 800a544:	2401      	movs	r4, #1
 800a546:	6173      	str	r3, [r6, #20]
 800a548:	3020      	adds	r0, #32
 800a54a:	e7e4      	b.n	800a516 <__d2b+0x5a>
 800a54c:	4b09      	ldr	r3, [pc, #36]	; (800a574 <__d2b+0xb8>)
 800a54e:	18c0      	adds	r0, r0, r3
 800a550:	4b09      	ldr	r3, [pc, #36]	; (800a578 <__d2b+0xbc>)
 800a552:	6038      	str	r0, [r7, #0]
 800a554:	18e3      	adds	r3, r4, r3
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	18f3      	adds	r3, r6, r3
 800a55a:	6958      	ldr	r0, [r3, #20]
 800a55c:	f7ff fd20 	bl	8009fa0 <__hi0bits>
 800a560:	0164      	lsls	r4, r4, #5
 800a562:	e7e0      	b.n	800a526 <__d2b+0x6a>
 800a564:	0800d418 	.word	0x0800d418
 800a568:	0800d429 	.word	0x0800d429
 800a56c:	0000030f 	.word	0x0000030f
 800a570:	fffffbcd 	.word	0xfffffbcd
 800a574:	fffffbce 	.word	0xfffffbce
 800a578:	3fffffff 	.word	0x3fffffff

0800a57c <__ssputs_r>:
 800a57c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a57e:	b085      	sub	sp, #20
 800a580:	9301      	str	r3, [sp, #4]
 800a582:	9203      	str	r2, [sp, #12]
 800a584:	688e      	ldr	r6, [r1, #8]
 800a586:	9a01      	ldr	r2, [sp, #4]
 800a588:	0007      	movs	r7, r0
 800a58a:	000c      	movs	r4, r1
 800a58c:	680b      	ldr	r3, [r1, #0]
 800a58e:	4296      	cmp	r6, r2
 800a590:	d831      	bhi.n	800a5f6 <__ssputs_r+0x7a>
 800a592:	898a      	ldrh	r2, [r1, #12]
 800a594:	2190      	movs	r1, #144	; 0x90
 800a596:	00c9      	lsls	r1, r1, #3
 800a598:	420a      	tst	r2, r1
 800a59a:	d029      	beq.n	800a5f0 <__ssputs_r+0x74>
 800a59c:	2003      	movs	r0, #3
 800a59e:	6921      	ldr	r1, [r4, #16]
 800a5a0:	1a5b      	subs	r3, r3, r1
 800a5a2:	9302      	str	r3, [sp, #8]
 800a5a4:	6963      	ldr	r3, [r4, #20]
 800a5a6:	4343      	muls	r3, r0
 800a5a8:	0fdd      	lsrs	r5, r3, #31
 800a5aa:	18ed      	adds	r5, r5, r3
 800a5ac:	9b01      	ldr	r3, [sp, #4]
 800a5ae:	9802      	ldr	r0, [sp, #8]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	181b      	adds	r3, r3, r0
 800a5b4:	106d      	asrs	r5, r5, #1
 800a5b6:	42ab      	cmp	r3, r5
 800a5b8:	d900      	bls.n	800a5bc <__ssputs_r+0x40>
 800a5ba:	001d      	movs	r5, r3
 800a5bc:	0552      	lsls	r2, r2, #21
 800a5be:	d529      	bpl.n	800a614 <__ssputs_r+0x98>
 800a5c0:	0029      	movs	r1, r5
 800a5c2:	0038      	movs	r0, r7
 800a5c4:	f7ff fbae 	bl	8009d24 <_malloc_r>
 800a5c8:	1e06      	subs	r6, r0, #0
 800a5ca:	d02d      	beq.n	800a628 <__ssputs_r+0xac>
 800a5cc:	9a02      	ldr	r2, [sp, #8]
 800a5ce:	6921      	ldr	r1, [r4, #16]
 800a5d0:	f000 fa10 	bl	800a9f4 <memcpy>
 800a5d4:	89a2      	ldrh	r2, [r4, #12]
 800a5d6:	4b19      	ldr	r3, [pc, #100]	; (800a63c <__ssputs_r+0xc0>)
 800a5d8:	401a      	ands	r2, r3
 800a5da:	2380      	movs	r3, #128	; 0x80
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	81a3      	strh	r3, [r4, #12]
 800a5e0:	9b02      	ldr	r3, [sp, #8]
 800a5e2:	6126      	str	r6, [r4, #16]
 800a5e4:	18f6      	adds	r6, r6, r3
 800a5e6:	6026      	str	r6, [r4, #0]
 800a5e8:	6165      	str	r5, [r4, #20]
 800a5ea:	9e01      	ldr	r6, [sp, #4]
 800a5ec:	1aed      	subs	r5, r5, r3
 800a5ee:	60a5      	str	r5, [r4, #8]
 800a5f0:	9b01      	ldr	r3, [sp, #4]
 800a5f2:	429e      	cmp	r6, r3
 800a5f4:	d900      	bls.n	800a5f8 <__ssputs_r+0x7c>
 800a5f6:	9e01      	ldr	r6, [sp, #4]
 800a5f8:	0032      	movs	r2, r6
 800a5fa:	9903      	ldr	r1, [sp, #12]
 800a5fc:	6820      	ldr	r0, [r4, #0]
 800a5fe:	f000 f9d4 	bl	800a9aa <memmove>
 800a602:	2000      	movs	r0, #0
 800a604:	68a3      	ldr	r3, [r4, #8]
 800a606:	1b9b      	subs	r3, r3, r6
 800a608:	60a3      	str	r3, [r4, #8]
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	199b      	adds	r3, r3, r6
 800a60e:	6023      	str	r3, [r4, #0]
 800a610:	b005      	add	sp, #20
 800a612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a614:	002a      	movs	r2, r5
 800a616:	0038      	movs	r0, r7
 800a618:	f000 fa53 	bl	800aac2 <_realloc_r>
 800a61c:	1e06      	subs	r6, r0, #0
 800a61e:	d1df      	bne.n	800a5e0 <__ssputs_r+0x64>
 800a620:	0038      	movs	r0, r7
 800a622:	6921      	ldr	r1, [r4, #16]
 800a624:	f7ff fb08 	bl	8009c38 <_free_r>
 800a628:	230c      	movs	r3, #12
 800a62a:	2001      	movs	r0, #1
 800a62c:	603b      	str	r3, [r7, #0]
 800a62e:	89a2      	ldrh	r2, [r4, #12]
 800a630:	3334      	adds	r3, #52	; 0x34
 800a632:	4313      	orrs	r3, r2
 800a634:	81a3      	strh	r3, [r4, #12]
 800a636:	4240      	negs	r0, r0
 800a638:	e7ea      	b.n	800a610 <__ssputs_r+0x94>
 800a63a:	46c0      	nop			; (mov r8, r8)
 800a63c:	fffffb7f 	.word	0xfffffb7f

0800a640 <_svfiprintf_r>:
 800a640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a642:	b0a1      	sub	sp, #132	; 0x84
 800a644:	9003      	str	r0, [sp, #12]
 800a646:	001d      	movs	r5, r3
 800a648:	898b      	ldrh	r3, [r1, #12]
 800a64a:	000f      	movs	r7, r1
 800a64c:	0016      	movs	r6, r2
 800a64e:	061b      	lsls	r3, r3, #24
 800a650:	d511      	bpl.n	800a676 <_svfiprintf_r+0x36>
 800a652:	690b      	ldr	r3, [r1, #16]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10e      	bne.n	800a676 <_svfiprintf_r+0x36>
 800a658:	2140      	movs	r1, #64	; 0x40
 800a65a:	f7ff fb63 	bl	8009d24 <_malloc_r>
 800a65e:	6038      	str	r0, [r7, #0]
 800a660:	6138      	str	r0, [r7, #16]
 800a662:	2800      	cmp	r0, #0
 800a664:	d105      	bne.n	800a672 <_svfiprintf_r+0x32>
 800a666:	230c      	movs	r3, #12
 800a668:	9a03      	ldr	r2, [sp, #12]
 800a66a:	3801      	subs	r0, #1
 800a66c:	6013      	str	r3, [r2, #0]
 800a66e:	b021      	add	sp, #132	; 0x84
 800a670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a672:	2340      	movs	r3, #64	; 0x40
 800a674:	617b      	str	r3, [r7, #20]
 800a676:	2300      	movs	r3, #0
 800a678:	ac08      	add	r4, sp, #32
 800a67a:	6163      	str	r3, [r4, #20]
 800a67c:	3320      	adds	r3, #32
 800a67e:	7663      	strb	r3, [r4, #25]
 800a680:	3310      	adds	r3, #16
 800a682:	76a3      	strb	r3, [r4, #26]
 800a684:	9507      	str	r5, [sp, #28]
 800a686:	0035      	movs	r5, r6
 800a688:	782b      	ldrb	r3, [r5, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d001      	beq.n	800a692 <_svfiprintf_r+0x52>
 800a68e:	2b25      	cmp	r3, #37	; 0x25
 800a690:	d148      	bne.n	800a724 <_svfiprintf_r+0xe4>
 800a692:	1bab      	subs	r3, r5, r6
 800a694:	9305      	str	r3, [sp, #20]
 800a696:	42b5      	cmp	r5, r6
 800a698:	d00b      	beq.n	800a6b2 <_svfiprintf_r+0x72>
 800a69a:	0032      	movs	r2, r6
 800a69c:	0039      	movs	r1, r7
 800a69e:	9803      	ldr	r0, [sp, #12]
 800a6a0:	f7ff ff6c 	bl	800a57c <__ssputs_r>
 800a6a4:	3001      	adds	r0, #1
 800a6a6:	d100      	bne.n	800a6aa <_svfiprintf_r+0x6a>
 800a6a8:	e0af      	b.n	800a80a <_svfiprintf_r+0x1ca>
 800a6aa:	6963      	ldr	r3, [r4, #20]
 800a6ac:	9a05      	ldr	r2, [sp, #20]
 800a6ae:	189b      	adds	r3, r3, r2
 800a6b0:	6163      	str	r3, [r4, #20]
 800a6b2:	782b      	ldrb	r3, [r5, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d100      	bne.n	800a6ba <_svfiprintf_r+0x7a>
 800a6b8:	e0a7      	b.n	800a80a <_svfiprintf_r+0x1ca>
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	2300      	movs	r3, #0
 800a6be:	4252      	negs	r2, r2
 800a6c0:	6062      	str	r2, [r4, #4]
 800a6c2:	a904      	add	r1, sp, #16
 800a6c4:	3254      	adds	r2, #84	; 0x54
 800a6c6:	1852      	adds	r2, r2, r1
 800a6c8:	1c6e      	adds	r6, r5, #1
 800a6ca:	6023      	str	r3, [r4, #0]
 800a6cc:	60e3      	str	r3, [r4, #12]
 800a6ce:	60a3      	str	r3, [r4, #8]
 800a6d0:	7013      	strb	r3, [r2, #0]
 800a6d2:	65a3      	str	r3, [r4, #88]	; 0x58
 800a6d4:	4b55      	ldr	r3, [pc, #340]	; (800a82c <_svfiprintf_r+0x1ec>)
 800a6d6:	2205      	movs	r2, #5
 800a6d8:	0018      	movs	r0, r3
 800a6da:	7831      	ldrb	r1, [r6, #0]
 800a6dc:	9305      	str	r3, [sp, #20]
 800a6de:	f7fe fc02 	bl	8008ee6 <memchr>
 800a6e2:	1c75      	adds	r5, r6, #1
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d11f      	bne.n	800a728 <_svfiprintf_r+0xe8>
 800a6e8:	6822      	ldr	r2, [r4, #0]
 800a6ea:	06d3      	lsls	r3, r2, #27
 800a6ec:	d504      	bpl.n	800a6f8 <_svfiprintf_r+0xb8>
 800a6ee:	2353      	movs	r3, #83	; 0x53
 800a6f0:	a904      	add	r1, sp, #16
 800a6f2:	185b      	adds	r3, r3, r1
 800a6f4:	2120      	movs	r1, #32
 800a6f6:	7019      	strb	r1, [r3, #0]
 800a6f8:	0713      	lsls	r3, r2, #28
 800a6fa:	d504      	bpl.n	800a706 <_svfiprintf_r+0xc6>
 800a6fc:	2353      	movs	r3, #83	; 0x53
 800a6fe:	a904      	add	r1, sp, #16
 800a700:	185b      	adds	r3, r3, r1
 800a702:	212b      	movs	r1, #43	; 0x2b
 800a704:	7019      	strb	r1, [r3, #0]
 800a706:	7833      	ldrb	r3, [r6, #0]
 800a708:	2b2a      	cmp	r3, #42	; 0x2a
 800a70a:	d016      	beq.n	800a73a <_svfiprintf_r+0xfa>
 800a70c:	0035      	movs	r5, r6
 800a70e:	2100      	movs	r1, #0
 800a710:	200a      	movs	r0, #10
 800a712:	68e3      	ldr	r3, [r4, #12]
 800a714:	782a      	ldrb	r2, [r5, #0]
 800a716:	1c6e      	adds	r6, r5, #1
 800a718:	3a30      	subs	r2, #48	; 0x30
 800a71a:	2a09      	cmp	r2, #9
 800a71c:	d94e      	bls.n	800a7bc <_svfiprintf_r+0x17c>
 800a71e:	2900      	cmp	r1, #0
 800a720:	d111      	bne.n	800a746 <_svfiprintf_r+0x106>
 800a722:	e017      	b.n	800a754 <_svfiprintf_r+0x114>
 800a724:	3501      	adds	r5, #1
 800a726:	e7af      	b.n	800a688 <_svfiprintf_r+0x48>
 800a728:	9b05      	ldr	r3, [sp, #20]
 800a72a:	6822      	ldr	r2, [r4, #0]
 800a72c:	1ac0      	subs	r0, r0, r3
 800a72e:	2301      	movs	r3, #1
 800a730:	4083      	lsls	r3, r0
 800a732:	4313      	orrs	r3, r2
 800a734:	002e      	movs	r6, r5
 800a736:	6023      	str	r3, [r4, #0]
 800a738:	e7cc      	b.n	800a6d4 <_svfiprintf_r+0x94>
 800a73a:	9b07      	ldr	r3, [sp, #28]
 800a73c:	1d19      	adds	r1, r3, #4
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	9107      	str	r1, [sp, #28]
 800a742:	2b00      	cmp	r3, #0
 800a744:	db01      	blt.n	800a74a <_svfiprintf_r+0x10a>
 800a746:	930b      	str	r3, [sp, #44]	; 0x2c
 800a748:	e004      	b.n	800a754 <_svfiprintf_r+0x114>
 800a74a:	425b      	negs	r3, r3
 800a74c:	60e3      	str	r3, [r4, #12]
 800a74e:	2302      	movs	r3, #2
 800a750:	4313      	orrs	r3, r2
 800a752:	6023      	str	r3, [r4, #0]
 800a754:	782b      	ldrb	r3, [r5, #0]
 800a756:	2b2e      	cmp	r3, #46	; 0x2e
 800a758:	d10a      	bne.n	800a770 <_svfiprintf_r+0x130>
 800a75a:	786b      	ldrb	r3, [r5, #1]
 800a75c:	2b2a      	cmp	r3, #42	; 0x2a
 800a75e:	d135      	bne.n	800a7cc <_svfiprintf_r+0x18c>
 800a760:	9b07      	ldr	r3, [sp, #28]
 800a762:	3502      	adds	r5, #2
 800a764:	1d1a      	adds	r2, r3, #4
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	9207      	str	r2, [sp, #28]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	db2b      	blt.n	800a7c6 <_svfiprintf_r+0x186>
 800a76e:	9309      	str	r3, [sp, #36]	; 0x24
 800a770:	4e2f      	ldr	r6, [pc, #188]	; (800a830 <_svfiprintf_r+0x1f0>)
 800a772:	2203      	movs	r2, #3
 800a774:	0030      	movs	r0, r6
 800a776:	7829      	ldrb	r1, [r5, #0]
 800a778:	f7fe fbb5 	bl	8008ee6 <memchr>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	d006      	beq.n	800a78e <_svfiprintf_r+0x14e>
 800a780:	2340      	movs	r3, #64	; 0x40
 800a782:	1b80      	subs	r0, r0, r6
 800a784:	4083      	lsls	r3, r0
 800a786:	6822      	ldr	r2, [r4, #0]
 800a788:	3501      	adds	r5, #1
 800a78a:	4313      	orrs	r3, r2
 800a78c:	6023      	str	r3, [r4, #0]
 800a78e:	7829      	ldrb	r1, [r5, #0]
 800a790:	2206      	movs	r2, #6
 800a792:	4828      	ldr	r0, [pc, #160]	; (800a834 <_svfiprintf_r+0x1f4>)
 800a794:	1c6e      	adds	r6, r5, #1
 800a796:	7621      	strb	r1, [r4, #24]
 800a798:	f7fe fba5 	bl	8008ee6 <memchr>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	d03c      	beq.n	800a81a <_svfiprintf_r+0x1da>
 800a7a0:	4b25      	ldr	r3, [pc, #148]	; (800a838 <_svfiprintf_r+0x1f8>)
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d125      	bne.n	800a7f2 <_svfiprintf_r+0x1b2>
 800a7a6:	2207      	movs	r2, #7
 800a7a8:	9b07      	ldr	r3, [sp, #28]
 800a7aa:	3307      	adds	r3, #7
 800a7ac:	4393      	bics	r3, r2
 800a7ae:	3308      	adds	r3, #8
 800a7b0:	9307      	str	r3, [sp, #28]
 800a7b2:	6963      	ldr	r3, [r4, #20]
 800a7b4:	9a04      	ldr	r2, [sp, #16]
 800a7b6:	189b      	adds	r3, r3, r2
 800a7b8:	6163      	str	r3, [r4, #20]
 800a7ba:	e764      	b.n	800a686 <_svfiprintf_r+0x46>
 800a7bc:	4343      	muls	r3, r0
 800a7be:	0035      	movs	r5, r6
 800a7c0:	2101      	movs	r1, #1
 800a7c2:	189b      	adds	r3, r3, r2
 800a7c4:	e7a6      	b.n	800a714 <_svfiprintf_r+0xd4>
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	425b      	negs	r3, r3
 800a7ca:	e7d0      	b.n	800a76e <_svfiprintf_r+0x12e>
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	200a      	movs	r0, #10
 800a7d0:	001a      	movs	r2, r3
 800a7d2:	3501      	adds	r5, #1
 800a7d4:	6063      	str	r3, [r4, #4]
 800a7d6:	7829      	ldrb	r1, [r5, #0]
 800a7d8:	1c6e      	adds	r6, r5, #1
 800a7da:	3930      	subs	r1, #48	; 0x30
 800a7dc:	2909      	cmp	r1, #9
 800a7de:	d903      	bls.n	800a7e8 <_svfiprintf_r+0x1a8>
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d0c5      	beq.n	800a770 <_svfiprintf_r+0x130>
 800a7e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a7e6:	e7c3      	b.n	800a770 <_svfiprintf_r+0x130>
 800a7e8:	4342      	muls	r2, r0
 800a7ea:	0035      	movs	r5, r6
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	1852      	adds	r2, r2, r1
 800a7f0:	e7f1      	b.n	800a7d6 <_svfiprintf_r+0x196>
 800a7f2:	aa07      	add	r2, sp, #28
 800a7f4:	9200      	str	r2, [sp, #0]
 800a7f6:	0021      	movs	r1, r4
 800a7f8:	003a      	movs	r2, r7
 800a7fa:	4b10      	ldr	r3, [pc, #64]	; (800a83c <_svfiprintf_r+0x1fc>)
 800a7fc:	9803      	ldr	r0, [sp, #12]
 800a7fe:	f7fd fdb1 	bl	8008364 <_printf_float>
 800a802:	9004      	str	r0, [sp, #16]
 800a804:	9b04      	ldr	r3, [sp, #16]
 800a806:	3301      	adds	r3, #1
 800a808:	d1d3      	bne.n	800a7b2 <_svfiprintf_r+0x172>
 800a80a:	89bb      	ldrh	r3, [r7, #12]
 800a80c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a80e:	065b      	lsls	r3, r3, #25
 800a810:	d400      	bmi.n	800a814 <_svfiprintf_r+0x1d4>
 800a812:	e72c      	b.n	800a66e <_svfiprintf_r+0x2e>
 800a814:	2001      	movs	r0, #1
 800a816:	4240      	negs	r0, r0
 800a818:	e729      	b.n	800a66e <_svfiprintf_r+0x2e>
 800a81a:	aa07      	add	r2, sp, #28
 800a81c:	9200      	str	r2, [sp, #0]
 800a81e:	0021      	movs	r1, r4
 800a820:	003a      	movs	r2, r7
 800a822:	4b06      	ldr	r3, [pc, #24]	; (800a83c <_svfiprintf_r+0x1fc>)
 800a824:	9803      	ldr	r0, [sp, #12]
 800a826:	f7fe f863 	bl	80088f0 <_printf_i>
 800a82a:	e7ea      	b.n	800a802 <_svfiprintf_r+0x1c2>
 800a82c:	0800d584 	.word	0x0800d584
 800a830:	0800d58a 	.word	0x0800d58a
 800a834:	0800d58e 	.word	0x0800d58e
 800a838:	08008365 	.word	0x08008365
 800a83c:	0800a57d 	.word	0x0800a57d

0800a840 <__sflush_r>:
 800a840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a842:	898b      	ldrh	r3, [r1, #12]
 800a844:	0005      	movs	r5, r0
 800a846:	000c      	movs	r4, r1
 800a848:	071a      	lsls	r2, r3, #28
 800a84a:	d45c      	bmi.n	800a906 <__sflush_r+0xc6>
 800a84c:	684a      	ldr	r2, [r1, #4]
 800a84e:	2a00      	cmp	r2, #0
 800a850:	dc04      	bgt.n	800a85c <__sflush_r+0x1c>
 800a852:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a854:	2a00      	cmp	r2, #0
 800a856:	dc01      	bgt.n	800a85c <__sflush_r+0x1c>
 800a858:	2000      	movs	r0, #0
 800a85a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a85c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a85e:	2f00      	cmp	r7, #0
 800a860:	d0fa      	beq.n	800a858 <__sflush_r+0x18>
 800a862:	2200      	movs	r2, #0
 800a864:	2080      	movs	r0, #128	; 0x80
 800a866:	682e      	ldr	r6, [r5, #0]
 800a868:	602a      	str	r2, [r5, #0]
 800a86a:	001a      	movs	r2, r3
 800a86c:	0140      	lsls	r0, r0, #5
 800a86e:	6a21      	ldr	r1, [r4, #32]
 800a870:	4002      	ands	r2, r0
 800a872:	4203      	tst	r3, r0
 800a874:	d034      	beq.n	800a8e0 <__sflush_r+0xa0>
 800a876:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a878:	89a3      	ldrh	r3, [r4, #12]
 800a87a:	075b      	lsls	r3, r3, #29
 800a87c:	d506      	bpl.n	800a88c <__sflush_r+0x4c>
 800a87e:	6863      	ldr	r3, [r4, #4]
 800a880:	1ac0      	subs	r0, r0, r3
 800a882:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a884:	2b00      	cmp	r3, #0
 800a886:	d001      	beq.n	800a88c <__sflush_r+0x4c>
 800a888:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a88a:	1ac0      	subs	r0, r0, r3
 800a88c:	0002      	movs	r2, r0
 800a88e:	2300      	movs	r3, #0
 800a890:	0028      	movs	r0, r5
 800a892:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a894:	6a21      	ldr	r1, [r4, #32]
 800a896:	47b8      	blx	r7
 800a898:	89a2      	ldrh	r2, [r4, #12]
 800a89a:	1c43      	adds	r3, r0, #1
 800a89c:	d106      	bne.n	800a8ac <__sflush_r+0x6c>
 800a89e:	6829      	ldr	r1, [r5, #0]
 800a8a0:	291d      	cmp	r1, #29
 800a8a2:	d82c      	bhi.n	800a8fe <__sflush_r+0xbe>
 800a8a4:	4b2a      	ldr	r3, [pc, #168]	; (800a950 <__sflush_r+0x110>)
 800a8a6:	410b      	asrs	r3, r1
 800a8a8:	07db      	lsls	r3, r3, #31
 800a8aa:	d428      	bmi.n	800a8fe <__sflush_r+0xbe>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	6063      	str	r3, [r4, #4]
 800a8b0:	6923      	ldr	r3, [r4, #16]
 800a8b2:	6023      	str	r3, [r4, #0]
 800a8b4:	04d2      	lsls	r2, r2, #19
 800a8b6:	d505      	bpl.n	800a8c4 <__sflush_r+0x84>
 800a8b8:	1c43      	adds	r3, r0, #1
 800a8ba:	d102      	bne.n	800a8c2 <__sflush_r+0x82>
 800a8bc:	682b      	ldr	r3, [r5, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d100      	bne.n	800a8c4 <__sflush_r+0x84>
 800a8c2:	6560      	str	r0, [r4, #84]	; 0x54
 800a8c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8c6:	602e      	str	r6, [r5, #0]
 800a8c8:	2900      	cmp	r1, #0
 800a8ca:	d0c5      	beq.n	800a858 <__sflush_r+0x18>
 800a8cc:	0023      	movs	r3, r4
 800a8ce:	3344      	adds	r3, #68	; 0x44
 800a8d0:	4299      	cmp	r1, r3
 800a8d2:	d002      	beq.n	800a8da <__sflush_r+0x9a>
 800a8d4:	0028      	movs	r0, r5
 800a8d6:	f7ff f9af 	bl	8009c38 <_free_r>
 800a8da:	2000      	movs	r0, #0
 800a8dc:	6360      	str	r0, [r4, #52]	; 0x34
 800a8de:	e7bc      	b.n	800a85a <__sflush_r+0x1a>
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	0028      	movs	r0, r5
 800a8e4:	47b8      	blx	r7
 800a8e6:	1c43      	adds	r3, r0, #1
 800a8e8:	d1c6      	bne.n	800a878 <__sflush_r+0x38>
 800a8ea:	682b      	ldr	r3, [r5, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d0c3      	beq.n	800a878 <__sflush_r+0x38>
 800a8f0:	2b1d      	cmp	r3, #29
 800a8f2:	d001      	beq.n	800a8f8 <__sflush_r+0xb8>
 800a8f4:	2b16      	cmp	r3, #22
 800a8f6:	d101      	bne.n	800a8fc <__sflush_r+0xbc>
 800a8f8:	602e      	str	r6, [r5, #0]
 800a8fa:	e7ad      	b.n	800a858 <__sflush_r+0x18>
 800a8fc:	89a2      	ldrh	r2, [r4, #12]
 800a8fe:	2340      	movs	r3, #64	; 0x40
 800a900:	4313      	orrs	r3, r2
 800a902:	81a3      	strh	r3, [r4, #12]
 800a904:	e7a9      	b.n	800a85a <__sflush_r+0x1a>
 800a906:	690e      	ldr	r6, [r1, #16]
 800a908:	2e00      	cmp	r6, #0
 800a90a:	d0a5      	beq.n	800a858 <__sflush_r+0x18>
 800a90c:	680f      	ldr	r7, [r1, #0]
 800a90e:	600e      	str	r6, [r1, #0]
 800a910:	1bba      	subs	r2, r7, r6
 800a912:	9201      	str	r2, [sp, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	079b      	lsls	r3, r3, #30
 800a918:	d100      	bne.n	800a91c <__sflush_r+0xdc>
 800a91a:	694a      	ldr	r2, [r1, #20]
 800a91c:	60a2      	str	r2, [r4, #8]
 800a91e:	9b01      	ldr	r3, [sp, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	dd99      	ble.n	800a858 <__sflush_r+0x18>
 800a924:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a926:	0032      	movs	r2, r6
 800a928:	001f      	movs	r7, r3
 800a92a:	0028      	movs	r0, r5
 800a92c:	9b01      	ldr	r3, [sp, #4]
 800a92e:	6a21      	ldr	r1, [r4, #32]
 800a930:	47b8      	blx	r7
 800a932:	2800      	cmp	r0, #0
 800a934:	dc06      	bgt.n	800a944 <__sflush_r+0x104>
 800a936:	2340      	movs	r3, #64	; 0x40
 800a938:	2001      	movs	r0, #1
 800a93a:	89a2      	ldrh	r2, [r4, #12]
 800a93c:	4240      	negs	r0, r0
 800a93e:	4313      	orrs	r3, r2
 800a940:	81a3      	strh	r3, [r4, #12]
 800a942:	e78a      	b.n	800a85a <__sflush_r+0x1a>
 800a944:	9b01      	ldr	r3, [sp, #4]
 800a946:	1836      	adds	r6, r6, r0
 800a948:	1a1b      	subs	r3, r3, r0
 800a94a:	9301      	str	r3, [sp, #4]
 800a94c:	e7e7      	b.n	800a91e <__sflush_r+0xde>
 800a94e:	46c0      	nop			; (mov r8, r8)
 800a950:	dfbffffe 	.word	0xdfbffffe

0800a954 <_fflush_r>:
 800a954:	690b      	ldr	r3, [r1, #16]
 800a956:	b570      	push	{r4, r5, r6, lr}
 800a958:	0005      	movs	r5, r0
 800a95a:	000c      	movs	r4, r1
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d102      	bne.n	800a966 <_fflush_r+0x12>
 800a960:	2500      	movs	r5, #0
 800a962:	0028      	movs	r0, r5
 800a964:	bd70      	pop	{r4, r5, r6, pc}
 800a966:	2800      	cmp	r0, #0
 800a968:	d004      	beq.n	800a974 <_fflush_r+0x20>
 800a96a:	6a03      	ldr	r3, [r0, #32]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d101      	bne.n	800a974 <_fflush_r+0x20>
 800a970:	f7fe f95e 	bl	8008c30 <__sinit>
 800a974:	220c      	movs	r2, #12
 800a976:	5ea3      	ldrsh	r3, [r4, r2]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d0f1      	beq.n	800a960 <_fflush_r+0xc>
 800a97c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a97e:	07d2      	lsls	r2, r2, #31
 800a980:	d404      	bmi.n	800a98c <_fflush_r+0x38>
 800a982:	059b      	lsls	r3, r3, #22
 800a984:	d402      	bmi.n	800a98c <_fflush_r+0x38>
 800a986:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a988:	f7fe faab 	bl	8008ee2 <__retarget_lock_acquire_recursive>
 800a98c:	0028      	movs	r0, r5
 800a98e:	0021      	movs	r1, r4
 800a990:	f7ff ff56 	bl	800a840 <__sflush_r>
 800a994:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a996:	0005      	movs	r5, r0
 800a998:	07db      	lsls	r3, r3, #31
 800a99a:	d4e2      	bmi.n	800a962 <_fflush_r+0xe>
 800a99c:	89a3      	ldrh	r3, [r4, #12]
 800a99e:	059b      	lsls	r3, r3, #22
 800a9a0:	d4df      	bmi.n	800a962 <_fflush_r+0xe>
 800a9a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9a4:	f7fe fa9e 	bl	8008ee4 <__retarget_lock_release_recursive>
 800a9a8:	e7db      	b.n	800a962 <_fflush_r+0xe>

0800a9aa <memmove>:
 800a9aa:	b510      	push	{r4, lr}
 800a9ac:	4288      	cmp	r0, r1
 800a9ae:	d902      	bls.n	800a9b6 <memmove+0xc>
 800a9b0:	188b      	adds	r3, r1, r2
 800a9b2:	4298      	cmp	r0, r3
 800a9b4:	d303      	bcc.n	800a9be <memmove+0x14>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	e007      	b.n	800a9ca <memmove+0x20>
 800a9ba:	5c8b      	ldrb	r3, [r1, r2]
 800a9bc:	5483      	strb	r3, [r0, r2]
 800a9be:	3a01      	subs	r2, #1
 800a9c0:	d2fb      	bcs.n	800a9ba <memmove+0x10>
 800a9c2:	bd10      	pop	{r4, pc}
 800a9c4:	5ccc      	ldrb	r4, [r1, r3]
 800a9c6:	54c4      	strb	r4, [r0, r3]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d1fa      	bne.n	800a9c4 <memmove+0x1a>
 800a9ce:	e7f8      	b.n	800a9c2 <memmove+0x18>

0800a9d0 <_sbrk_r>:
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	b570      	push	{r4, r5, r6, lr}
 800a9d4:	4d06      	ldr	r5, [pc, #24]	; (800a9f0 <_sbrk_r+0x20>)
 800a9d6:	0004      	movs	r4, r0
 800a9d8:	0008      	movs	r0, r1
 800a9da:	602b      	str	r3, [r5, #0]
 800a9dc:	f7f9 fd78 	bl	80044d0 <_sbrk>
 800a9e0:	1c43      	adds	r3, r0, #1
 800a9e2:	d103      	bne.n	800a9ec <_sbrk_r+0x1c>
 800a9e4:	682b      	ldr	r3, [r5, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d000      	beq.n	800a9ec <_sbrk_r+0x1c>
 800a9ea:	6023      	str	r3, [r4, #0]
 800a9ec:	bd70      	pop	{r4, r5, r6, pc}
 800a9ee:	46c0      	nop			; (mov r8, r8)
 800a9f0:	200009bc 	.word	0x200009bc

0800a9f4 <memcpy>:
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	b510      	push	{r4, lr}
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d100      	bne.n	800a9fe <memcpy+0xa>
 800a9fc:	bd10      	pop	{r4, pc}
 800a9fe:	5ccc      	ldrb	r4, [r1, r3]
 800aa00:	54c4      	strb	r4, [r0, r3]
 800aa02:	3301      	adds	r3, #1
 800aa04:	e7f8      	b.n	800a9f8 <memcpy+0x4>
	...

0800aa08 <__assert_func>:
 800aa08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800aa0a:	0014      	movs	r4, r2
 800aa0c:	001a      	movs	r2, r3
 800aa0e:	4b09      	ldr	r3, [pc, #36]	; (800aa34 <__assert_func+0x2c>)
 800aa10:	0005      	movs	r5, r0
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	000e      	movs	r6, r1
 800aa16:	68d8      	ldr	r0, [r3, #12]
 800aa18:	4b07      	ldr	r3, [pc, #28]	; (800aa38 <__assert_func+0x30>)
 800aa1a:	2c00      	cmp	r4, #0
 800aa1c:	d101      	bne.n	800aa22 <__assert_func+0x1a>
 800aa1e:	4b07      	ldr	r3, [pc, #28]	; (800aa3c <__assert_func+0x34>)
 800aa20:	001c      	movs	r4, r3
 800aa22:	4907      	ldr	r1, [pc, #28]	; (800aa40 <__assert_func+0x38>)
 800aa24:	9301      	str	r3, [sp, #4]
 800aa26:	9402      	str	r4, [sp, #8]
 800aa28:	002b      	movs	r3, r5
 800aa2a:	9600      	str	r6, [sp, #0]
 800aa2c:	f000 f886 	bl	800ab3c <fiprintf>
 800aa30:	f000 f894 	bl	800ab5c <abort>
 800aa34:	20000080 	.word	0x20000080
 800aa38:	0800d59f 	.word	0x0800d59f
 800aa3c:	0800d5da 	.word	0x0800d5da
 800aa40:	0800d5ac 	.word	0x0800d5ac

0800aa44 <_calloc_r>:
 800aa44:	b570      	push	{r4, r5, r6, lr}
 800aa46:	0c0b      	lsrs	r3, r1, #16
 800aa48:	0c15      	lsrs	r5, r2, #16
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d11e      	bne.n	800aa8c <_calloc_r+0x48>
 800aa4e:	2d00      	cmp	r5, #0
 800aa50:	d10c      	bne.n	800aa6c <_calloc_r+0x28>
 800aa52:	b289      	uxth	r1, r1
 800aa54:	b294      	uxth	r4, r2
 800aa56:	434c      	muls	r4, r1
 800aa58:	0021      	movs	r1, r4
 800aa5a:	f7ff f963 	bl	8009d24 <_malloc_r>
 800aa5e:	1e05      	subs	r5, r0, #0
 800aa60:	d01b      	beq.n	800aa9a <_calloc_r+0x56>
 800aa62:	0022      	movs	r2, r4
 800aa64:	2100      	movs	r1, #0
 800aa66:	f7fe f9b7 	bl	8008dd8 <memset>
 800aa6a:	e016      	b.n	800aa9a <_calloc_r+0x56>
 800aa6c:	1c2b      	adds	r3, r5, #0
 800aa6e:	1c0c      	adds	r4, r1, #0
 800aa70:	b289      	uxth	r1, r1
 800aa72:	b292      	uxth	r2, r2
 800aa74:	434a      	muls	r2, r1
 800aa76:	b2a1      	uxth	r1, r4
 800aa78:	b29c      	uxth	r4, r3
 800aa7a:	434c      	muls	r4, r1
 800aa7c:	0c13      	lsrs	r3, r2, #16
 800aa7e:	18e4      	adds	r4, r4, r3
 800aa80:	0c23      	lsrs	r3, r4, #16
 800aa82:	d107      	bne.n	800aa94 <_calloc_r+0x50>
 800aa84:	0424      	lsls	r4, r4, #16
 800aa86:	b292      	uxth	r2, r2
 800aa88:	4314      	orrs	r4, r2
 800aa8a:	e7e5      	b.n	800aa58 <_calloc_r+0x14>
 800aa8c:	2d00      	cmp	r5, #0
 800aa8e:	d101      	bne.n	800aa94 <_calloc_r+0x50>
 800aa90:	1c14      	adds	r4, r2, #0
 800aa92:	e7ed      	b.n	800aa70 <_calloc_r+0x2c>
 800aa94:	230c      	movs	r3, #12
 800aa96:	2500      	movs	r5, #0
 800aa98:	6003      	str	r3, [r0, #0]
 800aa9a:	0028      	movs	r0, r5
 800aa9c:	bd70      	pop	{r4, r5, r6, pc}

0800aa9e <__ascii_mbtowc>:
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	2900      	cmp	r1, #0
 800aaa2:	d100      	bne.n	800aaa6 <__ascii_mbtowc+0x8>
 800aaa4:	a901      	add	r1, sp, #4
 800aaa6:	1e10      	subs	r0, r2, #0
 800aaa8:	d006      	beq.n	800aab8 <__ascii_mbtowc+0x1a>
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d006      	beq.n	800aabc <__ascii_mbtowc+0x1e>
 800aaae:	7813      	ldrb	r3, [r2, #0]
 800aab0:	600b      	str	r3, [r1, #0]
 800aab2:	7810      	ldrb	r0, [r2, #0]
 800aab4:	1e43      	subs	r3, r0, #1
 800aab6:	4198      	sbcs	r0, r3
 800aab8:	b002      	add	sp, #8
 800aaba:	4770      	bx	lr
 800aabc:	2002      	movs	r0, #2
 800aabe:	4240      	negs	r0, r0
 800aac0:	e7fa      	b.n	800aab8 <__ascii_mbtowc+0x1a>

0800aac2 <_realloc_r>:
 800aac2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aac4:	0007      	movs	r7, r0
 800aac6:	000e      	movs	r6, r1
 800aac8:	0014      	movs	r4, r2
 800aaca:	2900      	cmp	r1, #0
 800aacc:	d105      	bne.n	800aada <_realloc_r+0x18>
 800aace:	0011      	movs	r1, r2
 800aad0:	f7ff f928 	bl	8009d24 <_malloc_r>
 800aad4:	0005      	movs	r5, r0
 800aad6:	0028      	movs	r0, r5
 800aad8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aada:	2a00      	cmp	r2, #0
 800aadc:	d103      	bne.n	800aae6 <_realloc_r+0x24>
 800aade:	f7ff f8ab 	bl	8009c38 <_free_r>
 800aae2:	0025      	movs	r5, r4
 800aae4:	e7f7      	b.n	800aad6 <_realloc_r+0x14>
 800aae6:	f000 f840 	bl	800ab6a <_malloc_usable_size_r>
 800aaea:	9001      	str	r0, [sp, #4]
 800aaec:	4284      	cmp	r4, r0
 800aaee:	d803      	bhi.n	800aaf8 <_realloc_r+0x36>
 800aaf0:	0035      	movs	r5, r6
 800aaf2:	0843      	lsrs	r3, r0, #1
 800aaf4:	42a3      	cmp	r3, r4
 800aaf6:	d3ee      	bcc.n	800aad6 <_realloc_r+0x14>
 800aaf8:	0021      	movs	r1, r4
 800aafa:	0038      	movs	r0, r7
 800aafc:	f7ff f912 	bl	8009d24 <_malloc_r>
 800ab00:	1e05      	subs	r5, r0, #0
 800ab02:	d0e8      	beq.n	800aad6 <_realloc_r+0x14>
 800ab04:	9b01      	ldr	r3, [sp, #4]
 800ab06:	0022      	movs	r2, r4
 800ab08:	429c      	cmp	r4, r3
 800ab0a:	d900      	bls.n	800ab0e <_realloc_r+0x4c>
 800ab0c:	001a      	movs	r2, r3
 800ab0e:	0031      	movs	r1, r6
 800ab10:	0028      	movs	r0, r5
 800ab12:	f7ff ff6f 	bl	800a9f4 <memcpy>
 800ab16:	0031      	movs	r1, r6
 800ab18:	0038      	movs	r0, r7
 800ab1a:	f7ff f88d 	bl	8009c38 <_free_r>
 800ab1e:	e7da      	b.n	800aad6 <_realloc_r+0x14>

0800ab20 <__ascii_wctomb>:
 800ab20:	0003      	movs	r3, r0
 800ab22:	1e08      	subs	r0, r1, #0
 800ab24:	d005      	beq.n	800ab32 <__ascii_wctomb+0x12>
 800ab26:	2aff      	cmp	r2, #255	; 0xff
 800ab28:	d904      	bls.n	800ab34 <__ascii_wctomb+0x14>
 800ab2a:	228a      	movs	r2, #138	; 0x8a
 800ab2c:	2001      	movs	r0, #1
 800ab2e:	601a      	str	r2, [r3, #0]
 800ab30:	4240      	negs	r0, r0
 800ab32:	4770      	bx	lr
 800ab34:	2001      	movs	r0, #1
 800ab36:	700a      	strb	r2, [r1, #0]
 800ab38:	e7fb      	b.n	800ab32 <__ascii_wctomb+0x12>
	...

0800ab3c <fiprintf>:
 800ab3c:	b40e      	push	{r1, r2, r3}
 800ab3e:	b517      	push	{r0, r1, r2, r4, lr}
 800ab40:	4c05      	ldr	r4, [pc, #20]	; (800ab58 <fiprintf+0x1c>)
 800ab42:	ab05      	add	r3, sp, #20
 800ab44:	cb04      	ldmia	r3!, {r2}
 800ab46:	0001      	movs	r1, r0
 800ab48:	6820      	ldr	r0, [r4, #0]
 800ab4a:	9301      	str	r3, [sp, #4]
 800ab4c:	f000 f83c 	bl	800abc8 <_vfiprintf_r>
 800ab50:	bc1e      	pop	{r1, r2, r3, r4}
 800ab52:	bc08      	pop	{r3}
 800ab54:	b003      	add	sp, #12
 800ab56:	4718      	bx	r3
 800ab58:	20000080 	.word	0x20000080

0800ab5c <abort>:
 800ab5c:	2006      	movs	r0, #6
 800ab5e:	b510      	push	{r4, lr}
 800ab60:	f000 fa1e 	bl	800afa0 <raise>
 800ab64:	2001      	movs	r0, #1
 800ab66:	f7f9 fc41 	bl	80043ec <_exit>

0800ab6a <_malloc_usable_size_r>:
 800ab6a:	1f0b      	subs	r3, r1, #4
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	1f18      	subs	r0, r3, #4
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	da01      	bge.n	800ab78 <_malloc_usable_size_r+0xe>
 800ab74:	580b      	ldr	r3, [r1, r0]
 800ab76:	18c0      	adds	r0, r0, r3
 800ab78:	4770      	bx	lr

0800ab7a <__sfputc_r>:
 800ab7a:	6893      	ldr	r3, [r2, #8]
 800ab7c:	b510      	push	{r4, lr}
 800ab7e:	3b01      	subs	r3, #1
 800ab80:	6093      	str	r3, [r2, #8]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	da04      	bge.n	800ab90 <__sfputc_r+0x16>
 800ab86:	6994      	ldr	r4, [r2, #24]
 800ab88:	42a3      	cmp	r3, r4
 800ab8a:	db07      	blt.n	800ab9c <__sfputc_r+0x22>
 800ab8c:	290a      	cmp	r1, #10
 800ab8e:	d005      	beq.n	800ab9c <__sfputc_r+0x22>
 800ab90:	6813      	ldr	r3, [r2, #0]
 800ab92:	1c58      	adds	r0, r3, #1
 800ab94:	6010      	str	r0, [r2, #0]
 800ab96:	7019      	strb	r1, [r3, #0]
 800ab98:	0008      	movs	r0, r1
 800ab9a:	bd10      	pop	{r4, pc}
 800ab9c:	f000 f930 	bl	800ae00 <__swbuf_r>
 800aba0:	0001      	movs	r1, r0
 800aba2:	e7f9      	b.n	800ab98 <__sfputc_r+0x1e>

0800aba4 <__sfputs_r>:
 800aba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba6:	0006      	movs	r6, r0
 800aba8:	000f      	movs	r7, r1
 800abaa:	0014      	movs	r4, r2
 800abac:	18d5      	adds	r5, r2, r3
 800abae:	42ac      	cmp	r4, r5
 800abb0:	d101      	bne.n	800abb6 <__sfputs_r+0x12>
 800abb2:	2000      	movs	r0, #0
 800abb4:	e007      	b.n	800abc6 <__sfputs_r+0x22>
 800abb6:	7821      	ldrb	r1, [r4, #0]
 800abb8:	003a      	movs	r2, r7
 800abba:	0030      	movs	r0, r6
 800abbc:	f7ff ffdd 	bl	800ab7a <__sfputc_r>
 800abc0:	3401      	adds	r4, #1
 800abc2:	1c43      	adds	r3, r0, #1
 800abc4:	d1f3      	bne.n	800abae <__sfputs_r+0xa>
 800abc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800abc8 <_vfiprintf_r>:
 800abc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abca:	b0a1      	sub	sp, #132	; 0x84
 800abcc:	000f      	movs	r7, r1
 800abce:	0015      	movs	r5, r2
 800abd0:	001e      	movs	r6, r3
 800abd2:	9003      	str	r0, [sp, #12]
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d004      	beq.n	800abe2 <_vfiprintf_r+0x1a>
 800abd8:	6a03      	ldr	r3, [r0, #32]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d101      	bne.n	800abe2 <_vfiprintf_r+0x1a>
 800abde:	f7fe f827 	bl	8008c30 <__sinit>
 800abe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abe4:	07db      	lsls	r3, r3, #31
 800abe6:	d405      	bmi.n	800abf4 <_vfiprintf_r+0x2c>
 800abe8:	89bb      	ldrh	r3, [r7, #12]
 800abea:	059b      	lsls	r3, r3, #22
 800abec:	d402      	bmi.n	800abf4 <_vfiprintf_r+0x2c>
 800abee:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800abf0:	f7fe f977 	bl	8008ee2 <__retarget_lock_acquire_recursive>
 800abf4:	89bb      	ldrh	r3, [r7, #12]
 800abf6:	071b      	lsls	r3, r3, #28
 800abf8:	d502      	bpl.n	800ac00 <_vfiprintf_r+0x38>
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d113      	bne.n	800ac28 <_vfiprintf_r+0x60>
 800ac00:	0039      	movs	r1, r7
 800ac02:	9803      	ldr	r0, [sp, #12]
 800ac04:	f000 f93e 	bl	800ae84 <__swsetup_r>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	d00d      	beq.n	800ac28 <_vfiprintf_r+0x60>
 800ac0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac0e:	07db      	lsls	r3, r3, #31
 800ac10:	d503      	bpl.n	800ac1a <_vfiprintf_r+0x52>
 800ac12:	2001      	movs	r0, #1
 800ac14:	4240      	negs	r0, r0
 800ac16:	b021      	add	sp, #132	; 0x84
 800ac18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac1a:	89bb      	ldrh	r3, [r7, #12]
 800ac1c:	059b      	lsls	r3, r3, #22
 800ac1e:	d4f8      	bmi.n	800ac12 <_vfiprintf_r+0x4a>
 800ac20:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ac22:	f7fe f95f 	bl	8008ee4 <__retarget_lock_release_recursive>
 800ac26:	e7f4      	b.n	800ac12 <_vfiprintf_r+0x4a>
 800ac28:	2300      	movs	r3, #0
 800ac2a:	ac08      	add	r4, sp, #32
 800ac2c:	6163      	str	r3, [r4, #20]
 800ac2e:	3320      	adds	r3, #32
 800ac30:	7663      	strb	r3, [r4, #25]
 800ac32:	3310      	adds	r3, #16
 800ac34:	76a3      	strb	r3, [r4, #26]
 800ac36:	9607      	str	r6, [sp, #28]
 800ac38:	002e      	movs	r6, r5
 800ac3a:	7833      	ldrb	r3, [r6, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d001      	beq.n	800ac44 <_vfiprintf_r+0x7c>
 800ac40:	2b25      	cmp	r3, #37	; 0x25
 800ac42:	d148      	bne.n	800acd6 <_vfiprintf_r+0x10e>
 800ac44:	1b73      	subs	r3, r6, r5
 800ac46:	9305      	str	r3, [sp, #20]
 800ac48:	42ae      	cmp	r6, r5
 800ac4a:	d00b      	beq.n	800ac64 <_vfiprintf_r+0x9c>
 800ac4c:	002a      	movs	r2, r5
 800ac4e:	0039      	movs	r1, r7
 800ac50:	9803      	ldr	r0, [sp, #12]
 800ac52:	f7ff ffa7 	bl	800aba4 <__sfputs_r>
 800ac56:	3001      	adds	r0, #1
 800ac58:	d100      	bne.n	800ac5c <_vfiprintf_r+0x94>
 800ac5a:	e0af      	b.n	800adbc <_vfiprintf_r+0x1f4>
 800ac5c:	6963      	ldr	r3, [r4, #20]
 800ac5e:	9a05      	ldr	r2, [sp, #20]
 800ac60:	189b      	adds	r3, r3, r2
 800ac62:	6163      	str	r3, [r4, #20]
 800ac64:	7833      	ldrb	r3, [r6, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d100      	bne.n	800ac6c <_vfiprintf_r+0xa4>
 800ac6a:	e0a7      	b.n	800adbc <_vfiprintf_r+0x1f4>
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	2300      	movs	r3, #0
 800ac70:	4252      	negs	r2, r2
 800ac72:	6062      	str	r2, [r4, #4]
 800ac74:	a904      	add	r1, sp, #16
 800ac76:	3254      	adds	r2, #84	; 0x54
 800ac78:	1852      	adds	r2, r2, r1
 800ac7a:	1c75      	adds	r5, r6, #1
 800ac7c:	6023      	str	r3, [r4, #0]
 800ac7e:	60e3      	str	r3, [r4, #12]
 800ac80:	60a3      	str	r3, [r4, #8]
 800ac82:	7013      	strb	r3, [r2, #0]
 800ac84:	65a3      	str	r3, [r4, #88]	; 0x58
 800ac86:	4b59      	ldr	r3, [pc, #356]	; (800adec <_vfiprintf_r+0x224>)
 800ac88:	2205      	movs	r2, #5
 800ac8a:	0018      	movs	r0, r3
 800ac8c:	7829      	ldrb	r1, [r5, #0]
 800ac8e:	9305      	str	r3, [sp, #20]
 800ac90:	f7fe f929 	bl	8008ee6 <memchr>
 800ac94:	1c6e      	adds	r6, r5, #1
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d11f      	bne.n	800acda <_vfiprintf_r+0x112>
 800ac9a:	6822      	ldr	r2, [r4, #0]
 800ac9c:	06d3      	lsls	r3, r2, #27
 800ac9e:	d504      	bpl.n	800acaa <_vfiprintf_r+0xe2>
 800aca0:	2353      	movs	r3, #83	; 0x53
 800aca2:	a904      	add	r1, sp, #16
 800aca4:	185b      	adds	r3, r3, r1
 800aca6:	2120      	movs	r1, #32
 800aca8:	7019      	strb	r1, [r3, #0]
 800acaa:	0713      	lsls	r3, r2, #28
 800acac:	d504      	bpl.n	800acb8 <_vfiprintf_r+0xf0>
 800acae:	2353      	movs	r3, #83	; 0x53
 800acb0:	a904      	add	r1, sp, #16
 800acb2:	185b      	adds	r3, r3, r1
 800acb4:	212b      	movs	r1, #43	; 0x2b
 800acb6:	7019      	strb	r1, [r3, #0]
 800acb8:	782b      	ldrb	r3, [r5, #0]
 800acba:	2b2a      	cmp	r3, #42	; 0x2a
 800acbc:	d016      	beq.n	800acec <_vfiprintf_r+0x124>
 800acbe:	002e      	movs	r6, r5
 800acc0:	2100      	movs	r1, #0
 800acc2:	200a      	movs	r0, #10
 800acc4:	68e3      	ldr	r3, [r4, #12]
 800acc6:	7832      	ldrb	r2, [r6, #0]
 800acc8:	1c75      	adds	r5, r6, #1
 800acca:	3a30      	subs	r2, #48	; 0x30
 800accc:	2a09      	cmp	r2, #9
 800acce:	d94e      	bls.n	800ad6e <_vfiprintf_r+0x1a6>
 800acd0:	2900      	cmp	r1, #0
 800acd2:	d111      	bne.n	800acf8 <_vfiprintf_r+0x130>
 800acd4:	e017      	b.n	800ad06 <_vfiprintf_r+0x13e>
 800acd6:	3601      	adds	r6, #1
 800acd8:	e7af      	b.n	800ac3a <_vfiprintf_r+0x72>
 800acda:	9b05      	ldr	r3, [sp, #20]
 800acdc:	6822      	ldr	r2, [r4, #0]
 800acde:	1ac0      	subs	r0, r0, r3
 800ace0:	2301      	movs	r3, #1
 800ace2:	4083      	lsls	r3, r0
 800ace4:	4313      	orrs	r3, r2
 800ace6:	0035      	movs	r5, r6
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	e7cc      	b.n	800ac86 <_vfiprintf_r+0xbe>
 800acec:	9b07      	ldr	r3, [sp, #28]
 800acee:	1d19      	adds	r1, r3, #4
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	9107      	str	r1, [sp, #28]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	db01      	blt.n	800acfc <_vfiprintf_r+0x134>
 800acf8:	930b      	str	r3, [sp, #44]	; 0x2c
 800acfa:	e004      	b.n	800ad06 <_vfiprintf_r+0x13e>
 800acfc:	425b      	negs	r3, r3
 800acfe:	60e3      	str	r3, [r4, #12]
 800ad00:	2302      	movs	r3, #2
 800ad02:	4313      	orrs	r3, r2
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	7833      	ldrb	r3, [r6, #0]
 800ad08:	2b2e      	cmp	r3, #46	; 0x2e
 800ad0a:	d10a      	bne.n	800ad22 <_vfiprintf_r+0x15a>
 800ad0c:	7873      	ldrb	r3, [r6, #1]
 800ad0e:	2b2a      	cmp	r3, #42	; 0x2a
 800ad10:	d135      	bne.n	800ad7e <_vfiprintf_r+0x1b6>
 800ad12:	9b07      	ldr	r3, [sp, #28]
 800ad14:	3602      	adds	r6, #2
 800ad16:	1d1a      	adds	r2, r3, #4
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	9207      	str	r2, [sp, #28]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	db2b      	blt.n	800ad78 <_vfiprintf_r+0x1b0>
 800ad20:	9309      	str	r3, [sp, #36]	; 0x24
 800ad22:	4d33      	ldr	r5, [pc, #204]	; (800adf0 <_vfiprintf_r+0x228>)
 800ad24:	2203      	movs	r2, #3
 800ad26:	0028      	movs	r0, r5
 800ad28:	7831      	ldrb	r1, [r6, #0]
 800ad2a:	f7fe f8dc 	bl	8008ee6 <memchr>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d006      	beq.n	800ad40 <_vfiprintf_r+0x178>
 800ad32:	2340      	movs	r3, #64	; 0x40
 800ad34:	1b40      	subs	r0, r0, r5
 800ad36:	4083      	lsls	r3, r0
 800ad38:	6822      	ldr	r2, [r4, #0]
 800ad3a:	3601      	adds	r6, #1
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	6023      	str	r3, [r4, #0]
 800ad40:	7831      	ldrb	r1, [r6, #0]
 800ad42:	2206      	movs	r2, #6
 800ad44:	482b      	ldr	r0, [pc, #172]	; (800adf4 <_vfiprintf_r+0x22c>)
 800ad46:	1c75      	adds	r5, r6, #1
 800ad48:	7621      	strb	r1, [r4, #24]
 800ad4a:	f7fe f8cc 	bl	8008ee6 <memchr>
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	d043      	beq.n	800adda <_vfiprintf_r+0x212>
 800ad52:	4b29      	ldr	r3, [pc, #164]	; (800adf8 <_vfiprintf_r+0x230>)
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d125      	bne.n	800ada4 <_vfiprintf_r+0x1dc>
 800ad58:	2207      	movs	r2, #7
 800ad5a:	9b07      	ldr	r3, [sp, #28]
 800ad5c:	3307      	adds	r3, #7
 800ad5e:	4393      	bics	r3, r2
 800ad60:	3308      	adds	r3, #8
 800ad62:	9307      	str	r3, [sp, #28]
 800ad64:	6963      	ldr	r3, [r4, #20]
 800ad66:	9a04      	ldr	r2, [sp, #16]
 800ad68:	189b      	adds	r3, r3, r2
 800ad6a:	6163      	str	r3, [r4, #20]
 800ad6c:	e764      	b.n	800ac38 <_vfiprintf_r+0x70>
 800ad6e:	4343      	muls	r3, r0
 800ad70:	002e      	movs	r6, r5
 800ad72:	2101      	movs	r1, #1
 800ad74:	189b      	adds	r3, r3, r2
 800ad76:	e7a6      	b.n	800acc6 <_vfiprintf_r+0xfe>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	425b      	negs	r3, r3
 800ad7c:	e7d0      	b.n	800ad20 <_vfiprintf_r+0x158>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	200a      	movs	r0, #10
 800ad82:	001a      	movs	r2, r3
 800ad84:	3601      	adds	r6, #1
 800ad86:	6063      	str	r3, [r4, #4]
 800ad88:	7831      	ldrb	r1, [r6, #0]
 800ad8a:	1c75      	adds	r5, r6, #1
 800ad8c:	3930      	subs	r1, #48	; 0x30
 800ad8e:	2909      	cmp	r1, #9
 800ad90:	d903      	bls.n	800ad9a <_vfiprintf_r+0x1d2>
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d0c5      	beq.n	800ad22 <_vfiprintf_r+0x15a>
 800ad96:	9209      	str	r2, [sp, #36]	; 0x24
 800ad98:	e7c3      	b.n	800ad22 <_vfiprintf_r+0x15a>
 800ad9a:	4342      	muls	r2, r0
 800ad9c:	002e      	movs	r6, r5
 800ad9e:	2301      	movs	r3, #1
 800ada0:	1852      	adds	r2, r2, r1
 800ada2:	e7f1      	b.n	800ad88 <_vfiprintf_r+0x1c0>
 800ada4:	aa07      	add	r2, sp, #28
 800ada6:	9200      	str	r2, [sp, #0]
 800ada8:	0021      	movs	r1, r4
 800adaa:	003a      	movs	r2, r7
 800adac:	4b13      	ldr	r3, [pc, #76]	; (800adfc <_vfiprintf_r+0x234>)
 800adae:	9803      	ldr	r0, [sp, #12]
 800adb0:	f7fd fad8 	bl	8008364 <_printf_float>
 800adb4:	9004      	str	r0, [sp, #16]
 800adb6:	9b04      	ldr	r3, [sp, #16]
 800adb8:	3301      	adds	r3, #1
 800adba:	d1d3      	bne.n	800ad64 <_vfiprintf_r+0x19c>
 800adbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adbe:	07db      	lsls	r3, r3, #31
 800adc0:	d405      	bmi.n	800adce <_vfiprintf_r+0x206>
 800adc2:	89bb      	ldrh	r3, [r7, #12]
 800adc4:	059b      	lsls	r3, r3, #22
 800adc6:	d402      	bmi.n	800adce <_vfiprintf_r+0x206>
 800adc8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800adca:	f7fe f88b 	bl	8008ee4 <__retarget_lock_release_recursive>
 800adce:	89bb      	ldrh	r3, [r7, #12]
 800add0:	065b      	lsls	r3, r3, #25
 800add2:	d500      	bpl.n	800add6 <_vfiprintf_r+0x20e>
 800add4:	e71d      	b.n	800ac12 <_vfiprintf_r+0x4a>
 800add6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800add8:	e71d      	b.n	800ac16 <_vfiprintf_r+0x4e>
 800adda:	aa07      	add	r2, sp, #28
 800addc:	9200      	str	r2, [sp, #0]
 800adde:	0021      	movs	r1, r4
 800ade0:	003a      	movs	r2, r7
 800ade2:	4b06      	ldr	r3, [pc, #24]	; (800adfc <_vfiprintf_r+0x234>)
 800ade4:	9803      	ldr	r0, [sp, #12]
 800ade6:	f7fd fd83 	bl	80088f0 <_printf_i>
 800adea:	e7e3      	b.n	800adb4 <_vfiprintf_r+0x1ec>
 800adec:	0800d584 	.word	0x0800d584
 800adf0:	0800d58a 	.word	0x0800d58a
 800adf4:	0800d58e 	.word	0x0800d58e
 800adf8:	08008365 	.word	0x08008365
 800adfc:	0800aba5 	.word	0x0800aba5

0800ae00 <__swbuf_r>:
 800ae00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae02:	0006      	movs	r6, r0
 800ae04:	000d      	movs	r5, r1
 800ae06:	0014      	movs	r4, r2
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d004      	beq.n	800ae16 <__swbuf_r+0x16>
 800ae0c:	6a03      	ldr	r3, [r0, #32]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d101      	bne.n	800ae16 <__swbuf_r+0x16>
 800ae12:	f7fd ff0d 	bl	8008c30 <__sinit>
 800ae16:	69a3      	ldr	r3, [r4, #24]
 800ae18:	60a3      	str	r3, [r4, #8]
 800ae1a:	89a3      	ldrh	r3, [r4, #12]
 800ae1c:	071b      	lsls	r3, r3, #28
 800ae1e:	d528      	bpl.n	800ae72 <__swbuf_r+0x72>
 800ae20:	6923      	ldr	r3, [r4, #16]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d025      	beq.n	800ae72 <__swbuf_r+0x72>
 800ae26:	6923      	ldr	r3, [r4, #16]
 800ae28:	6820      	ldr	r0, [r4, #0]
 800ae2a:	b2ef      	uxtb	r7, r5
 800ae2c:	1ac0      	subs	r0, r0, r3
 800ae2e:	6963      	ldr	r3, [r4, #20]
 800ae30:	b2ed      	uxtb	r5, r5
 800ae32:	4283      	cmp	r3, r0
 800ae34:	dc05      	bgt.n	800ae42 <__swbuf_r+0x42>
 800ae36:	0021      	movs	r1, r4
 800ae38:	0030      	movs	r0, r6
 800ae3a:	f7ff fd8b 	bl	800a954 <_fflush_r>
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	d11d      	bne.n	800ae7e <__swbuf_r+0x7e>
 800ae42:	68a3      	ldr	r3, [r4, #8]
 800ae44:	3001      	adds	r0, #1
 800ae46:	3b01      	subs	r3, #1
 800ae48:	60a3      	str	r3, [r4, #8]
 800ae4a:	6823      	ldr	r3, [r4, #0]
 800ae4c:	1c5a      	adds	r2, r3, #1
 800ae4e:	6022      	str	r2, [r4, #0]
 800ae50:	701f      	strb	r7, [r3, #0]
 800ae52:	6963      	ldr	r3, [r4, #20]
 800ae54:	4283      	cmp	r3, r0
 800ae56:	d004      	beq.n	800ae62 <__swbuf_r+0x62>
 800ae58:	89a3      	ldrh	r3, [r4, #12]
 800ae5a:	07db      	lsls	r3, r3, #31
 800ae5c:	d507      	bpl.n	800ae6e <__swbuf_r+0x6e>
 800ae5e:	2d0a      	cmp	r5, #10
 800ae60:	d105      	bne.n	800ae6e <__swbuf_r+0x6e>
 800ae62:	0021      	movs	r1, r4
 800ae64:	0030      	movs	r0, r6
 800ae66:	f7ff fd75 	bl	800a954 <_fflush_r>
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	d107      	bne.n	800ae7e <__swbuf_r+0x7e>
 800ae6e:	0028      	movs	r0, r5
 800ae70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae72:	0021      	movs	r1, r4
 800ae74:	0030      	movs	r0, r6
 800ae76:	f000 f805 	bl	800ae84 <__swsetup_r>
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	d0d3      	beq.n	800ae26 <__swbuf_r+0x26>
 800ae7e:	2501      	movs	r5, #1
 800ae80:	426d      	negs	r5, r5
 800ae82:	e7f4      	b.n	800ae6e <__swbuf_r+0x6e>

0800ae84 <__swsetup_r>:
 800ae84:	4b30      	ldr	r3, [pc, #192]	; (800af48 <__swsetup_r+0xc4>)
 800ae86:	b570      	push	{r4, r5, r6, lr}
 800ae88:	0005      	movs	r5, r0
 800ae8a:	6818      	ldr	r0, [r3, #0]
 800ae8c:	000c      	movs	r4, r1
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d004      	beq.n	800ae9c <__swsetup_r+0x18>
 800ae92:	6a03      	ldr	r3, [r0, #32]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d101      	bne.n	800ae9c <__swsetup_r+0x18>
 800ae98:	f7fd feca 	bl	8008c30 <__sinit>
 800ae9c:	230c      	movs	r3, #12
 800ae9e:	5ee2      	ldrsh	r2, [r4, r3]
 800aea0:	b293      	uxth	r3, r2
 800aea2:	0711      	lsls	r1, r2, #28
 800aea4:	d423      	bmi.n	800aeee <__swsetup_r+0x6a>
 800aea6:	06d9      	lsls	r1, r3, #27
 800aea8:	d407      	bmi.n	800aeba <__swsetup_r+0x36>
 800aeaa:	2309      	movs	r3, #9
 800aeac:	2001      	movs	r0, #1
 800aeae:	602b      	str	r3, [r5, #0]
 800aeb0:	3337      	adds	r3, #55	; 0x37
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	81a3      	strh	r3, [r4, #12]
 800aeb6:	4240      	negs	r0, r0
 800aeb8:	bd70      	pop	{r4, r5, r6, pc}
 800aeba:	075b      	lsls	r3, r3, #29
 800aebc:	d513      	bpl.n	800aee6 <__swsetup_r+0x62>
 800aebe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aec0:	2900      	cmp	r1, #0
 800aec2:	d008      	beq.n	800aed6 <__swsetup_r+0x52>
 800aec4:	0023      	movs	r3, r4
 800aec6:	3344      	adds	r3, #68	; 0x44
 800aec8:	4299      	cmp	r1, r3
 800aeca:	d002      	beq.n	800aed2 <__swsetup_r+0x4e>
 800aecc:	0028      	movs	r0, r5
 800aece:	f7fe feb3 	bl	8009c38 <_free_r>
 800aed2:	2300      	movs	r3, #0
 800aed4:	6363      	str	r3, [r4, #52]	; 0x34
 800aed6:	2224      	movs	r2, #36	; 0x24
 800aed8:	89a3      	ldrh	r3, [r4, #12]
 800aeda:	4393      	bics	r3, r2
 800aedc:	81a3      	strh	r3, [r4, #12]
 800aede:	2300      	movs	r3, #0
 800aee0:	6063      	str	r3, [r4, #4]
 800aee2:	6923      	ldr	r3, [r4, #16]
 800aee4:	6023      	str	r3, [r4, #0]
 800aee6:	2308      	movs	r3, #8
 800aee8:	89a2      	ldrh	r2, [r4, #12]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	81a3      	strh	r3, [r4, #12]
 800aeee:	6923      	ldr	r3, [r4, #16]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d10b      	bne.n	800af0c <__swsetup_r+0x88>
 800aef4:	21a0      	movs	r1, #160	; 0xa0
 800aef6:	2280      	movs	r2, #128	; 0x80
 800aef8:	89a3      	ldrh	r3, [r4, #12]
 800aefa:	0089      	lsls	r1, r1, #2
 800aefc:	0092      	lsls	r2, r2, #2
 800aefe:	400b      	ands	r3, r1
 800af00:	4293      	cmp	r3, r2
 800af02:	d003      	beq.n	800af0c <__swsetup_r+0x88>
 800af04:	0021      	movs	r1, r4
 800af06:	0028      	movs	r0, r5
 800af08:	f000 f892 	bl	800b030 <__smakebuf_r>
 800af0c:	220c      	movs	r2, #12
 800af0e:	5ea3      	ldrsh	r3, [r4, r2]
 800af10:	2001      	movs	r0, #1
 800af12:	001a      	movs	r2, r3
 800af14:	b299      	uxth	r1, r3
 800af16:	4002      	ands	r2, r0
 800af18:	4203      	tst	r3, r0
 800af1a:	d00f      	beq.n	800af3c <__swsetup_r+0xb8>
 800af1c:	2200      	movs	r2, #0
 800af1e:	60a2      	str	r2, [r4, #8]
 800af20:	6962      	ldr	r2, [r4, #20]
 800af22:	4252      	negs	r2, r2
 800af24:	61a2      	str	r2, [r4, #24]
 800af26:	2000      	movs	r0, #0
 800af28:	6922      	ldr	r2, [r4, #16]
 800af2a:	4282      	cmp	r2, r0
 800af2c:	d1c4      	bne.n	800aeb8 <__swsetup_r+0x34>
 800af2e:	0609      	lsls	r1, r1, #24
 800af30:	d5c2      	bpl.n	800aeb8 <__swsetup_r+0x34>
 800af32:	2240      	movs	r2, #64	; 0x40
 800af34:	4313      	orrs	r3, r2
 800af36:	81a3      	strh	r3, [r4, #12]
 800af38:	3801      	subs	r0, #1
 800af3a:	e7bd      	b.n	800aeb8 <__swsetup_r+0x34>
 800af3c:	0788      	lsls	r0, r1, #30
 800af3e:	d400      	bmi.n	800af42 <__swsetup_r+0xbe>
 800af40:	6962      	ldr	r2, [r4, #20]
 800af42:	60a2      	str	r2, [r4, #8]
 800af44:	e7ef      	b.n	800af26 <__swsetup_r+0xa2>
 800af46:	46c0      	nop			; (mov r8, r8)
 800af48:	20000080 	.word	0x20000080

0800af4c <_raise_r>:
 800af4c:	b570      	push	{r4, r5, r6, lr}
 800af4e:	0004      	movs	r4, r0
 800af50:	000d      	movs	r5, r1
 800af52:	291f      	cmp	r1, #31
 800af54:	d904      	bls.n	800af60 <_raise_r+0x14>
 800af56:	2316      	movs	r3, #22
 800af58:	6003      	str	r3, [r0, #0]
 800af5a:	2001      	movs	r0, #1
 800af5c:	4240      	negs	r0, r0
 800af5e:	bd70      	pop	{r4, r5, r6, pc}
 800af60:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800af62:	2b00      	cmp	r3, #0
 800af64:	d004      	beq.n	800af70 <_raise_r+0x24>
 800af66:	008a      	lsls	r2, r1, #2
 800af68:	189b      	adds	r3, r3, r2
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	2a00      	cmp	r2, #0
 800af6e:	d108      	bne.n	800af82 <_raise_r+0x36>
 800af70:	0020      	movs	r0, r4
 800af72:	f000 f831 	bl	800afd8 <_getpid_r>
 800af76:	002a      	movs	r2, r5
 800af78:	0001      	movs	r1, r0
 800af7a:	0020      	movs	r0, r4
 800af7c:	f000 f81a 	bl	800afb4 <_kill_r>
 800af80:	e7ed      	b.n	800af5e <_raise_r+0x12>
 800af82:	2000      	movs	r0, #0
 800af84:	2a01      	cmp	r2, #1
 800af86:	d0ea      	beq.n	800af5e <_raise_r+0x12>
 800af88:	1c51      	adds	r1, r2, #1
 800af8a:	d103      	bne.n	800af94 <_raise_r+0x48>
 800af8c:	2316      	movs	r3, #22
 800af8e:	3001      	adds	r0, #1
 800af90:	6023      	str	r3, [r4, #0]
 800af92:	e7e4      	b.n	800af5e <_raise_r+0x12>
 800af94:	2400      	movs	r4, #0
 800af96:	0028      	movs	r0, r5
 800af98:	601c      	str	r4, [r3, #0]
 800af9a:	4790      	blx	r2
 800af9c:	0020      	movs	r0, r4
 800af9e:	e7de      	b.n	800af5e <_raise_r+0x12>

0800afa0 <raise>:
 800afa0:	b510      	push	{r4, lr}
 800afa2:	4b03      	ldr	r3, [pc, #12]	; (800afb0 <raise+0x10>)
 800afa4:	0001      	movs	r1, r0
 800afa6:	6818      	ldr	r0, [r3, #0]
 800afa8:	f7ff ffd0 	bl	800af4c <_raise_r>
 800afac:	bd10      	pop	{r4, pc}
 800afae:	46c0      	nop			; (mov r8, r8)
 800afb0:	20000080 	.word	0x20000080

0800afb4 <_kill_r>:
 800afb4:	2300      	movs	r3, #0
 800afb6:	b570      	push	{r4, r5, r6, lr}
 800afb8:	4d06      	ldr	r5, [pc, #24]	; (800afd4 <_kill_r+0x20>)
 800afba:	0004      	movs	r4, r0
 800afbc:	0008      	movs	r0, r1
 800afbe:	0011      	movs	r1, r2
 800afc0:	602b      	str	r3, [r5, #0]
 800afc2:	f7f9 fa03 	bl	80043cc <_kill>
 800afc6:	1c43      	adds	r3, r0, #1
 800afc8:	d103      	bne.n	800afd2 <_kill_r+0x1e>
 800afca:	682b      	ldr	r3, [r5, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d000      	beq.n	800afd2 <_kill_r+0x1e>
 800afd0:	6023      	str	r3, [r4, #0]
 800afd2:	bd70      	pop	{r4, r5, r6, pc}
 800afd4:	200009bc 	.word	0x200009bc

0800afd8 <_getpid_r>:
 800afd8:	b510      	push	{r4, lr}
 800afda:	f7f9 f9f1 	bl	80043c0 <_getpid>
 800afde:	bd10      	pop	{r4, pc}

0800afe0 <__swhatbuf_r>:
 800afe0:	b570      	push	{r4, r5, r6, lr}
 800afe2:	000e      	movs	r6, r1
 800afe4:	001d      	movs	r5, r3
 800afe6:	230e      	movs	r3, #14
 800afe8:	5ec9      	ldrsh	r1, [r1, r3]
 800afea:	0014      	movs	r4, r2
 800afec:	b096      	sub	sp, #88	; 0x58
 800afee:	2900      	cmp	r1, #0
 800aff0:	da0c      	bge.n	800b00c <__swhatbuf_r+0x2c>
 800aff2:	89b2      	ldrh	r2, [r6, #12]
 800aff4:	2380      	movs	r3, #128	; 0x80
 800aff6:	0011      	movs	r1, r2
 800aff8:	4019      	ands	r1, r3
 800affa:	421a      	tst	r2, r3
 800affc:	d013      	beq.n	800b026 <__swhatbuf_r+0x46>
 800affe:	2100      	movs	r1, #0
 800b000:	3b40      	subs	r3, #64	; 0x40
 800b002:	2000      	movs	r0, #0
 800b004:	6029      	str	r1, [r5, #0]
 800b006:	6023      	str	r3, [r4, #0]
 800b008:	b016      	add	sp, #88	; 0x58
 800b00a:	bd70      	pop	{r4, r5, r6, pc}
 800b00c:	466a      	mov	r2, sp
 800b00e:	f000 f84d 	bl	800b0ac <_fstat_r>
 800b012:	2800      	cmp	r0, #0
 800b014:	dbed      	blt.n	800aff2 <__swhatbuf_r+0x12>
 800b016:	23f0      	movs	r3, #240	; 0xf0
 800b018:	9901      	ldr	r1, [sp, #4]
 800b01a:	021b      	lsls	r3, r3, #8
 800b01c:	4019      	ands	r1, r3
 800b01e:	4b03      	ldr	r3, [pc, #12]	; (800b02c <__swhatbuf_r+0x4c>)
 800b020:	18c9      	adds	r1, r1, r3
 800b022:	424b      	negs	r3, r1
 800b024:	4159      	adcs	r1, r3
 800b026:	2380      	movs	r3, #128	; 0x80
 800b028:	00db      	lsls	r3, r3, #3
 800b02a:	e7ea      	b.n	800b002 <__swhatbuf_r+0x22>
 800b02c:	ffffe000 	.word	0xffffe000

0800b030 <__smakebuf_r>:
 800b030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b032:	2602      	movs	r6, #2
 800b034:	898b      	ldrh	r3, [r1, #12]
 800b036:	0005      	movs	r5, r0
 800b038:	000c      	movs	r4, r1
 800b03a:	4233      	tst	r3, r6
 800b03c:	d006      	beq.n	800b04c <__smakebuf_r+0x1c>
 800b03e:	0023      	movs	r3, r4
 800b040:	3347      	adds	r3, #71	; 0x47
 800b042:	6023      	str	r3, [r4, #0]
 800b044:	6123      	str	r3, [r4, #16]
 800b046:	2301      	movs	r3, #1
 800b048:	6163      	str	r3, [r4, #20]
 800b04a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b04c:	466a      	mov	r2, sp
 800b04e:	ab01      	add	r3, sp, #4
 800b050:	f7ff ffc6 	bl	800afe0 <__swhatbuf_r>
 800b054:	9900      	ldr	r1, [sp, #0]
 800b056:	0007      	movs	r7, r0
 800b058:	0028      	movs	r0, r5
 800b05a:	f7fe fe63 	bl	8009d24 <_malloc_r>
 800b05e:	2800      	cmp	r0, #0
 800b060:	d108      	bne.n	800b074 <__smakebuf_r+0x44>
 800b062:	220c      	movs	r2, #12
 800b064:	5ea3      	ldrsh	r3, [r4, r2]
 800b066:	059a      	lsls	r2, r3, #22
 800b068:	d4ef      	bmi.n	800b04a <__smakebuf_r+0x1a>
 800b06a:	2203      	movs	r2, #3
 800b06c:	4393      	bics	r3, r2
 800b06e:	431e      	orrs	r6, r3
 800b070:	81a6      	strh	r6, [r4, #12]
 800b072:	e7e4      	b.n	800b03e <__smakebuf_r+0xe>
 800b074:	2380      	movs	r3, #128	; 0x80
 800b076:	89a2      	ldrh	r2, [r4, #12]
 800b078:	6020      	str	r0, [r4, #0]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	81a3      	strh	r3, [r4, #12]
 800b07e:	9b00      	ldr	r3, [sp, #0]
 800b080:	6120      	str	r0, [r4, #16]
 800b082:	6163      	str	r3, [r4, #20]
 800b084:	9b01      	ldr	r3, [sp, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00c      	beq.n	800b0a4 <__smakebuf_r+0x74>
 800b08a:	0028      	movs	r0, r5
 800b08c:	230e      	movs	r3, #14
 800b08e:	5ee1      	ldrsh	r1, [r4, r3]
 800b090:	f000 f81e 	bl	800b0d0 <_isatty_r>
 800b094:	2800      	cmp	r0, #0
 800b096:	d005      	beq.n	800b0a4 <__smakebuf_r+0x74>
 800b098:	2303      	movs	r3, #3
 800b09a:	89a2      	ldrh	r2, [r4, #12]
 800b09c:	439a      	bics	r2, r3
 800b09e:	3b02      	subs	r3, #2
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	81a3      	strh	r3, [r4, #12]
 800b0a4:	89a3      	ldrh	r3, [r4, #12]
 800b0a6:	433b      	orrs	r3, r7
 800b0a8:	81a3      	strh	r3, [r4, #12]
 800b0aa:	e7ce      	b.n	800b04a <__smakebuf_r+0x1a>

0800b0ac <_fstat_r>:
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	b570      	push	{r4, r5, r6, lr}
 800b0b0:	4d06      	ldr	r5, [pc, #24]	; (800b0cc <_fstat_r+0x20>)
 800b0b2:	0004      	movs	r4, r0
 800b0b4:	0008      	movs	r0, r1
 800b0b6:	0011      	movs	r1, r2
 800b0b8:	602b      	str	r3, [r5, #0]
 800b0ba:	f7f9 f9e6 	bl	800448a <_fstat>
 800b0be:	1c43      	adds	r3, r0, #1
 800b0c0:	d103      	bne.n	800b0ca <_fstat_r+0x1e>
 800b0c2:	682b      	ldr	r3, [r5, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d000      	beq.n	800b0ca <_fstat_r+0x1e>
 800b0c8:	6023      	str	r3, [r4, #0]
 800b0ca:	bd70      	pop	{r4, r5, r6, pc}
 800b0cc:	200009bc 	.word	0x200009bc

0800b0d0 <_isatty_r>:
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	b570      	push	{r4, r5, r6, lr}
 800b0d4:	4d06      	ldr	r5, [pc, #24]	; (800b0f0 <_isatty_r+0x20>)
 800b0d6:	0004      	movs	r4, r0
 800b0d8:	0008      	movs	r0, r1
 800b0da:	602b      	str	r3, [r5, #0]
 800b0dc:	f7f9 f9e3 	bl	80044a6 <_isatty>
 800b0e0:	1c43      	adds	r3, r0, #1
 800b0e2:	d103      	bne.n	800b0ec <_isatty_r+0x1c>
 800b0e4:	682b      	ldr	r3, [r5, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d000      	beq.n	800b0ec <_isatty_r+0x1c>
 800b0ea:	6023      	str	r3, [r4, #0]
 800b0ec:	bd70      	pop	{r4, r5, r6, pc}
 800b0ee:	46c0      	nop			; (mov r8, r8)
 800b0f0:	200009bc 	.word	0x200009bc

0800b0f4 <log10>:
 800b0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f6:	0004      	movs	r4, r0
 800b0f8:	000d      	movs	r5, r1
 800b0fa:	f000 f9bf 	bl	800b47c <__ieee754_log10>
 800b0fe:	0022      	movs	r2, r4
 800b100:	0006      	movs	r6, r0
 800b102:	000f      	movs	r7, r1
 800b104:	002b      	movs	r3, r5
 800b106:	0020      	movs	r0, r4
 800b108:	0029      	movs	r1, r5
 800b10a:	f7f7 fdc9 	bl	8002ca0 <__aeabi_dcmpun>
 800b10e:	2800      	cmp	r0, #0
 800b110:	d115      	bne.n	800b13e <log10+0x4a>
 800b112:	2200      	movs	r2, #0
 800b114:	2300      	movs	r3, #0
 800b116:	0020      	movs	r0, r4
 800b118:	0029      	movs	r1, r5
 800b11a:	f7f5 f9a7 	bl	800046c <__aeabi_dcmple>
 800b11e:	2800      	cmp	r0, #0
 800b120:	d00d      	beq.n	800b13e <log10+0x4a>
 800b122:	2200      	movs	r2, #0
 800b124:	2300      	movs	r3, #0
 800b126:	0020      	movs	r0, r4
 800b128:	0029      	movs	r1, r5
 800b12a:	f7f5 f98f 	bl	800044c <__aeabi_dcmpeq>
 800b12e:	2800      	cmp	r0, #0
 800b130:	d008      	beq.n	800b144 <log10+0x50>
 800b132:	f7fd feab 	bl	8008e8c <__errno>
 800b136:	2322      	movs	r3, #34	; 0x22
 800b138:	2600      	movs	r6, #0
 800b13a:	4f07      	ldr	r7, [pc, #28]	; (800b158 <log10+0x64>)
 800b13c:	6003      	str	r3, [r0, #0]
 800b13e:	0030      	movs	r0, r6
 800b140:	0039      	movs	r1, r7
 800b142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b144:	f7fd fea2 	bl	8008e8c <__errno>
 800b148:	2321      	movs	r3, #33	; 0x21
 800b14a:	6003      	str	r3, [r0, #0]
 800b14c:	4803      	ldr	r0, [pc, #12]	; (800b15c <log10+0x68>)
 800b14e:	f000 f8a3 	bl	800b298 <nan>
 800b152:	0006      	movs	r6, r0
 800b154:	000f      	movs	r7, r1
 800b156:	e7f2      	b.n	800b13e <log10+0x4a>
 800b158:	fff00000 	.word	0xfff00000
 800b15c:	0800d5da 	.word	0x0800d5da

0800b160 <pow>:
 800b160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b162:	0014      	movs	r4, r2
 800b164:	001d      	movs	r5, r3
 800b166:	9000      	str	r0, [sp, #0]
 800b168:	9101      	str	r1, [sp, #4]
 800b16a:	f000 fa09 	bl	800b580 <__ieee754_pow>
 800b16e:	0022      	movs	r2, r4
 800b170:	0006      	movs	r6, r0
 800b172:	000f      	movs	r7, r1
 800b174:	002b      	movs	r3, r5
 800b176:	0020      	movs	r0, r4
 800b178:	0029      	movs	r1, r5
 800b17a:	f7f7 fd91 	bl	8002ca0 <__aeabi_dcmpun>
 800b17e:	2800      	cmp	r0, #0
 800b180:	d13f      	bne.n	800b202 <pow+0xa2>
 800b182:	9800      	ldr	r0, [sp, #0]
 800b184:	9901      	ldr	r1, [sp, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	2300      	movs	r3, #0
 800b18a:	f7f5 f95f 	bl	800044c <__aeabi_dcmpeq>
 800b18e:	2800      	cmp	r0, #0
 800b190:	d019      	beq.n	800b1c6 <pow+0x66>
 800b192:	2200      	movs	r2, #0
 800b194:	2300      	movs	r3, #0
 800b196:	0020      	movs	r0, r4
 800b198:	0029      	movs	r1, r5
 800b19a:	f7f5 f957 	bl	800044c <__aeabi_dcmpeq>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d146      	bne.n	800b230 <pow+0xd0>
 800b1a2:	0020      	movs	r0, r4
 800b1a4:	0029      	movs	r1, r5
 800b1a6:	f000 f86f 	bl	800b288 <finite>
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	d029      	beq.n	800b202 <pow+0xa2>
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	0020      	movs	r0, r4
 800b1b4:	0029      	movs	r1, r5
 800b1b6:	f7f5 f94f 	bl	8000458 <__aeabi_dcmplt>
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	d021      	beq.n	800b202 <pow+0xa2>
 800b1be:	f7fd fe65 	bl	8008e8c <__errno>
 800b1c2:	2322      	movs	r3, #34	; 0x22
 800b1c4:	e01c      	b.n	800b200 <pow+0xa0>
 800b1c6:	0030      	movs	r0, r6
 800b1c8:	0039      	movs	r1, r7
 800b1ca:	f000 f85d 	bl	800b288 <finite>
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	d11b      	bne.n	800b20a <pow+0xaa>
 800b1d2:	9800      	ldr	r0, [sp, #0]
 800b1d4:	9901      	ldr	r1, [sp, #4]
 800b1d6:	f000 f857 	bl	800b288 <finite>
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	d015      	beq.n	800b20a <pow+0xaa>
 800b1de:	0020      	movs	r0, r4
 800b1e0:	0029      	movs	r1, r5
 800b1e2:	f000 f851 	bl	800b288 <finite>
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	d00f      	beq.n	800b20a <pow+0xaa>
 800b1ea:	0032      	movs	r2, r6
 800b1ec:	003b      	movs	r3, r7
 800b1ee:	0030      	movs	r0, r6
 800b1f0:	0039      	movs	r1, r7
 800b1f2:	f7f7 fd55 	bl	8002ca0 <__aeabi_dcmpun>
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	d0e1      	beq.n	800b1be <pow+0x5e>
 800b1fa:	f7fd fe47 	bl	8008e8c <__errno>
 800b1fe:	2321      	movs	r3, #33	; 0x21
 800b200:	6003      	str	r3, [r0, #0]
 800b202:	0030      	movs	r0, r6
 800b204:	0039      	movs	r1, r7
 800b206:	b003      	add	sp, #12
 800b208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b20a:	2200      	movs	r2, #0
 800b20c:	2300      	movs	r3, #0
 800b20e:	0030      	movs	r0, r6
 800b210:	0039      	movs	r1, r7
 800b212:	f7f5 f91b 	bl	800044c <__aeabi_dcmpeq>
 800b216:	2800      	cmp	r0, #0
 800b218:	d0f3      	beq.n	800b202 <pow+0xa2>
 800b21a:	9800      	ldr	r0, [sp, #0]
 800b21c:	9901      	ldr	r1, [sp, #4]
 800b21e:	f000 f833 	bl	800b288 <finite>
 800b222:	2800      	cmp	r0, #0
 800b224:	d0ed      	beq.n	800b202 <pow+0xa2>
 800b226:	0020      	movs	r0, r4
 800b228:	0029      	movs	r1, r5
 800b22a:	f000 f82d 	bl	800b288 <finite>
 800b22e:	e7c4      	b.n	800b1ba <pow+0x5a>
 800b230:	2600      	movs	r6, #0
 800b232:	4f01      	ldr	r7, [pc, #4]	; (800b238 <pow+0xd8>)
 800b234:	e7e5      	b.n	800b202 <pow+0xa2>
 800b236:	46c0      	nop			; (mov r8, r8)
 800b238:	3ff00000 	.word	0x3ff00000

0800b23c <sqrt>:
 800b23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b23e:	0004      	movs	r4, r0
 800b240:	000d      	movs	r5, r1
 800b242:	f000 f82f 	bl	800b2a4 <__ieee754_sqrt>
 800b246:	0022      	movs	r2, r4
 800b248:	0006      	movs	r6, r0
 800b24a:	000f      	movs	r7, r1
 800b24c:	002b      	movs	r3, r5
 800b24e:	0020      	movs	r0, r4
 800b250:	0029      	movs	r1, r5
 800b252:	f7f7 fd25 	bl	8002ca0 <__aeabi_dcmpun>
 800b256:	2800      	cmp	r0, #0
 800b258:	d113      	bne.n	800b282 <sqrt+0x46>
 800b25a:	2200      	movs	r2, #0
 800b25c:	2300      	movs	r3, #0
 800b25e:	0020      	movs	r0, r4
 800b260:	0029      	movs	r1, r5
 800b262:	f7f5 f8f9 	bl	8000458 <__aeabi_dcmplt>
 800b266:	2800      	cmp	r0, #0
 800b268:	d00b      	beq.n	800b282 <sqrt+0x46>
 800b26a:	f7fd fe0f 	bl	8008e8c <__errno>
 800b26e:	2321      	movs	r3, #33	; 0x21
 800b270:	2200      	movs	r2, #0
 800b272:	6003      	str	r3, [r0, #0]
 800b274:	2300      	movs	r3, #0
 800b276:	0010      	movs	r0, r2
 800b278:	0019      	movs	r1, r3
 800b27a:	f7f6 fad3 	bl	8001824 <__aeabi_ddiv>
 800b27e:	0006      	movs	r6, r0
 800b280:	000f      	movs	r7, r1
 800b282:	0030      	movs	r0, r6
 800b284:	0039      	movs	r1, r7
 800b286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b288 <finite>:
 800b288:	4b02      	ldr	r3, [pc, #8]	; (800b294 <finite+0xc>)
 800b28a:	0048      	lsls	r0, r1, #1
 800b28c:	0840      	lsrs	r0, r0, #1
 800b28e:	18c0      	adds	r0, r0, r3
 800b290:	0fc0      	lsrs	r0, r0, #31
 800b292:	4770      	bx	lr
 800b294:	80100000 	.word	0x80100000

0800b298 <nan>:
 800b298:	2000      	movs	r0, #0
 800b29a:	4901      	ldr	r1, [pc, #4]	; (800b2a0 <nan+0x8>)
 800b29c:	4770      	bx	lr
 800b29e:	46c0      	nop			; (mov r8, r8)
 800b2a0:	7ff80000 	.word	0x7ff80000

0800b2a4 <__ieee754_sqrt>:
 800b2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2a6:	000a      	movs	r2, r1
 800b2a8:	000c      	movs	r4, r1
 800b2aa:	496f      	ldr	r1, [pc, #444]	; (800b468 <__ieee754_sqrt+0x1c4>)
 800b2ac:	0005      	movs	r5, r0
 800b2ae:	0003      	movs	r3, r0
 800b2b0:	0008      	movs	r0, r1
 800b2b2:	b087      	sub	sp, #28
 800b2b4:	4020      	ands	r0, r4
 800b2b6:	4288      	cmp	r0, r1
 800b2b8:	d111      	bne.n	800b2de <__ieee754_sqrt+0x3a>
 800b2ba:	002a      	movs	r2, r5
 800b2bc:	0023      	movs	r3, r4
 800b2be:	0028      	movs	r0, r5
 800b2c0:	0021      	movs	r1, r4
 800b2c2:	f7f6 fea9 	bl	8002018 <__aeabi_dmul>
 800b2c6:	0002      	movs	r2, r0
 800b2c8:	000b      	movs	r3, r1
 800b2ca:	0028      	movs	r0, r5
 800b2cc:	0021      	movs	r1, r4
 800b2ce:	f7f5 ff49 	bl	8001164 <__aeabi_dadd>
 800b2d2:	0005      	movs	r5, r0
 800b2d4:	000c      	movs	r4, r1
 800b2d6:	0028      	movs	r0, r5
 800b2d8:	0021      	movs	r1, r4
 800b2da:	b007      	add	sp, #28
 800b2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2de:	2c00      	cmp	r4, #0
 800b2e0:	dc12      	bgt.n	800b308 <__ieee754_sqrt+0x64>
 800b2e2:	0061      	lsls	r1, r4, #1
 800b2e4:	0849      	lsrs	r1, r1, #1
 800b2e6:	4329      	orrs	r1, r5
 800b2e8:	d0f5      	beq.n	800b2d6 <__ieee754_sqrt+0x32>
 800b2ea:	2100      	movs	r1, #0
 800b2ec:	428c      	cmp	r4, r1
 800b2ee:	d100      	bne.n	800b2f2 <__ieee754_sqrt+0x4e>
 800b2f0:	e09f      	b.n	800b432 <__ieee754_sqrt+0x18e>
 800b2f2:	002a      	movs	r2, r5
 800b2f4:	0023      	movs	r3, r4
 800b2f6:	0028      	movs	r0, r5
 800b2f8:	0021      	movs	r1, r4
 800b2fa:	f7f7 f94f 	bl	800259c <__aeabi_dsub>
 800b2fe:	0002      	movs	r2, r0
 800b300:	000b      	movs	r3, r1
 800b302:	f7f6 fa8f 	bl	8001824 <__aeabi_ddiv>
 800b306:	e7e4      	b.n	800b2d2 <__ieee754_sqrt+0x2e>
 800b308:	1521      	asrs	r1, r4, #20
 800b30a:	d100      	bne.n	800b30e <__ieee754_sqrt+0x6a>
 800b30c:	e091      	b.n	800b432 <__ieee754_sqrt+0x18e>
 800b30e:	4857      	ldr	r0, [pc, #348]	; (800b46c <__ieee754_sqrt+0x1c8>)
 800b310:	0312      	lsls	r2, r2, #12
 800b312:	180c      	adds	r4, r1, r0
 800b314:	2080      	movs	r0, #128	; 0x80
 800b316:	0b12      	lsrs	r2, r2, #12
 800b318:	0340      	lsls	r0, r0, #13
 800b31a:	4310      	orrs	r0, r2
 800b31c:	07c9      	lsls	r1, r1, #31
 800b31e:	d403      	bmi.n	800b328 <__ieee754_sqrt+0x84>
 800b320:	0fda      	lsrs	r2, r3, #31
 800b322:	0040      	lsls	r0, r0, #1
 800b324:	1810      	adds	r0, r2, r0
 800b326:	005b      	lsls	r3, r3, #1
 800b328:	2500      	movs	r5, #0
 800b32a:	1062      	asrs	r2, r4, #1
 800b32c:	0040      	lsls	r0, r0, #1
 800b32e:	2480      	movs	r4, #128	; 0x80
 800b330:	9205      	str	r2, [sp, #20]
 800b332:	0fda      	lsrs	r2, r3, #31
 800b334:	1812      	adds	r2, r2, r0
 800b336:	0029      	movs	r1, r5
 800b338:	2016      	movs	r0, #22
 800b33a:	005b      	lsls	r3, r3, #1
 800b33c:	03a4      	lsls	r4, r4, #14
 800b33e:	190e      	adds	r6, r1, r4
 800b340:	4296      	cmp	r6, r2
 800b342:	dc02      	bgt.n	800b34a <__ieee754_sqrt+0xa6>
 800b344:	1931      	adds	r1, r6, r4
 800b346:	1b92      	subs	r2, r2, r6
 800b348:	192d      	adds	r5, r5, r4
 800b34a:	0fde      	lsrs	r6, r3, #31
 800b34c:	0052      	lsls	r2, r2, #1
 800b34e:	3801      	subs	r0, #1
 800b350:	18b2      	adds	r2, r6, r2
 800b352:	005b      	lsls	r3, r3, #1
 800b354:	0864      	lsrs	r4, r4, #1
 800b356:	2800      	cmp	r0, #0
 800b358:	d1f1      	bne.n	800b33e <__ieee754_sqrt+0x9a>
 800b35a:	2620      	movs	r6, #32
 800b35c:	2780      	movs	r7, #128	; 0x80
 800b35e:	0004      	movs	r4, r0
 800b360:	9604      	str	r6, [sp, #16]
 800b362:	063f      	lsls	r7, r7, #24
 800b364:	183e      	adds	r6, r7, r0
 800b366:	46b4      	mov	ip, r6
 800b368:	428a      	cmp	r2, r1
 800b36a:	dc02      	bgt.n	800b372 <__ieee754_sqrt+0xce>
 800b36c:	d114      	bne.n	800b398 <__ieee754_sqrt+0xf4>
 800b36e:	429e      	cmp	r6, r3
 800b370:	d812      	bhi.n	800b398 <__ieee754_sqrt+0xf4>
 800b372:	4660      	mov	r0, ip
 800b374:	4666      	mov	r6, ip
 800b376:	19c0      	adds	r0, r0, r7
 800b378:	9100      	str	r1, [sp, #0]
 800b37a:	2e00      	cmp	r6, #0
 800b37c:	da03      	bge.n	800b386 <__ieee754_sqrt+0xe2>
 800b37e:	43c6      	mvns	r6, r0
 800b380:	0ff6      	lsrs	r6, r6, #31
 800b382:	198e      	adds	r6, r1, r6
 800b384:	9600      	str	r6, [sp, #0]
 800b386:	1a52      	subs	r2, r2, r1
 800b388:	4563      	cmp	r3, ip
 800b38a:	4189      	sbcs	r1, r1
 800b38c:	4249      	negs	r1, r1
 800b38e:	1a52      	subs	r2, r2, r1
 800b390:	4661      	mov	r1, ip
 800b392:	1a5b      	subs	r3, r3, r1
 800b394:	9900      	ldr	r1, [sp, #0]
 800b396:	19e4      	adds	r4, r4, r7
 800b398:	0fde      	lsrs	r6, r3, #31
 800b39a:	0052      	lsls	r2, r2, #1
 800b39c:	18b2      	adds	r2, r6, r2
 800b39e:	9e04      	ldr	r6, [sp, #16]
 800b3a0:	005b      	lsls	r3, r3, #1
 800b3a2:	3e01      	subs	r6, #1
 800b3a4:	087f      	lsrs	r7, r7, #1
 800b3a6:	9604      	str	r6, [sp, #16]
 800b3a8:	2e00      	cmp	r6, #0
 800b3aa:	d1db      	bne.n	800b364 <__ieee754_sqrt+0xc0>
 800b3ac:	431a      	orrs	r2, r3
 800b3ae:	d01f      	beq.n	800b3f0 <__ieee754_sqrt+0x14c>
 800b3b0:	4e2f      	ldr	r6, [pc, #188]	; (800b470 <__ieee754_sqrt+0x1cc>)
 800b3b2:	4f30      	ldr	r7, [pc, #192]	; (800b474 <__ieee754_sqrt+0x1d0>)
 800b3b4:	6830      	ldr	r0, [r6, #0]
 800b3b6:	6871      	ldr	r1, [r6, #4]
 800b3b8:	683a      	ldr	r2, [r7, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	9200      	str	r2, [sp, #0]
 800b3be:	9301      	str	r3, [sp, #4]
 800b3c0:	6832      	ldr	r2, [r6, #0]
 800b3c2:	6873      	ldr	r3, [r6, #4]
 800b3c4:	9202      	str	r2, [sp, #8]
 800b3c6:	9303      	str	r3, [sp, #12]
 800b3c8:	9a00      	ldr	r2, [sp, #0]
 800b3ca:	9b01      	ldr	r3, [sp, #4]
 800b3cc:	f7f7 f8e6 	bl	800259c <__aeabi_dsub>
 800b3d0:	0002      	movs	r2, r0
 800b3d2:	000b      	movs	r3, r1
 800b3d4:	9802      	ldr	r0, [sp, #8]
 800b3d6:	9903      	ldr	r1, [sp, #12]
 800b3d8:	f7f5 f848 	bl	800046c <__aeabi_dcmple>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d007      	beq.n	800b3f0 <__ieee754_sqrt+0x14c>
 800b3e0:	6830      	ldr	r0, [r6, #0]
 800b3e2:	6871      	ldr	r1, [r6, #4]
 800b3e4:	683a      	ldr	r2, [r7, #0]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	1c67      	adds	r7, r4, #1
 800b3ea:	d127      	bne.n	800b43c <__ieee754_sqrt+0x198>
 800b3ec:	9c04      	ldr	r4, [sp, #16]
 800b3ee:	3501      	adds	r5, #1
 800b3f0:	4b21      	ldr	r3, [pc, #132]	; (800b478 <__ieee754_sqrt+0x1d4>)
 800b3f2:	1069      	asrs	r1, r5, #1
 800b3f4:	18c9      	adds	r1, r1, r3
 800b3f6:	0864      	lsrs	r4, r4, #1
 800b3f8:	07ed      	lsls	r5, r5, #31
 800b3fa:	d502      	bpl.n	800b402 <__ieee754_sqrt+0x15e>
 800b3fc:	2380      	movs	r3, #128	; 0x80
 800b3fe:	061b      	lsls	r3, r3, #24
 800b400:	431c      	orrs	r4, r3
 800b402:	9b05      	ldr	r3, [sp, #20]
 800b404:	0025      	movs	r5, r4
 800b406:	0518      	lsls	r0, r3, #20
 800b408:	1843      	adds	r3, r0, r1
 800b40a:	001c      	movs	r4, r3
 800b40c:	e763      	b.n	800b2d6 <__ieee754_sqrt+0x32>
 800b40e:	0ada      	lsrs	r2, r3, #11
 800b410:	3815      	subs	r0, #21
 800b412:	055b      	lsls	r3, r3, #21
 800b414:	2a00      	cmp	r2, #0
 800b416:	d0fa      	beq.n	800b40e <__ieee754_sqrt+0x16a>
 800b418:	2480      	movs	r4, #128	; 0x80
 800b41a:	0364      	lsls	r4, r4, #13
 800b41c:	4222      	tst	r2, r4
 800b41e:	d00a      	beq.n	800b436 <__ieee754_sqrt+0x192>
 800b420:	2420      	movs	r4, #32
 800b422:	001e      	movs	r6, r3
 800b424:	1a64      	subs	r4, r4, r1
 800b426:	40e6      	lsrs	r6, r4
 800b428:	1e4d      	subs	r5, r1, #1
 800b42a:	408b      	lsls	r3, r1
 800b42c:	4332      	orrs	r2, r6
 800b42e:	1b41      	subs	r1, r0, r5
 800b430:	e76d      	b.n	800b30e <__ieee754_sqrt+0x6a>
 800b432:	2000      	movs	r0, #0
 800b434:	e7ee      	b.n	800b414 <__ieee754_sqrt+0x170>
 800b436:	0052      	lsls	r2, r2, #1
 800b438:	3101      	adds	r1, #1
 800b43a:	e7ef      	b.n	800b41c <__ieee754_sqrt+0x178>
 800b43c:	f7f5 fe92 	bl	8001164 <__aeabi_dadd>
 800b440:	6877      	ldr	r7, [r6, #4]
 800b442:	6836      	ldr	r6, [r6, #0]
 800b444:	0002      	movs	r2, r0
 800b446:	000b      	movs	r3, r1
 800b448:	0030      	movs	r0, r6
 800b44a:	0039      	movs	r1, r7
 800b44c:	f7f5 f804 	bl	8000458 <__aeabi_dcmplt>
 800b450:	2800      	cmp	r0, #0
 800b452:	d004      	beq.n	800b45e <__ieee754_sqrt+0x1ba>
 800b454:	3402      	adds	r4, #2
 800b456:	4263      	negs	r3, r4
 800b458:	4163      	adcs	r3, r4
 800b45a:	18ed      	adds	r5, r5, r3
 800b45c:	e7c8      	b.n	800b3f0 <__ieee754_sqrt+0x14c>
 800b45e:	2301      	movs	r3, #1
 800b460:	3401      	adds	r4, #1
 800b462:	439c      	bics	r4, r3
 800b464:	e7c4      	b.n	800b3f0 <__ieee754_sqrt+0x14c>
 800b466:	46c0      	nop			; (mov r8, r8)
 800b468:	7ff00000 	.word	0x7ff00000
 800b46c:	fffffc01 	.word	0xfffffc01
 800b470:	200001f0 	.word	0x200001f0
 800b474:	200001f8 	.word	0x200001f8
 800b478:	3fe00000 	.word	0x3fe00000

0800b47c <__ieee754_log10>:
 800b47c:	2280      	movs	r2, #128	; 0x80
 800b47e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b480:	000b      	movs	r3, r1
 800b482:	0004      	movs	r4, r0
 800b484:	000d      	movs	r5, r1
 800b486:	b085      	sub	sp, #20
 800b488:	0352      	lsls	r2, r2, #13
 800b48a:	4291      	cmp	r1, r2
 800b48c:	da26      	bge.n	800b4dc <__ieee754_log10+0x60>
 800b48e:	004a      	lsls	r2, r1, #1
 800b490:	0852      	lsrs	r2, r2, #1
 800b492:	4302      	orrs	r2, r0
 800b494:	d107      	bne.n	800b4a6 <__ieee754_log10+0x2a>
 800b496:	2200      	movs	r2, #0
 800b498:	2300      	movs	r3, #0
 800b49a:	2000      	movs	r0, #0
 800b49c:	492d      	ldr	r1, [pc, #180]	; (800b554 <__ieee754_log10+0xd8>)
 800b49e:	f7f6 f9c1 	bl	8001824 <__aeabi_ddiv>
 800b4a2:	b005      	add	sp, #20
 800b4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4a6:	2900      	cmp	r1, #0
 800b4a8:	da05      	bge.n	800b4b6 <__ieee754_log10+0x3a>
 800b4aa:	0002      	movs	r2, r0
 800b4ac:	f7f7 f876 	bl	800259c <__aeabi_dsub>
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	e7f3      	b.n	800b49e <__ieee754_log10+0x22>
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	4b27      	ldr	r3, [pc, #156]	; (800b558 <__ieee754_log10+0xdc>)
 800b4ba:	f7f6 fdad 	bl	8002018 <__aeabi_dmul>
 800b4be:	2236      	movs	r2, #54	; 0x36
 800b4c0:	0004      	movs	r4, r0
 800b4c2:	000d      	movs	r5, r1
 800b4c4:	000b      	movs	r3, r1
 800b4c6:	4252      	negs	r2, r2
 800b4c8:	4924      	ldr	r1, [pc, #144]	; (800b55c <__ieee754_log10+0xe0>)
 800b4ca:	428b      	cmp	r3, r1
 800b4cc:	dd08      	ble.n	800b4e0 <__ieee754_log10+0x64>
 800b4ce:	0022      	movs	r2, r4
 800b4d0:	002b      	movs	r3, r5
 800b4d2:	0020      	movs	r0, r4
 800b4d4:	0029      	movs	r1, r5
 800b4d6:	f7f5 fe45 	bl	8001164 <__aeabi_dadd>
 800b4da:	e7e2      	b.n	800b4a2 <__ieee754_log10+0x26>
 800b4dc:	2200      	movs	r2, #0
 800b4de:	e7f3      	b.n	800b4c8 <__ieee754_log10+0x4c>
 800b4e0:	491f      	ldr	r1, [pc, #124]	; (800b560 <__ieee754_log10+0xe4>)
 800b4e2:	1518      	asrs	r0, r3, #20
 800b4e4:	1840      	adds	r0, r0, r1
 800b4e6:	1880      	adds	r0, r0, r2
 800b4e8:	0fc2      	lsrs	r2, r0, #31
 800b4ea:	031b      	lsls	r3, r3, #12
 800b4ec:	0b1b      	lsrs	r3, r3, #12
 800b4ee:	1880      	adds	r0, r0, r2
 800b4f0:	9203      	str	r2, [sp, #12]
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	f7f7 fc28 	bl	8002d48 <__aeabi_i2d>
 800b4f8:	9a03      	ldr	r2, [sp, #12]
 800b4fa:	4b1a      	ldr	r3, [pc, #104]	; (800b564 <__ieee754_log10+0xe8>)
 800b4fc:	0006      	movs	r6, r0
 800b4fe:	1a9b      	subs	r3, r3, r2
 800b500:	9a00      	ldr	r2, [sp, #0]
 800b502:	051b      	lsls	r3, r3, #20
 800b504:	431a      	orrs	r2, r3
 800b506:	000f      	movs	r7, r1
 800b508:	0020      	movs	r0, r4
 800b50a:	0011      	movs	r1, r2
 800b50c:	f000 fde2 	bl	800c0d4 <__ieee754_log>
 800b510:	4a15      	ldr	r2, [pc, #84]	; (800b568 <__ieee754_log10+0xec>)
 800b512:	0004      	movs	r4, r0
 800b514:	000d      	movs	r5, r1
 800b516:	4b15      	ldr	r3, [pc, #84]	; (800b56c <__ieee754_log10+0xf0>)
 800b518:	0030      	movs	r0, r6
 800b51a:	0039      	movs	r1, r7
 800b51c:	f7f6 fd7c 	bl	8002018 <__aeabi_dmul>
 800b520:	4a13      	ldr	r2, [pc, #76]	; (800b570 <__ieee754_log10+0xf4>)
 800b522:	9000      	str	r0, [sp, #0]
 800b524:	9101      	str	r1, [sp, #4]
 800b526:	4b13      	ldr	r3, [pc, #76]	; (800b574 <__ieee754_log10+0xf8>)
 800b528:	0020      	movs	r0, r4
 800b52a:	0029      	movs	r1, r5
 800b52c:	f7f6 fd74 	bl	8002018 <__aeabi_dmul>
 800b530:	0002      	movs	r2, r0
 800b532:	000b      	movs	r3, r1
 800b534:	9800      	ldr	r0, [sp, #0]
 800b536:	9901      	ldr	r1, [sp, #4]
 800b538:	f7f5 fe14 	bl	8001164 <__aeabi_dadd>
 800b53c:	4a0e      	ldr	r2, [pc, #56]	; (800b578 <__ieee754_log10+0xfc>)
 800b53e:	4b0f      	ldr	r3, [pc, #60]	; (800b57c <__ieee754_log10+0x100>)
 800b540:	0004      	movs	r4, r0
 800b542:	000d      	movs	r5, r1
 800b544:	0030      	movs	r0, r6
 800b546:	0039      	movs	r1, r7
 800b548:	f7f6 fd66 	bl	8002018 <__aeabi_dmul>
 800b54c:	0002      	movs	r2, r0
 800b54e:	000b      	movs	r3, r1
 800b550:	e7bf      	b.n	800b4d2 <__ieee754_log10+0x56>
 800b552:	46c0      	nop			; (mov r8, r8)
 800b554:	c3500000 	.word	0xc3500000
 800b558:	43500000 	.word	0x43500000
 800b55c:	7fefffff 	.word	0x7fefffff
 800b560:	fffffc01 	.word	0xfffffc01
 800b564:	000003ff 	.word	0x000003ff
 800b568:	11f12b36 	.word	0x11f12b36
 800b56c:	3d59fef3 	.word	0x3d59fef3
 800b570:	1526e50e 	.word	0x1526e50e
 800b574:	3fdbcb7b 	.word	0x3fdbcb7b
 800b578:	509f6000 	.word	0x509f6000
 800b57c:	3fd34413 	.word	0x3fd34413

0800b580 <__ieee754_pow>:
 800b580:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b582:	b095      	sub	sp, #84	; 0x54
 800b584:	9202      	str	r2, [sp, #8]
 800b586:	9303      	str	r3, [sp, #12]
 800b588:	9b03      	ldr	r3, [sp, #12]
 800b58a:	9a03      	ldr	r2, [sp, #12]
 800b58c:	9304      	str	r3, [sp, #16]
 800b58e:	9b02      	ldr	r3, [sp, #8]
 800b590:	0056      	lsls	r6, r2, #1
 800b592:	001a      	movs	r2, r3
 800b594:	0876      	lsrs	r6, r6, #1
 800b596:	0007      	movs	r7, r0
 800b598:	000d      	movs	r5, r1
 800b59a:	4332      	orrs	r2, r6
 800b59c:	d119      	bne.n	800b5d2 <__ieee754_pow+0x52>
 800b59e:	2180      	movs	r1, #128	; 0x80
 800b5a0:	0309      	lsls	r1, r1, #12
 800b5a2:	4069      	eors	r1, r5
 800b5a4:	0002      	movs	r2, r0
 800b5a6:	000b      	movs	r3, r1
 800b5a8:	1892      	adds	r2, r2, r2
 800b5aa:	415b      	adcs	r3, r3
 800b5ac:	4989      	ldr	r1, [pc, #548]	; (800b7d4 <__ieee754_pow+0x254>)
 800b5ae:	428b      	cmp	r3, r1
 800b5b0:	d806      	bhi.n	800b5c0 <__ieee754_pow+0x40>
 800b5b2:	d001      	beq.n	800b5b8 <__ieee754_pow+0x38>
 800b5b4:	f000 fcb6 	bl	800bf24 <__ieee754_pow+0x9a4>
 800b5b8:	2a00      	cmp	r2, #0
 800b5ba:	d101      	bne.n	800b5c0 <__ieee754_pow+0x40>
 800b5bc:	f000 fcb2 	bl	800bf24 <__ieee754_pow+0x9a4>
 800b5c0:	9a02      	ldr	r2, [sp, #8]
 800b5c2:	9b03      	ldr	r3, [sp, #12]
 800b5c4:	0038      	movs	r0, r7
 800b5c6:	0029      	movs	r1, r5
 800b5c8:	f7f5 fdcc 	bl	8001164 <__aeabi_dadd>
 800b5cc:	9000      	str	r0, [sp, #0]
 800b5ce:	9101      	str	r1, [sp, #4]
 800b5d0:	e0ad      	b.n	800b72e <__ieee754_pow+0x1ae>
 800b5d2:	4a81      	ldr	r2, [pc, #516]	; (800b7d8 <__ieee754_pow+0x258>)
 800b5d4:	004c      	lsls	r4, r1, #1
 800b5d6:	9108      	str	r1, [sp, #32]
 800b5d8:	9000      	str	r0, [sp, #0]
 800b5da:	0864      	lsrs	r4, r4, #1
 800b5dc:	4294      	cmp	r4, r2
 800b5de:	dc08      	bgt.n	800b5f2 <__ieee754_pow+0x72>
 800b5e0:	d101      	bne.n	800b5e6 <__ieee754_pow+0x66>
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	d1ec      	bne.n	800b5c0 <__ieee754_pow+0x40>
 800b5e6:	4a7c      	ldr	r2, [pc, #496]	; (800b7d8 <__ieee754_pow+0x258>)
 800b5e8:	4296      	cmp	r6, r2
 800b5ea:	dc02      	bgt.n	800b5f2 <__ieee754_pow+0x72>
 800b5ec:	d10c      	bne.n	800b608 <__ieee754_pow+0x88>
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d00a      	beq.n	800b608 <__ieee754_pow+0x88>
 800b5f2:	4b7a      	ldr	r3, [pc, #488]	; (800b7dc <__ieee754_pow+0x25c>)
 800b5f4:	18eb      	adds	r3, r5, r3
 800b5f6:	433b      	orrs	r3, r7
 800b5f8:	d1e2      	bne.n	800b5c0 <__ieee754_pow+0x40>
 800b5fa:	2180      	movs	r1, #128	; 0x80
 800b5fc:	9803      	ldr	r0, [sp, #12]
 800b5fe:	0309      	lsls	r1, r1, #12
 800b600:	4048      	eors	r0, r1
 800b602:	0003      	movs	r3, r0
 800b604:	9a02      	ldr	r2, [sp, #8]
 800b606:	e7cf      	b.n	800b5a8 <__ieee754_pow+0x28>
 800b608:	2200      	movs	r2, #0
 800b60a:	9206      	str	r2, [sp, #24]
 800b60c:	2d00      	cmp	r5, #0
 800b60e:	da69      	bge.n	800b6e4 <__ieee754_pow+0x164>
 800b610:	4a73      	ldr	r2, [pc, #460]	; (800b7e0 <__ieee754_pow+0x260>)
 800b612:	4296      	cmp	r6, r2
 800b614:	dc64      	bgt.n	800b6e0 <__ieee754_pow+0x160>
 800b616:	4a73      	ldr	r2, [pc, #460]	; (800b7e4 <__ieee754_pow+0x264>)
 800b618:	4296      	cmp	r6, r2
 800b61a:	dd11      	ble.n	800b640 <__ieee754_pow+0xc0>
 800b61c:	4972      	ldr	r1, [pc, #456]	; (800b7e8 <__ieee754_pow+0x268>)
 800b61e:	1532      	asrs	r2, r6, #20
 800b620:	1852      	adds	r2, r2, r1
 800b622:	2a14      	cmp	r2, #20
 800b624:	dd3c      	ble.n	800b6a0 <__ieee754_pow+0x120>
 800b626:	2134      	movs	r1, #52	; 0x34
 800b628:	1a89      	subs	r1, r1, r2
 800b62a:	9a02      	ldr	r2, [sp, #8]
 800b62c:	40ca      	lsrs	r2, r1
 800b62e:	0010      	movs	r0, r2
 800b630:	4088      	lsls	r0, r1
 800b632:	4298      	cmp	r0, r3
 800b634:	d104      	bne.n	800b640 <__ieee754_pow+0xc0>
 800b636:	2101      	movs	r1, #1
 800b638:	400a      	ands	r2, r1
 800b63a:	1849      	adds	r1, r1, r1
 800b63c:	1a8a      	subs	r2, r1, r2
 800b63e:	9206      	str	r2, [sp, #24]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d03c      	beq.n	800b6be <__ieee754_pow+0x13e>
 800b644:	0038      	movs	r0, r7
 800b646:	0029      	movs	r1, r5
 800b648:	f000 fca4 	bl	800bf94 <fabs>
 800b64c:	9000      	str	r0, [sp, #0]
 800b64e:	9101      	str	r1, [sp, #4]
 800b650:	2f00      	cmp	r7, #0
 800b652:	d000      	beq.n	800b656 <__ieee754_pow+0xd6>
 800b654:	e094      	b.n	800b780 <__ieee754_pow+0x200>
 800b656:	2c00      	cmp	r4, #0
 800b658:	d005      	beq.n	800b666 <__ieee754_pow+0xe6>
 800b65a:	4a64      	ldr	r2, [pc, #400]	; (800b7ec <__ieee754_pow+0x26c>)
 800b65c:	00ab      	lsls	r3, r5, #2
 800b65e:	089b      	lsrs	r3, r3, #2
 800b660:	4293      	cmp	r3, r2
 800b662:	d000      	beq.n	800b666 <__ieee754_pow+0xe6>
 800b664:	e08c      	b.n	800b780 <__ieee754_pow+0x200>
 800b666:	9b04      	ldr	r3, [sp, #16]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	da07      	bge.n	800b67c <__ieee754_pow+0xfc>
 800b66c:	9a00      	ldr	r2, [sp, #0]
 800b66e:	9b01      	ldr	r3, [sp, #4]
 800b670:	2000      	movs	r0, #0
 800b672:	495e      	ldr	r1, [pc, #376]	; (800b7ec <__ieee754_pow+0x26c>)
 800b674:	f7f6 f8d6 	bl	8001824 <__aeabi_ddiv>
 800b678:	9000      	str	r0, [sp, #0]
 800b67a:	9101      	str	r1, [sp, #4]
 800b67c:	9b08      	ldr	r3, [sp, #32]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	da55      	bge.n	800b72e <__ieee754_pow+0x1ae>
 800b682:	4b56      	ldr	r3, [pc, #344]	; (800b7dc <__ieee754_pow+0x25c>)
 800b684:	18e4      	adds	r4, r4, r3
 800b686:	9b06      	ldr	r3, [sp, #24]
 800b688:	431c      	orrs	r4, r3
 800b68a:	d000      	beq.n	800b68e <__ieee754_pow+0x10e>
 800b68c:	e06c      	b.n	800b768 <__ieee754_pow+0x1e8>
 800b68e:	9a00      	ldr	r2, [sp, #0]
 800b690:	9b01      	ldr	r3, [sp, #4]
 800b692:	0010      	movs	r0, r2
 800b694:	0019      	movs	r1, r3
 800b696:	f7f6 ff81 	bl	800259c <__aeabi_dsub>
 800b69a:	0002      	movs	r2, r0
 800b69c:	000b      	movs	r3, r1
 800b69e:	e01c      	b.n	800b6da <__ieee754_pow+0x15a>
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1cf      	bne.n	800b644 <__ieee754_pow+0xc4>
 800b6a4:	3314      	adds	r3, #20
 800b6a6:	1a9a      	subs	r2, r3, r2
 800b6a8:	0033      	movs	r3, r6
 800b6aa:	4113      	asrs	r3, r2
 800b6ac:	0019      	movs	r1, r3
 800b6ae:	4091      	lsls	r1, r2
 800b6b0:	42b1      	cmp	r1, r6
 800b6b2:	d104      	bne.n	800b6be <__ieee754_pow+0x13e>
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	4013      	ands	r3, r2
 800b6b8:	1892      	adds	r2, r2, r2
 800b6ba:	1ad3      	subs	r3, r2, r3
 800b6bc:	9306      	str	r3, [sp, #24]
 800b6be:	4b4b      	ldr	r3, [pc, #300]	; (800b7ec <__ieee754_pow+0x26c>)
 800b6c0:	429e      	cmp	r6, r3
 800b6c2:	d138      	bne.n	800b736 <__ieee754_pow+0x1b6>
 800b6c4:	0038      	movs	r0, r7
 800b6c6:	0029      	movs	r1, r5
 800b6c8:	9b04      	ldr	r3, [sp, #16]
 800b6ca:	9000      	str	r0, [sp, #0]
 800b6cc:	9101      	str	r1, [sp, #4]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	da2d      	bge.n	800b72e <__ieee754_pow+0x1ae>
 800b6d2:	003a      	movs	r2, r7
 800b6d4:	002b      	movs	r3, r5
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	4944      	ldr	r1, [pc, #272]	; (800b7ec <__ieee754_pow+0x26c>)
 800b6da:	f7f6 f8a3 	bl	8001824 <__aeabi_ddiv>
 800b6de:	e775      	b.n	800b5cc <__ieee754_pow+0x4c>
 800b6e0:	2202      	movs	r2, #2
 800b6e2:	9206      	str	r2, [sp, #24]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d1ad      	bne.n	800b644 <__ieee754_pow+0xc4>
 800b6e8:	4b3b      	ldr	r3, [pc, #236]	; (800b7d8 <__ieee754_pow+0x258>)
 800b6ea:	429e      	cmp	r6, r3
 800b6ec:	d1e7      	bne.n	800b6be <__ieee754_pow+0x13e>
 800b6ee:	4b3b      	ldr	r3, [pc, #236]	; (800b7dc <__ieee754_pow+0x25c>)
 800b6f0:	18e3      	adds	r3, r4, r3
 800b6f2:	433b      	orrs	r3, r7
 800b6f4:	d101      	bne.n	800b6fa <__ieee754_pow+0x17a>
 800b6f6:	f000 fc15 	bl	800bf24 <__ieee754_pow+0x9a4>
 800b6fa:	4b3a      	ldr	r3, [pc, #232]	; (800b7e4 <__ieee754_pow+0x264>)
 800b6fc:	429c      	cmp	r4, r3
 800b6fe:	dd09      	ble.n	800b714 <__ieee754_pow+0x194>
 800b700:	9b04      	ldr	r3, [sp, #16]
 800b702:	2b00      	cmp	r3, #0
 800b704:	da01      	bge.n	800b70a <__ieee754_pow+0x18a>
 800b706:	f000 fc11 	bl	800bf2c <__ieee754_pow+0x9ac>
 800b70a:	9b02      	ldr	r3, [sp, #8]
 800b70c:	9c03      	ldr	r4, [sp, #12]
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	9401      	str	r4, [sp, #4]
 800b712:	e00c      	b.n	800b72e <__ieee754_pow+0x1ae>
 800b714:	9b04      	ldr	r3, [sp, #16]
 800b716:	2b00      	cmp	r3, #0
 800b718:	db01      	blt.n	800b71e <__ieee754_pow+0x19e>
 800b71a:	f000 fc07 	bl	800bf2c <__ieee754_pow+0x9ac>
 800b71e:	2280      	movs	r2, #128	; 0x80
 800b720:	0612      	lsls	r2, r2, #24
 800b722:	4694      	mov	ip, r2
 800b724:	9b02      	ldr	r3, [sp, #8]
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	9b03      	ldr	r3, [sp, #12]
 800b72a:	4463      	add	r3, ip
 800b72c:	9301      	str	r3, [sp, #4]
 800b72e:	9800      	ldr	r0, [sp, #0]
 800b730:	9901      	ldr	r1, [sp, #4]
 800b732:	b015      	add	sp, #84	; 0x54
 800b734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b736:	2380      	movs	r3, #128	; 0x80
 800b738:	9a04      	ldr	r2, [sp, #16]
 800b73a:	05db      	lsls	r3, r3, #23
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d106      	bne.n	800b74e <__ieee754_pow+0x1ce>
 800b740:	003a      	movs	r2, r7
 800b742:	002b      	movs	r3, r5
 800b744:	0038      	movs	r0, r7
 800b746:	0029      	movs	r1, r5
 800b748:	f7f6 fc66 	bl	8002018 <__aeabi_dmul>
 800b74c:	e73e      	b.n	800b5cc <__ieee754_pow+0x4c>
 800b74e:	4b28      	ldr	r3, [pc, #160]	; (800b7f0 <__ieee754_pow+0x270>)
 800b750:	9a04      	ldr	r2, [sp, #16]
 800b752:	429a      	cmp	r2, r3
 800b754:	d000      	beq.n	800b758 <__ieee754_pow+0x1d8>
 800b756:	e775      	b.n	800b644 <__ieee754_pow+0xc4>
 800b758:	2d00      	cmp	r5, #0
 800b75a:	da00      	bge.n	800b75e <__ieee754_pow+0x1de>
 800b75c:	e772      	b.n	800b644 <__ieee754_pow+0xc4>
 800b75e:	0038      	movs	r0, r7
 800b760:	0029      	movs	r1, r5
 800b762:	f7ff fd9f 	bl	800b2a4 <__ieee754_sqrt>
 800b766:	e731      	b.n	800b5cc <__ieee754_pow+0x4c>
 800b768:	9b06      	ldr	r3, [sp, #24]
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d1df      	bne.n	800b72e <__ieee754_pow+0x1ae>
 800b76e:	9800      	ldr	r0, [sp, #0]
 800b770:	2180      	movs	r1, #128	; 0x80
 800b772:	0002      	movs	r2, r0
 800b774:	9801      	ldr	r0, [sp, #4]
 800b776:	0609      	lsls	r1, r1, #24
 800b778:	1843      	adds	r3, r0, r1
 800b77a:	9200      	str	r2, [sp, #0]
 800b77c:	9301      	str	r3, [sp, #4]
 800b77e:	e7d6      	b.n	800b72e <__ieee754_pow+0x1ae>
 800b780:	0feb      	lsrs	r3, r5, #31
 800b782:	3b01      	subs	r3, #1
 800b784:	930e      	str	r3, [sp, #56]	; 0x38
 800b786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b788:	9b06      	ldr	r3, [sp, #24]
 800b78a:	4313      	orrs	r3, r2
 800b78c:	d104      	bne.n	800b798 <__ieee754_pow+0x218>
 800b78e:	003a      	movs	r2, r7
 800b790:	002b      	movs	r3, r5
 800b792:	0038      	movs	r0, r7
 800b794:	0029      	movs	r1, r5
 800b796:	e77e      	b.n	800b696 <__ieee754_pow+0x116>
 800b798:	4b16      	ldr	r3, [pc, #88]	; (800b7f4 <__ieee754_pow+0x274>)
 800b79a:	429e      	cmp	r6, r3
 800b79c:	dc00      	bgt.n	800b7a0 <__ieee754_pow+0x220>
 800b79e:	e0f1      	b.n	800b984 <__ieee754_pow+0x404>
 800b7a0:	4b15      	ldr	r3, [pc, #84]	; (800b7f8 <__ieee754_pow+0x278>)
 800b7a2:	429e      	cmp	r6, r3
 800b7a4:	dd09      	ble.n	800b7ba <__ieee754_pow+0x23a>
 800b7a6:	4b0f      	ldr	r3, [pc, #60]	; (800b7e4 <__ieee754_pow+0x264>)
 800b7a8:	429c      	cmp	r4, r3
 800b7aa:	dc0c      	bgt.n	800b7c6 <__ieee754_pow+0x246>
 800b7ac:	9b04      	ldr	r3, [sp, #16]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	da0c      	bge.n	800b7cc <__ieee754_pow+0x24c>
 800b7b2:	2000      	movs	r0, #0
 800b7b4:	f000 fc86 	bl	800c0c4 <__math_oflow>
 800b7b8:	e708      	b.n	800b5cc <__ieee754_pow+0x4c>
 800b7ba:	4b10      	ldr	r3, [pc, #64]	; (800b7fc <__ieee754_pow+0x27c>)
 800b7bc:	429c      	cmp	r4, r3
 800b7be:	ddf5      	ble.n	800b7ac <__ieee754_pow+0x22c>
 800b7c0:	4b0a      	ldr	r3, [pc, #40]	; (800b7ec <__ieee754_pow+0x26c>)
 800b7c2:	429c      	cmp	r4, r3
 800b7c4:	dd1c      	ble.n	800b800 <__ieee754_pow+0x280>
 800b7c6:	9b04      	ldr	r3, [sp, #16]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	dcf2      	bgt.n	800b7b2 <__ieee754_pow+0x232>
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	f000 fc72 	bl	800c0b6 <__math_uflow>
 800b7d2:	e6fb      	b.n	800b5cc <__ieee754_pow+0x4c>
 800b7d4:	fff00000 	.word	0xfff00000
 800b7d8:	7ff00000 	.word	0x7ff00000
 800b7dc:	c0100000 	.word	0xc0100000
 800b7e0:	433fffff 	.word	0x433fffff
 800b7e4:	3fefffff 	.word	0x3fefffff
 800b7e8:	fffffc01 	.word	0xfffffc01
 800b7ec:	3ff00000 	.word	0x3ff00000
 800b7f0:	3fe00000 	.word	0x3fe00000
 800b7f4:	41e00000 	.word	0x41e00000
 800b7f8:	43f00000 	.word	0x43f00000
 800b7fc:	3feffffe 	.word	0x3feffffe
 800b800:	2200      	movs	r2, #0
 800b802:	9800      	ldr	r0, [sp, #0]
 800b804:	9901      	ldr	r1, [sp, #4]
 800b806:	4b53      	ldr	r3, [pc, #332]	; (800b954 <__ieee754_pow+0x3d4>)
 800b808:	f7f6 fec8 	bl	800259c <__aeabi_dsub>
 800b80c:	22c0      	movs	r2, #192	; 0xc0
 800b80e:	4b52      	ldr	r3, [pc, #328]	; (800b958 <__ieee754_pow+0x3d8>)
 800b810:	05d2      	lsls	r2, r2, #23
 800b812:	0004      	movs	r4, r0
 800b814:	000d      	movs	r5, r1
 800b816:	f7f6 fbff 	bl	8002018 <__aeabi_dmul>
 800b81a:	4a50      	ldr	r2, [pc, #320]	; (800b95c <__ieee754_pow+0x3dc>)
 800b81c:	0006      	movs	r6, r0
 800b81e:	000f      	movs	r7, r1
 800b820:	0020      	movs	r0, r4
 800b822:	0029      	movs	r1, r5
 800b824:	4b4e      	ldr	r3, [pc, #312]	; (800b960 <__ieee754_pow+0x3e0>)
 800b826:	f7f6 fbf7 	bl	8002018 <__aeabi_dmul>
 800b82a:	2200      	movs	r2, #0
 800b82c:	9000      	str	r0, [sp, #0]
 800b82e:	9101      	str	r1, [sp, #4]
 800b830:	4b4c      	ldr	r3, [pc, #304]	; (800b964 <__ieee754_pow+0x3e4>)
 800b832:	0020      	movs	r0, r4
 800b834:	0029      	movs	r1, r5
 800b836:	f7f6 fbef 	bl	8002018 <__aeabi_dmul>
 800b83a:	0002      	movs	r2, r0
 800b83c:	000b      	movs	r3, r1
 800b83e:	484a      	ldr	r0, [pc, #296]	; (800b968 <__ieee754_pow+0x3e8>)
 800b840:	494a      	ldr	r1, [pc, #296]	; (800b96c <__ieee754_pow+0x3ec>)
 800b842:	f7f6 feab 	bl	800259c <__aeabi_dsub>
 800b846:	0022      	movs	r2, r4
 800b848:	002b      	movs	r3, r5
 800b84a:	f7f6 fbe5 	bl	8002018 <__aeabi_dmul>
 800b84e:	0002      	movs	r2, r0
 800b850:	000b      	movs	r3, r1
 800b852:	2000      	movs	r0, #0
 800b854:	4946      	ldr	r1, [pc, #280]	; (800b970 <__ieee754_pow+0x3f0>)
 800b856:	f7f6 fea1 	bl	800259c <__aeabi_dsub>
 800b85a:	0022      	movs	r2, r4
 800b85c:	002b      	movs	r3, r5
 800b85e:	9004      	str	r0, [sp, #16]
 800b860:	9105      	str	r1, [sp, #20]
 800b862:	0020      	movs	r0, r4
 800b864:	0029      	movs	r1, r5
 800b866:	f7f6 fbd7 	bl	8002018 <__aeabi_dmul>
 800b86a:	0002      	movs	r2, r0
 800b86c:	000b      	movs	r3, r1
 800b86e:	9804      	ldr	r0, [sp, #16]
 800b870:	9905      	ldr	r1, [sp, #20]
 800b872:	f7f6 fbd1 	bl	8002018 <__aeabi_dmul>
 800b876:	4a3f      	ldr	r2, [pc, #252]	; (800b974 <__ieee754_pow+0x3f4>)
 800b878:	4b37      	ldr	r3, [pc, #220]	; (800b958 <__ieee754_pow+0x3d8>)
 800b87a:	f7f6 fbcd 	bl	8002018 <__aeabi_dmul>
 800b87e:	0002      	movs	r2, r0
 800b880:	000b      	movs	r3, r1
 800b882:	9800      	ldr	r0, [sp, #0]
 800b884:	9901      	ldr	r1, [sp, #4]
 800b886:	f7f6 fe89 	bl	800259c <__aeabi_dsub>
 800b88a:	0002      	movs	r2, r0
 800b88c:	000b      	movs	r3, r1
 800b88e:	0004      	movs	r4, r0
 800b890:	000d      	movs	r5, r1
 800b892:	0030      	movs	r0, r6
 800b894:	0039      	movs	r1, r7
 800b896:	f7f5 fc65 	bl	8001164 <__aeabi_dadd>
 800b89a:	2000      	movs	r0, #0
 800b89c:	0032      	movs	r2, r6
 800b89e:	003b      	movs	r3, r7
 800b8a0:	9004      	str	r0, [sp, #16]
 800b8a2:	9105      	str	r1, [sp, #20]
 800b8a4:	f7f6 fe7a 	bl	800259c <__aeabi_dsub>
 800b8a8:	0002      	movs	r2, r0
 800b8aa:	000b      	movs	r3, r1
 800b8ac:	0020      	movs	r0, r4
 800b8ae:	0029      	movs	r1, r5
 800b8b0:	f7f6 fe74 	bl	800259c <__aeabi_dsub>
 800b8b4:	9b06      	ldr	r3, [sp, #24]
 800b8b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	0006      	movs	r6, r0
 800b8bc:	000f      	movs	r7, r1
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	d000      	beq.n	800b8c4 <__ieee754_pow+0x344>
 800b8c2:	e1dc      	b.n	800bc7e <__ieee754_pow+0x6fe>
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	4c2c      	ldr	r4, [pc, #176]	; (800b978 <__ieee754_pow+0x3f8>)
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	9401      	str	r4, [sp, #4]
 800b8cc:	9c02      	ldr	r4, [sp, #8]
 800b8ce:	9d03      	ldr	r5, [sp, #12]
 800b8d0:	9802      	ldr	r0, [sp, #8]
 800b8d2:	9903      	ldr	r1, [sp, #12]
 800b8d4:	2400      	movs	r4, #0
 800b8d6:	002b      	movs	r3, r5
 800b8d8:	0022      	movs	r2, r4
 800b8da:	f7f6 fe5f 	bl	800259c <__aeabi_dsub>
 800b8de:	9a04      	ldr	r2, [sp, #16]
 800b8e0:	9b05      	ldr	r3, [sp, #20]
 800b8e2:	f7f6 fb99 	bl	8002018 <__aeabi_dmul>
 800b8e6:	9a02      	ldr	r2, [sp, #8]
 800b8e8:	9b03      	ldr	r3, [sp, #12]
 800b8ea:	9006      	str	r0, [sp, #24]
 800b8ec:	9107      	str	r1, [sp, #28]
 800b8ee:	0030      	movs	r0, r6
 800b8f0:	0039      	movs	r1, r7
 800b8f2:	f7f6 fb91 	bl	8002018 <__aeabi_dmul>
 800b8f6:	0002      	movs	r2, r0
 800b8f8:	000b      	movs	r3, r1
 800b8fa:	9806      	ldr	r0, [sp, #24]
 800b8fc:	9907      	ldr	r1, [sp, #28]
 800b8fe:	f7f5 fc31 	bl	8001164 <__aeabi_dadd>
 800b902:	0022      	movs	r2, r4
 800b904:	002b      	movs	r3, r5
 800b906:	0006      	movs	r6, r0
 800b908:	000f      	movs	r7, r1
 800b90a:	9804      	ldr	r0, [sp, #16]
 800b90c:	9905      	ldr	r1, [sp, #20]
 800b90e:	f7f6 fb83 	bl	8002018 <__aeabi_dmul>
 800b912:	0003      	movs	r3, r0
 800b914:	000c      	movs	r4, r1
 800b916:	9004      	str	r0, [sp, #16]
 800b918:	9105      	str	r1, [sp, #20]
 800b91a:	9306      	str	r3, [sp, #24]
 800b91c:	9407      	str	r4, [sp, #28]
 800b91e:	0002      	movs	r2, r0
 800b920:	000b      	movs	r3, r1
 800b922:	0030      	movs	r0, r6
 800b924:	0039      	movs	r1, r7
 800b926:	f7f5 fc1d 	bl	8001164 <__aeabi_dadd>
 800b92a:	4b14      	ldr	r3, [pc, #80]	; (800b97c <__ieee754_pow+0x3fc>)
 800b92c:	0005      	movs	r5, r0
 800b92e:	000c      	movs	r4, r1
 800b930:	9108      	str	r1, [sp, #32]
 800b932:	4299      	cmp	r1, r3
 800b934:	dc00      	bgt.n	800b938 <__ieee754_pow+0x3b8>
 800b936:	e2d4      	b.n	800bee2 <__ieee754_pow+0x962>
 800b938:	4b11      	ldr	r3, [pc, #68]	; (800b980 <__ieee754_pow+0x400>)
 800b93a:	18cb      	adds	r3, r1, r3
 800b93c:	4303      	orrs	r3, r0
 800b93e:	d100      	bne.n	800b942 <__ieee754_pow+0x3c2>
 800b940:	e1d6      	b.n	800bcf0 <__ieee754_pow+0x770>
 800b942:	9800      	ldr	r0, [sp, #0]
 800b944:	9901      	ldr	r1, [sp, #4]
 800b946:	2300      	movs	r3, #0
 800b948:	2200      	movs	r2, #0
 800b94a:	f7f4 fd85 	bl	8000458 <__aeabi_dcmplt>
 800b94e:	1e43      	subs	r3, r0, #1
 800b950:	4198      	sbcs	r0, r3
 800b952:	e72f      	b.n	800b7b4 <__ieee754_pow+0x234>
 800b954:	3ff00000 	.word	0x3ff00000
 800b958:	3ff71547 	.word	0x3ff71547
 800b95c:	f85ddf44 	.word	0xf85ddf44
 800b960:	3e54ae0b 	.word	0x3e54ae0b
 800b964:	3fd00000 	.word	0x3fd00000
 800b968:	55555555 	.word	0x55555555
 800b96c:	3fd55555 	.word	0x3fd55555
 800b970:	3fe00000 	.word	0x3fe00000
 800b974:	652b82fe 	.word	0x652b82fe
 800b978:	bff00000 	.word	0xbff00000
 800b97c:	408fffff 	.word	0x408fffff
 800b980:	bf700000 	.word	0xbf700000
 800b984:	4bbf      	ldr	r3, [pc, #764]	; (800bc84 <__ieee754_pow+0x704>)
 800b986:	2200      	movs	r2, #0
 800b988:	422b      	tst	r3, r5
 800b98a:	d10a      	bne.n	800b9a2 <__ieee754_pow+0x422>
 800b98c:	9800      	ldr	r0, [sp, #0]
 800b98e:	9901      	ldr	r1, [sp, #4]
 800b990:	2200      	movs	r2, #0
 800b992:	4bbd      	ldr	r3, [pc, #756]	; (800bc88 <__ieee754_pow+0x708>)
 800b994:	f7f6 fb40 	bl	8002018 <__aeabi_dmul>
 800b998:	2235      	movs	r2, #53	; 0x35
 800b99a:	9000      	str	r0, [sp, #0]
 800b99c:	9101      	str	r1, [sp, #4]
 800b99e:	9c01      	ldr	r4, [sp, #4]
 800b9a0:	4252      	negs	r2, r2
 800b9a2:	49ba      	ldr	r1, [pc, #744]	; (800bc8c <__ieee754_pow+0x70c>)
 800b9a4:	1523      	asrs	r3, r4, #20
 800b9a6:	185b      	adds	r3, r3, r1
 800b9a8:	189b      	adds	r3, r3, r2
 800b9aa:	0324      	lsls	r4, r4, #12
 800b9ac:	4db8      	ldr	r5, [pc, #736]	; (800bc90 <__ieee754_pow+0x710>)
 800b9ae:	930d      	str	r3, [sp, #52]	; 0x34
 800b9b0:	4bb8      	ldr	r3, [pc, #736]	; (800bc94 <__ieee754_pow+0x714>)
 800b9b2:	0b22      	lsrs	r2, r4, #12
 800b9b4:	4315      	orrs	r5, r2
 800b9b6:	2400      	movs	r4, #0
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	dd09      	ble.n	800b9d0 <__ieee754_pow+0x450>
 800b9bc:	4bb6      	ldr	r3, [pc, #728]	; (800bc98 <__ieee754_pow+0x718>)
 800b9be:	3401      	adds	r4, #1
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	dd05      	ble.n	800b9d0 <__ieee754_pow+0x450>
 800b9c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9c6:	191b      	adds	r3, r3, r4
 800b9c8:	2400      	movs	r4, #0
 800b9ca:	930d      	str	r3, [sp, #52]	; 0x34
 800b9cc:	4bb3      	ldr	r3, [pc, #716]	; (800bc9c <__ieee754_pow+0x71c>)
 800b9ce:	18ed      	adds	r5, r5, r3
 800b9d0:	4bb3      	ldr	r3, [pc, #716]	; (800bca0 <__ieee754_pow+0x720>)
 800b9d2:	00e2      	lsls	r2, r4, #3
 800b9d4:	189b      	adds	r3, r3, r2
 800b9d6:	9800      	ldr	r0, [sp, #0]
 800b9d8:	9901      	ldr	r1, [sp, #4]
 800b9da:	920f      	str	r2, [sp, #60]	; 0x3c
 800b9dc:	0029      	movs	r1, r5
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	0006      	movs	r6, r0
 800b9e4:	920a      	str	r2, [sp, #40]	; 0x28
 800b9e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9e8:	f7f6 fdd8 	bl	800259c <__aeabi_dsub>
 800b9ec:	0032      	movs	r2, r6
 800b9ee:	002b      	movs	r3, r5
 800b9f0:	9010      	str	r0, [sp, #64]	; 0x40
 800b9f2:	9111      	str	r1, [sp, #68]	; 0x44
 800b9f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b9f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b9f8:	f7f5 fbb4 	bl	8001164 <__aeabi_dadd>
 800b9fc:	0002      	movs	r2, r0
 800b9fe:	000b      	movs	r3, r1
 800ba00:	2000      	movs	r0, #0
 800ba02:	49a3      	ldr	r1, [pc, #652]	; (800bc90 <__ieee754_pow+0x710>)
 800ba04:	f7f5 ff0e 	bl	8001824 <__aeabi_ddiv>
 800ba08:	0002      	movs	r2, r0
 800ba0a:	000b      	movs	r3, r1
 800ba0c:	9012      	str	r0, [sp, #72]	; 0x48
 800ba0e:	9113      	str	r1, [sp, #76]	; 0x4c
 800ba10:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ba12:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ba14:	f7f6 fb00 	bl	8002018 <__aeabi_dmul>
 800ba18:	9008      	str	r0, [sp, #32]
 800ba1a:	9109      	str	r1, [sp, #36]	; 0x24
 800ba1c:	9a08      	ldr	r2, [sp, #32]
 800ba1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba20:	9204      	str	r2, [sp, #16]
 800ba22:	9305      	str	r3, [sp, #20]
 800ba24:	2300      	movs	r3, #0
 800ba26:	2180      	movs	r1, #128	; 0x80
 800ba28:	2080      	movs	r0, #128	; 0x80
 800ba2a:	9304      	str	r3, [sp, #16]
 800ba2c:	9a04      	ldr	r2, [sp, #16]
 800ba2e:	9b05      	ldr	r3, [sp, #20]
 800ba30:	9200      	str	r2, [sp, #0]
 800ba32:	9301      	str	r3, [sp, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	002f      	movs	r7, r5
 800ba38:	0589      	lsls	r1, r1, #22
 800ba3a:	106d      	asrs	r5, r5, #1
 800ba3c:	4329      	orrs	r1, r5
 800ba3e:	0300      	lsls	r0, r0, #12
 800ba40:	1809      	adds	r1, r1, r0
 800ba42:	04a0      	lsls	r0, r4, #18
 800ba44:	180b      	adds	r3, r1, r0
 800ba46:	9800      	ldr	r0, [sp, #0]
 800ba48:	9901      	ldr	r1, [sp, #4]
 800ba4a:	0014      	movs	r4, r2
 800ba4c:	001d      	movs	r5, r3
 800ba4e:	f7f6 fae3 	bl	8002018 <__aeabi_dmul>
 800ba52:	0002      	movs	r2, r0
 800ba54:	000b      	movs	r3, r1
 800ba56:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ba58:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ba5a:	f7f6 fd9f 	bl	800259c <__aeabi_dsub>
 800ba5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba62:	9010      	str	r0, [sp, #64]	; 0x40
 800ba64:	9111      	str	r1, [sp, #68]	; 0x44
 800ba66:	0020      	movs	r0, r4
 800ba68:	0029      	movs	r1, r5
 800ba6a:	f7f6 fd97 	bl	800259c <__aeabi_dsub>
 800ba6e:	0002      	movs	r2, r0
 800ba70:	000b      	movs	r3, r1
 800ba72:	0030      	movs	r0, r6
 800ba74:	0039      	movs	r1, r7
 800ba76:	f7f6 fd91 	bl	800259c <__aeabi_dsub>
 800ba7a:	9a00      	ldr	r2, [sp, #0]
 800ba7c:	9b01      	ldr	r3, [sp, #4]
 800ba7e:	f7f6 facb 	bl	8002018 <__aeabi_dmul>
 800ba82:	0002      	movs	r2, r0
 800ba84:	000b      	movs	r3, r1
 800ba86:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ba88:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ba8a:	f7f6 fd87 	bl	800259c <__aeabi_dsub>
 800ba8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ba90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba92:	f7f6 fac1 	bl	8002018 <__aeabi_dmul>
 800ba96:	9a08      	ldr	r2, [sp, #32]
 800ba98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba9a:	900a      	str	r0, [sp, #40]	; 0x28
 800ba9c:	910b      	str	r1, [sp, #44]	; 0x2c
 800ba9e:	0010      	movs	r0, r2
 800baa0:	0019      	movs	r1, r3
 800baa2:	f7f6 fab9 	bl	8002018 <__aeabi_dmul>
 800baa6:	0006      	movs	r6, r0
 800baa8:	000f      	movs	r7, r1
 800baaa:	4a7e      	ldr	r2, [pc, #504]	; (800bca4 <__ieee754_pow+0x724>)
 800baac:	4b7e      	ldr	r3, [pc, #504]	; (800bca8 <__ieee754_pow+0x728>)
 800baae:	f7f6 fab3 	bl	8002018 <__aeabi_dmul>
 800bab2:	4a7e      	ldr	r2, [pc, #504]	; (800bcac <__ieee754_pow+0x72c>)
 800bab4:	4b7e      	ldr	r3, [pc, #504]	; (800bcb0 <__ieee754_pow+0x730>)
 800bab6:	f7f5 fb55 	bl	8001164 <__aeabi_dadd>
 800baba:	0032      	movs	r2, r6
 800babc:	003b      	movs	r3, r7
 800babe:	f7f6 faab 	bl	8002018 <__aeabi_dmul>
 800bac2:	4a7c      	ldr	r2, [pc, #496]	; (800bcb4 <__ieee754_pow+0x734>)
 800bac4:	4b7c      	ldr	r3, [pc, #496]	; (800bcb8 <__ieee754_pow+0x738>)
 800bac6:	f7f5 fb4d 	bl	8001164 <__aeabi_dadd>
 800baca:	0032      	movs	r2, r6
 800bacc:	003b      	movs	r3, r7
 800bace:	f7f6 faa3 	bl	8002018 <__aeabi_dmul>
 800bad2:	4a7a      	ldr	r2, [pc, #488]	; (800bcbc <__ieee754_pow+0x73c>)
 800bad4:	4b7a      	ldr	r3, [pc, #488]	; (800bcc0 <__ieee754_pow+0x740>)
 800bad6:	f7f5 fb45 	bl	8001164 <__aeabi_dadd>
 800bada:	0032      	movs	r2, r6
 800badc:	003b      	movs	r3, r7
 800bade:	f7f6 fa9b 	bl	8002018 <__aeabi_dmul>
 800bae2:	4a78      	ldr	r2, [pc, #480]	; (800bcc4 <__ieee754_pow+0x744>)
 800bae4:	4b78      	ldr	r3, [pc, #480]	; (800bcc8 <__ieee754_pow+0x748>)
 800bae6:	f7f5 fb3d 	bl	8001164 <__aeabi_dadd>
 800baea:	0032      	movs	r2, r6
 800baec:	003b      	movs	r3, r7
 800baee:	f7f6 fa93 	bl	8002018 <__aeabi_dmul>
 800baf2:	4a76      	ldr	r2, [pc, #472]	; (800bccc <__ieee754_pow+0x74c>)
 800baf4:	4b76      	ldr	r3, [pc, #472]	; (800bcd0 <__ieee754_pow+0x750>)
 800baf6:	f7f5 fb35 	bl	8001164 <__aeabi_dadd>
 800bafa:	0032      	movs	r2, r6
 800bafc:	0004      	movs	r4, r0
 800bafe:	000d      	movs	r5, r1
 800bb00:	003b      	movs	r3, r7
 800bb02:	0030      	movs	r0, r6
 800bb04:	0039      	movs	r1, r7
 800bb06:	f7f6 fa87 	bl	8002018 <__aeabi_dmul>
 800bb0a:	0002      	movs	r2, r0
 800bb0c:	000b      	movs	r3, r1
 800bb0e:	0020      	movs	r0, r4
 800bb10:	0029      	movs	r1, r5
 800bb12:	f7f6 fa81 	bl	8002018 <__aeabi_dmul>
 800bb16:	9a00      	ldr	r2, [sp, #0]
 800bb18:	9b01      	ldr	r3, [sp, #4]
 800bb1a:	0004      	movs	r4, r0
 800bb1c:	000d      	movs	r5, r1
 800bb1e:	9808      	ldr	r0, [sp, #32]
 800bb20:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb22:	f7f5 fb1f 	bl	8001164 <__aeabi_dadd>
 800bb26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb2a:	f7f6 fa75 	bl	8002018 <__aeabi_dmul>
 800bb2e:	0022      	movs	r2, r4
 800bb30:	002b      	movs	r3, r5
 800bb32:	f7f5 fb17 	bl	8001164 <__aeabi_dadd>
 800bb36:	9a00      	ldr	r2, [sp, #0]
 800bb38:	9b01      	ldr	r3, [sp, #4]
 800bb3a:	9010      	str	r0, [sp, #64]	; 0x40
 800bb3c:	9111      	str	r1, [sp, #68]	; 0x44
 800bb3e:	0010      	movs	r0, r2
 800bb40:	0019      	movs	r1, r3
 800bb42:	f7f6 fa69 	bl	8002018 <__aeabi_dmul>
 800bb46:	2200      	movs	r2, #0
 800bb48:	4b62      	ldr	r3, [pc, #392]	; (800bcd4 <__ieee754_pow+0x754>)
 800bb4a:	0004      	movs	r4, r0
 800bb4c:	000d      	movs	r5, r1
 800bb4e:	f7f5 fb09 	bl	8001164 <__aeabi_dadd>
 800bb52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bb54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb56:	f7f5 fb05 	bl	8001164 <__aeabi_dadd>
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	000f      	movs	r7, r1
 800bb5e:	0006      	movs	r6, r0
 800bb60:	0002      	movs	r2, r0
 800bb62:	000b      	movs	r3, r1
 800bb64:	9800      	ldr	r0, [sp, #0]
 800bb66:	9901      	ldr	r1, [sp, #4]
 800bb68:	f7f6 fa56 	bl	8002018 <__aeabi_dmul>
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	9000      	str	r0, [sp, #0]
 800bb70:	9101      	str	r1, [sp, #4]
 800bb72:	4b58      	ldr	r3, [pc, #352]	; (800bcd4 <__ieee754_pow+0x754>)
 800bb74:	0030      	movs	r0, r6
 800bb76:	0039      	movs	r1, r7
 800bb78:	f7f6 fd10 	bl	800259c <__aeabi_dsub>
 800bb7c:	0022      	movs	r2, r4
 800bb7e:	002b      	movs	r3, r5
 800bb80:	f7f6 fd0c 	bl	800259c <__aeabi_dsub>
 800bb84:	0002      	movs	r2, r0
 800bb86:	000b      	movs	r3, r1
 800bb88:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bb8a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bb8c:	f7f6 fd06 	bl	800259c <__aeabi_dsub>
 800bb90:	9a08      	ldr	r2, [sp, #32]
 800bb92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb94:	f7f6 fa40 	bl	8002018 <__aeabi_dmul>
 800bb98:	0032      	movs	r2, r6
 800bb9a:	0004      	movs	r4, r0
 800bb9c:	000d      	movs	r5, r1
 800bb9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bba0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bba2:	003b      	movs	r3, r7
 800bba4:	f7f6 fa38 	bl	8002018 <__aeabi_dmul>
 800bba8:	0002      	movs	r2, r0
 800bbaa:	000b      	movs	r3, r1
 800bbac:	0020      	movs	r0, r4
 800bbae:	0029      	movs	r1, r5
 800bbb0:	f7f5 fad8 	bl	8001164 <__aeabi_dadd>
 800bbb4:	0004      	movs	r4, r0
 800bbb6:	000d      	movs	r5, r1
 800bbb8:	0002      	movs	r2, r0
 800bbba:	000b      	movs	r3, r1
 800bbbc:	9800      	ldr	r0, [sp, #0]
 800bbbe:	9901      	ldr	r1, [sp, #4]
 800bbc0:	f7f5 fad0 	bl	8001164 <__aeabi_dadd>
 800bbc4:	22e0      	movs	r2, #224	; 0xe0
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	4b43      	ldr	r3, [pc, #268]	; (800bcd8 <__ieee754_pow+0x758>)
 800bbca:	0612      	lsls	r2, r2, #24
 800bbcc:	0006      	movs	r6, r0
 800bbce:	000f      	movs	r7, r1
 800bbd0:	f7f6 fa22 	bl	8002018 <__aeabi_dmul>
 800bbd4:	9008      	str	r0, [sp, #32]
 800bbd6:	9109      	str	r1, [sp, #36]	; 0x24
 800bbd8:	9a00      	ldr	r2, [sp, #0]
 800bbda:	9b01      	ldr	r3, [sp, #4]
 800bbdc:	0030      	movs	r0, r6
 800bbde:	0039      	movs	r1, r7
 800bbe0:	f7f6 fcdc 	bl	800259c <__aeabi_dsub>
 800bbe4:	0002      	movs	r2, r0
 800bbe6:	000b      	movs	r3, r1
 800bbe8:	0020      	movs	r0, r4
 800bbea:	0029      	movs	r1, r5
 800bbec:	f7f6 fcd6 	bl	800259c <__aeabi_dsub>
 800bbf0:	4a3a      	ldr	r2, [pc, #232]	; (800bcdc <__ieee754_pow+0x75c>)
 800bbf2:	4b39      	ldr	r3, [pc, #228]	; (800bcd8 <__ieee754_pow+0x758>)
 800bbf4:	f7f6 fa10 	bl	8002018 <__aeabi_dmul>
 800bbf8:	4a39      	ldr	r2, [pc, #228]	; (800bce0 <__ieee754_pow+0x760>)
 800bbfa:	0004      	movs	r4, r0
 800bbfc:	000d      	movs	r5, r1
 800bbfe:	0030      	movs	r0, r6
 800bc00:	0039      	movs	r1, r7
 800bc02:	4b38      	ldr	r3, [pc, #224]	; (800bce4 <__ieee754_pow+0x764>)
 800bc04:	f7f6 fa08 	bl	8002018 <__aeabi_dmul>
 800bc08:	0002      	movs	r2, r0
 800bc0a:	000b      	movs	r3, r1
 800bc0c:	0020      	movs	r0, r4
 800bc0e:	0029      	movs	r1, r5
 800bc10:	f7f5 faa8 	bl	8001164 <__aeabi_dadd>
 800bc14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bc16:	4b34      	ldr	r3, [pc, #208]	; (800bce8 <__ieee754_pow+0x768>)
 800bc18:	189b      	adds	r3, r3, r2
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	f7f5 faa1 	bl	8001164 <__aeabi_dadd>
 800bc22:	9000      	str	r0, [sp, #0]
 800bc24:	9101      	str	r1, [sp, #4]
 800bc26:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bc28:	f7f7 f88e 	bl	8002d48 <__aeabi_i2d>
 800bc2c:	0004      	movs	r4, r0
 800bc2e:	000d      	movs	r5, r1
 800bc30:	9808      	ldr	r0, [sp, #32]
 800bc32:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bc36:	4b2d      	ldr	r3, [pc, #180]	; (800bcec <__ieee754_pow+0x76c>)
 800bc38:	189b      	adds	r3, r3, r2
 800bc3a:	681e      	ldr	r6, [r3, #0]
 800bc3c:	685f      	ldr	r7, [r3, #4]
 800bc3e:	9a00      	ldr	r2, [sp, #0]
 800bc40:	9b01      	ldr	r3, [sp, #4]
 800bc42:	f7f5 fa8f 	bl	8001164 <__aeabi_dadd>
 800bc46:	0032      	movs	r2, r6
 800bc48:	003b      	movs	r3, r7
 800bc4a:	f7f5 fa8b 	bl	8001164 <__aeabi_dadd>
 800bc4e:	0022      	movs	r2, r4
 800bc50:	002b      	movs	r3, r5
 800bc52:	f7f5 fa87 	bl	8001164 <__aeabi_dadd>
 800bc56:	2000      	movs	r0, #0
 800bc58:	0022      	movs	r2, r4
 800bc5a:	002b      	movs	r3, r5
 800bc5c:	9004      	str	r0, [sp, #16]
 800bc5e:	9105      	str	r1, [sp, #20]
 800bc60:	f7f6 fc9c 	bl	800259c <__aeabi_dsub>
 800bc64:	0032      	movs	r2, r6
 800bc66:	003b      	movs	r3, r7
 800bc68:	f7f6 fc98 	bl	800259c <__aeabi_dsub>
 800bc6c:	9a08      	ldr	r2, [sp, #32]
 800bc6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc70:	f7f6 fc94 	bl	800259c <__aeabi_dsub>
 800bc74:	0002      	movs	r2, r0
 800bc76:	000b      	movs	r3, r1
 800bc78:	9800      	ldr	r0, [sp, #0]
 800bc7a:	9901      	ldr	r1, [sp, #4]
 800bc7c:	e618      	b.n	800b8b0 <__ieee754_pow+0x330>
 800bc7e:	2300      	movs	r3, #0
 800bc80:	4c03      	ldr	r4, [pc, #12]	; (800bc90 <__ieee754_pow+0x710>)
 800bc82:	e621      	b.n	800b8c8 <__ieee754_pow+0x348>
 800bc84:	7ff00000 	.word	0x7ff00000
 800bc88:	43400000 	.word	0x43400000
 800bc8c:	fffffc01 	.word	0xfffffc01
 800bc90:	3ff00000 	.word	0x3ff00000
 800bc94:	0003988e 	.word	0x0003988e
 800bc98:	000bb679 	.word	0x000bb679
 800bc9c:	fff00000 	.word	0xfff00000
 800bca0:	0800d6e0 	.word	0x0800d6e0
 800bca4:	4a454eef 	.word	0x4a454eef
 800bca8:	3fca7e28 	.word	0x3fca7e28
 800bcac:	93c9db65 	.word	0x93c9db65
 800bcb0:	3fcd864a 	.word	0x3fcd864a
 800bcb4:	a91d4101 	.word	0xa91d4101
 800bcb8:	3fd17460 	.word	0x3fd17460
 800bcbc:	518f264d 	.word	0x518f264d
 800bcc0:	3fd55555 	.word	0x3fd55555
 800bcc4:	db6fabff 	.word	0xdb6fabff
 800bcc8:	3fdb6db6 	.word	0x3fdb6db6
 800bccc:	33333303 	.word	0x33333303
 800bcd0:	3fe33333 	.word	0x3fe33333
 800bcd4:	40080000 	.word	0x40080000
 800bcd8:	3feec709 	.word	0x3feec709
 800bcdc:	dc3a03fd 	.word	0xdc3a03fd
 800bce0:	145b01f5 	.word	0x145b01f5
 800bce4:	be3e2fe0 	.word	0xbe3e2fe0
 800bce8:	0800d700 	.word	0x0800d700
 800bcec:	0800d6f0 	.word	0x0800d6f0
 800bcf0:	4a90      	ldr	r2, [pc, #576]	; (800bf34 <__ieee754_pow+0x9b4>)
 800bcf2:	4b91      	ldr	r3, [pc, #580]	; (800bf38 <__ieee754_pow+0x9b8>)
 800bcf4:	0030      	movs	r0, r6
 800bcf6:	0039      	movs	r1, r7
 800bcf8:	f7f5 fa34 	bl	8001164 <__aeabi_dadd>
 800bcfc:	9a04      	ldr	r2, [sp, #16]
 800bcfe:	9b05      	ldr	r3, [sp, #20]
 800bd00:	9002      	str	r0, [sp, #8]
 800bd02:	9103      	str	r1, [sp, #12]
 800bd04:	0028      	movs	r0, r5
 800bd06:	0021      	movs	r1, r4
 800bd08:	f7f6 fc48 	bl	800259c <__aeabi_dsub>
 800bd0c:	0002      	movs	r2, r0
 800bd0e:	000b      	movs	r3, r1
 800bd10:	9802      	ldr	r0, [sp, #8]
 800bd12:	9903      	ldr	r1, [sp, #12]
 800bd14:	f7f4 fbb4 	bl	8000480 <__aeabi_dcmpgt>
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	d000      	beq.n	800bd1e <__ieee754_pow+0x79e>
 800bd1c:	e611      	b.n	800b942 <__ieee754_pow+0x3c2>
 800bd1e:	2100      	movs	r1, #0
 800bd20:	4a86      	ldr	r2, [pc, #536]	; (800bf3c <__ieee754_pow+0x9bc>)
 800bd22:	0063      	lsls	r3, r4, #1
 800bd24:	085b      	lsrs	r3, r3, #1
 800bd26:	9102      	str	r1, [sp, #8]
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	dd25      	ble.n	800bd78 <__ieee754_pow+0x7f8>
 800bd2c:	4a84      	ldr	r2, [pc, #528]	; (800bf40 <__ieee754_pow+0x9c0>)
 800bd2e:	151b      	asrs	r3, r3, #20
 800bd30:	189b      	adds	r3, r3, r2
 800bd32:	2280      	movs	r2, #128	; 0x80
 800bd34:	0352      	lsls	r2, r2, #13
 800bd36:	0011      	movs	r1, r2
 800bd38:	4119      	asrs	r1, r3
 800bd3a:	190b      	adds	r3, r1, r4
 800bd3c:	005c      	lsls	r4, r3, #1
 800bd3e:	4981      	ldr	r1, [pc, #516]	; (800bf44 <__ieee754_pow+0x9c4>)
 800bd40:	4d81      	ldr	r5, [pc, #516]	; (800bf48 <__ieee754_pow+0x9c8>)
 800bd42:	0d64      	lsrs	r4, r4, #21
 800bd44:	1864      	adds	r4, r4, r1
 800bd46:	4125      	asrs	r5, r4
 800bd48:	401d      	ands	r5, r3
 800bd4a:	031b      	lsls	r3, r3, #12
 800bd4c:	0b1b      	lsrs	r3, r3, #12
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	2214      	movs	r2, #20
 800bd52:	1b12      	subs	r2, r2, r4
 800bd54:	4113      	asrs	r3, r2
 800bd56:	9302      	str	r3, [sp, #8]
 800bd58:	9b08      	ldr	r3, [sp, #32]
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	0029      	movs	r1, r5
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	da02      	bge.n	800bd68 <__ieee754_pow+0x7e8>
 800bd62:	9b02      	ldr	r3, [sp, #8]
 800bd64:	425b      	negs	r3, r3
 800bd66:	9302      	str	r3, [sp, #8]
 800bd68:	0002      	movs	r2, r0
 800bd6a:	000b      	movs	r3, r1
 800bd6c:	9804      	ldr	r0, [sp, #16]
 800bd6e:	9905      	ldr	r1, [sp, #20]
 800bd70:	f7f6 fc14 	bl	800259c <__aeabi_dsub>
 800bd74:	9006      	str	r0, [sp, #24]
 800bd76:	9107      	str	r1, [sp, #28]
 800bd78:	9806      	ldr	r0, [sp, #24]
 800bd7a:	9907      	ldr	r1, [sp, #28]
 800bd7c:	0032      	movs	r2, r6
 800bd7e:	003b      	movs	r3, r7
 800bd80:	f7f5 f9f0 	bl	8001164 <__aeabi_dadd>
 800bd84:	2000      	movs	r0, #0
 800bd86:	2200      	movs	r2, #0
 800bd88:	4b70      	ldr	r3, [pc, #448]	; (800bf4c <__ieee754_pow+0x9cc>)
 800bd8a:	9004      	str	r0, [sp, #16]
 800bd8c:	9105      	str	r1, [sp, #20]
 800bd8e:	f7f6 f943 	bl	8002018 <__aeabi_dmul>
 800bd92:	9a06      	ldr	r2, [sp, #24]
 800bd94:	9b07      	ldr	r3, [sp, #28]
 800bd96:	9008      	str	r0, [sp, #32]
 800bd98:	9109      	str	r1, [sp, #36]	; 0x24
 800bd9a:	9804      	ldr	r0, [sp, #16]
 800bd9c:	9905      	ldr	r1, [sp, #20]
 800bd9e:	f7f6 fbfd 	bl	800259c <__aeabi_dsub>
 800bda2:	0002      	movs	r2, r0
 800bda4:	000b      	movs	r3, r1
 800bda6:	0030      	movs	r0, r6
 800bda8:	0039      	movs	r1, r7
 800bdaa:	f7f6 fbf7 	bl	800259c <__aeabi_dsub>
 800bdae:	4a68      	ldr	r2, [pc, #416]	; (800bf50 <__ieee754_pow+0x9d0>)
 800bdb0:	4b68      	ldr	r3, [pc, #416]	; (800bf54 <__ieee754_pow+0x9d4>)
 800bdb2:	f7f6 f931 	bl	8002018 <__aeabi_dmul>
 800bdb6:	4a68      	ldr	r2, [pc, #416]	; (800bf58 <__ieee754_pow+0x9d8>)
 800bdb8:	0004      	movs	r4, r0
 800bdba:	000d      	movs	r5, r1
 800bdbc:	9804      	ldr	r0, [sp, #16]
 800bdbe:	9905      	ldr	r1, [sp, #20]
 800bdc0:	4b66      	ldr	r3, [pc, #408]	; (800bf5c <__ieee754_pow+0x9dc>)
 800bdc2:	f7f6 f929 	bl	8002018 <__aeabi_dmul>
 800bdc6:	0002      	movs	r2, r0
 800bdc8:	000b      	movs	r3, r1
 800bdca:	0020      	movs	r0, r4
 800bdcc:	0029      	movs	r1, r5
 800bdce:	f7f5 f9c9 	bl	8001164 <__aeabi_dadd>
 800bdd2:	0004      	movs	r4, r0
 800bdd4:	000d      	movs	r5, r1
 800bdd6:	0002      	movs	r2, r0
 800bdd8:	000b      	movs	r3, r1
 800bdda:	9808      	ldr	r0, [sp, #32]
 800bddc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bdde:	f7f5 f9c1 	bl	8001164 <__aeabi_dadd>
 800bde2:	9a08      	ldr	r2, [sp, #32]
 800bde4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bde6:	0006      	movs	r6, r0
 800bde8:	000f      	movs	r7, r1
 800bdea:	f7f6 fbd7 	bl	800259c <__aeabi_dsub>
 800bdee:	0002      	movs	r2, r0
 800bdf0:	000b      	movs	r3, r1
 800bdf2:	0020      	movs	r0, r4
 800bdf4:	0029      	movs	r1, r5
 800bdf6:	f7f6 fbd1 	bl	800259c <__aeabi_dsub>
 800bdfa:	0032      	movs	r2, r6
 800bdfc:	9004      	str	r0, [sp, #16]
 800bdfe:	9105      	str	r1, [sp, #20]
 800be00:	003b      	movs	r3, r7
 800be02:	0030      	movs	r0, r6
 800be04:	0039      	movs	r1, r7
 800be06:	f7f6 f907 	bl	8002018 <__aeabi_dmul>
 800be0a:	0004      	movs	r4, r0
 800be0c:	000d      	movs	r5, r1
 800be0e:	4a54      	ldr	r2, [pc, #336]	; (800bf60 <__ieee754_pow+0x9e0>)
 800be10:	4b54      	ldr	r3, [pc, #336]	; (800bf64 <__ieee754_pow+0x9e4>)
 800be12:	f7f6 f901 	bl	8002018 <__aeabi_dmul>
 800be16:	4a54      	ldr	r2, [pc, #336]	; (800bf68 <__ieee754_pow+0x9e8>)
 800be18:	4b54      	ldr	r3, [pc, #336]	; (800bf6c <__ieee754_pow+0x9ec>)
 800be1a:	f7f6 fbbf 	bl	800259c <__aeabi_dsub>
 800be1e:	0022      	movs	r2, r4
 800be20:	002b      	movs	r3, r5
 800be22:	f7f6 f8f9 	bl	8002018 <__aeabi_dmul>
 800be26:	4a52      	ldr	r2, [pc, #328]	; (800bf70 <__ieee754_pow+0x9f0>)
 800be28:	4b52      	ldr	r3, [pc, #328]	; (800bf74 <__ieee754_pow+0x9f4>)
 800be2a:	f7f5 f99b 	bl	8001164 <__aeabi_dadd>
 800be2e:	0022      	movs	r2, r4
 800be30:	002b      	movs	r3, r5
 800be32:	f7f6 f8f1 	bl	8002018 <__aeabi_dmul>
 800be36:	4a50      	ldr	r2, [pc, #320]	; (800bf78 <__ieee754_pow+0x9f8>)
 800be38:	4b50      	ldr	r3, [pc, #320]	; (800bf7c <__ieee754_pow+0x9fc>)
 800be3a:	f7f6 fbaf 	bl	800259c <__aeabi_dsub>
 800be3e:	0022      	movs	r2, r4
 800be40:	002b      	movs	r3, r5
 800be42:	f7f6 f8e9 	bl	8002018 <__aeabi_dmul>
 800be46:	4a4e      	ldr	r2, [pc, #312]	; (800bf80 <__ieee754_pow+0xa00>)
 800be48:	4b4e      	ldr	r3, [pc, #312]	; (800bf84 <__ieee754_pow+0xa04>)
 800be4a:	f7f5 f98b 	bl	8001164 <__aeabi_dadd>
 800be4e:	0022      	movs	r2, r4
 800be50:	002b      	movs	r3, r5
 800be52:	f7f6 f8e1 	bl	8002018 <__aeabi_dmul>
 800be56:	0002      	movs	r2, r0
 800be58:	000b      	movs	r3, r1
 800be5a:	0030      	movs	r0, r6
 800be5c:	0039      	movs	r1, r7
 800be5e:	f7f6 fb9d 	bl	800259c <__aeabi_dsub>
 800be62:	0004      	movs	r4, r0
 800be64:	000d      	movs	r5, r1
 800be66:	0002      	movs	r2, r0
 800be68:	000b      	movs	r3, r1
 800be6a:	0030      	movs	r0, r6
 800be6c:	0039      	movs	r1, r7
 800be6e:	f7f6 f8d3 	bl	8002018 <__aeabi_dmul>
 800be72:	2380      	movs	r3, #128	; 0x80
 800be74:	9006      	str	r0, [sp, #24]
 800be76:	9107      	str	r1, [sp, #28]
 800be78:	2200      	movs	r2, #0
 800be7a:	0020      	movs	r0, r4
 800be7c:	0029      	movs	r1, r5
 800be7e:	05db      	lsls	r3, r3, #23
 800be80:	f7f6 fb8c 	bl	800259c <__aeabi_dsub>
 800be84:	0002      	movs	r2, r0
 800be86:	000b      	movs	r3, r1
 800be88:	9806      	ldr	r0, [sp, #24]
 800be8a:	9907      	ldr	r1, [sp, #28]
 800be8c:	f7f5 fcca 	bl	8001824 <__aeabi_ddiv>
 800be90:	9a04      	ldr	r2, [sp, #16]
 800be92:	9b05      	ldr	r3, [sp, #20]
 800be94:	0004      	movs	r4, r0
 800be96:	000d      	movs	r5, r1
 800be98:	0030      	movs	r0, r6
 800be9a:	0039      	movs	r1, r7
 800be9c:	f7f6 f8bc 	bl	8002018 <__aeabi_dmul>
 800bea0:	9a04      	ldr	r2, [sp, #16]
 800bea2:	9b05      	ldr	r3, [sp, #20]
 800bea4:	f7f5 f95e 	bl	8001164 <__aeabi_dadd>
 800bea8:	0002      	movs	r2, r0
 800beaa:	000b      	movs	r3, r1
 800beac:	0020      	movs	r0, r4
 800beae:	0029      	movs	r1, r5
 800beb0:	f7f6 fb74 	bl	800259c <__aeabi_dsub>
 800beb4:	0032      	movs	r2, r6
 800beb6:	003b      	movs	r3, r7
 800beb8:	f7f6 fb70 	bl	800259c <__aeabi_dsub>
 800bebc:	0002      	movs	r2, r0
 800bebe:	000b      	movs	r3, r1
 800bec0:	2000      	movs	r0, #0
 800bec2:	4931      	ldr	r1, [pc, #196]	; (800bf88 <__ieee754_pow+0xa08>)
 800bec4:	f7f6 fb6a 	bl	800259c <__aeabi_dsub>
 800bec8:	9b02      	ldr	r3, [sp, #8]
 800beca:	051b      	lsls	r3, r3, #20
 800becc:	185b      	adds	r3, r3, r1
 800bece:	151a      	asrs	r2, r3, #20
 800bed0:	2a00      	cmp	r2, #0
 800bed2:	dc25      	bgt.n	800bf20 <__ieee754_pow+0x9a0>
 800bed4:	9a02      	ldr	r2, [sp, #8]
 800bed6:	f000 f861 	bl	800bf9c <scalbn>
 800beda:	9a00      	ldr	r2, [sp, #0]
 800bedc:	9b01      	ldr	r3, [sp, #4]
 800bede:	f7ff fc33 	bl	800b748 <__ieee754_pow+0x1c8>
 800bee2:	4a2a      	ldr	r2, [pc, #168]	; (800bf8c <__ieee754_pow+0xa0c>)
 800bee4:	004b      	lsls	r3, r1, #1
 800bee6:	085b      	lsrs	r3, r3, #1
 800bee8:	4293      	cmp	r3, r2
 800beea:	dc00      	bgt.n	800beee <__ieee754_pow+0x96e>
 800beec:	e717      	b.n	800bd1e <__ieee754_pow+0x79e>
 800beee:	4b28      	ldr	r3, [pc, #160]	; (800bf90 <__ieee754_pow+0xa10>)
 800bef0:	18cb      	adds	r3, r1, r3
 800bef2:	4303      	orrs	r3, r0
 800bef4:	d008      	beq.n	800bf08 <__ieee754_pow+0x988>
 800bef6:	9800      	ldr	r0, [sp, #0]
 800bef8:	9901      	ldr	r1, [sp, #4]
 800befa:	2300      	movs	r3, #0
 800befc:	2200      	movs	r2, #0
 800befe:	f7f4 faab 	bl	8000458 <__aeabi_dcmplt>
 800bf02:	1e43      	subs	r3, r0, #1
 800bf04:	4198      	sbcs	r0, r3
 800bf06:	e462      	b.n	800b7ce <__ieee754_pow+0x24e>
 800bf08:	9a04      	ldr	r2, [sp, #16]
 800bf0a:	9b05      	ldr	r3, [sp, #20]
 800bf0c:	f7f6 fb46 	bl	800259c <__aeabi_dsub>
 800bf10:	0032      	movs	r2, r6
 800bf12:	003b      	movs	r3, r7
 800bf14:	f7f4 fabe 	bl	8000494 <__aeabi_dcmpge>
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	d100      	bne.n	800bf1e <__ieee754_pow+0x99e>
 800bf1c:	e6ff      	b.n	800bd1e <__ieee754_pow+0x79e>
 800bf1e:	e7ea      	b.n	800bef6 <__ieee754_pow+0x976>
 800bf20:	0019      	movs	r1, r3
 800bf22:	e7da      	b.n	800beda <__ieee754_pow+0x95a>
 800bf24:	2300      	movs	r3, #0
 800bf26:	4c18      	ldr	r4, [pc, #96]	; (800bf88 <__ieee754_pow+0xa08>)
 800bf28:	f7ff fbf1 	bl	800b70e <__ieee754_pow+0x18e>
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	2400      	movs	r4, #0
 800bf30:	f7ff fbed 	bl	800b70e <__ieee754_pow+0x18e>
 800bf34:	652b82fe 	.word	0x652b82fe
 800bf38:	3c971547 	.word	0x3c971547
 800bf3c:	3fe00000 	.word	0x3fe00000
 800bf40:	fffffc02 	.word	0xfffffc02
 800bf44:	fffffc01 	.word	0xfffffc01
 800bf48:	fff00000 	.word	0xfff00000
 800bf4c:	3fe62e43 	.word	0x3fe62e43
 800bf50:	fefa39ef 	.word	0xfefa39ef
 800bf54:	3fe62e42 	.word	0x3fe62e42
 800bf58:	0ca86c39 	.word	0x0ca86c39
 800bf5c:	be205c61 	.word	0xbe205c61
 800bf60:	72bea4d0 	.word	0x72bea4d0
 800bf64:	3e663769 	.word	0x3e663769
 800bf68:	c5d26bf1 	.word	0xc5d26bf1
 800bf6c:	3ebbbd41 	.word	0x3ebbbd41
 800bf70:	af25de2c 	.word	0xaf25de2c
 800bf74:	3f11566a 	.word	0x3f11566a
 800bf78:	16bebd93 	.word	0x16bebd93
 800bf7c:	3f66c16c 	.word	0x3f66c16c
 800bf80:	5555553e 	.word	0x5555553e
 800bf84:	3fc55555 	.word	0x3fc55555
 800bf88:	3ff00000 	.word	0x3ff00000
 800bf8c:	4090cbff 	.word	0x4090cbff
 800bf90:	3f6f3400 	.word	0x3f6f3400

0800bf94 <fabs>:
 800bf94:	0049      	lsls	r1, r1, #1
 800bf96:	084b      	lsrs	r3, r1, #1
 800bf98:	0019      	movs	r1, r3
 800bf9a:	4770      	bx	lr

0800bf9c <scalbn>:
 800bf9c:	b570      	push	{r4, r5, r6, lr}
 800bf9e:	0014      	movs	r4, r2
 800bfa0:	004a      	lsls	r2, r1, #1
 800bfa2:	000b      	movs	r3, r1
 800bfa4:	0d52      	lsrs	r2, r2, #21
 800bfa6:	d10f      	bne.n	800bfc8 <scalbn+0x2c>
 800bfa8:	004b      	lsls	r3, r1, #1
 800bfaa:	085b      	lsrs	r3, r3, #1
 800bfac:	4303      	orrs	r3, r0
 800bfae:	d011      	beq.n	800bfd4 <scalbn+0x38>
 800bfb0:	4b22      	ldr	r3, [pc, #136]	; (800c03c <scalbn+0xa0>)
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f7f6 f830 	bl	8002018 <__aeabi_dmul>
 800bfb8:	4b21      	ldr	r3, [pc, #132]	; (800c040 <scalbn+0xa4>)
 800bfba:	429c      	cmp	r4, r3
 800bfbc:	da0b      	bge.n	800bfd6 <scalbn+0x3a>
 800bfbe:	4a21      	ldr	r2, [pc, #132]	; (800c044 <scalbn+0xa8>)
 800bfc0:	4b21      	ldr	r3, [pc, #132]	; (800c048 <scalbn+0xac>)
 800bfc2:	f7f6 f829 	bl	8002018 <__aeabi_dmul>
 800bfc6:	e005      	b.n	800bfd4 <scalbn+0x38>
 800bfc8:	4d20      	ldr	r5, [pc, #128]	; (800c04c <scalbn+0xb0>)
 800bfca:	42aa      	cmp	r2, r5
 800bfcc:	d107      	bne.n	800bfde <scalbn+0x42>
 800bfce:	0002      	movs	r2, r0
 800bfd0:	f7f5 f8c8 	bl	8001164 <__aeabi_dadd>
 800bfd4:	bd70      	pop	{r4, r5, r6, pc}
 800bfd6:	000b      	movs	r3, r1
 800bfd8:	004a      	lsls	r2, r1, #1
 800bfda:	0d52      	lsrs	r2, r2, #21
 800bfdc:	3a36      	subs	r2, #54	; 0x36
 800bfde:	4d1c      	ldr	r5, [pc, #112]	; (800c050 <scalbn+0xb4>)
 800bfe0:	42ac      	cmp	r4, r5
 800bfe2:	dd0a      	ble.n	800bffa <scalbn+0x5e>
 800bfe4:	4c1b      	ldr	r4, [pc, #108]	; (800c054 <scalbn+0xb8>)
 800bfe6:	4d1c      	ldr	r5, [pc, #112]	; (800c058 <scalbn+0xbc>)
 800bfe8:	2900      	cmp	r1, #0
 800bfea:	da01      	bge.n	800bff0 <scalbn+0x54>
 800bfec:	4c19      	ldr	r4, [pc, #100]	; (800c054 <scalbn+0xb8>)
 800bfee:	4d1b      	ldr	r5, [pc, #108]	; (800c05c <scalbn+0xc0>)
 800bff0:	4a18      	ldr	r2, [pc, #96]	; (800c054 <scalbn+0xb8>)
 800bff2:	4b19      	ldr	r3, [pc, #100]	; (800c058 <scalbn+0xbc>)
 800bff4:	0020      	movs	r0, r4
 800bff6:	0029      	movs	r1, r5
 800bff8:	e7e3      	b.n	800bfc2 <scalbn+0x26>
 800bffa:	18a2      	adds	r2, r4, r2
 800bffc:	4c18      	ldr	r4, [pc, #96]	; (800c060 <scalbn+0xc4>)
 800bffe:	42a2      	cmp	r2, r4
 800c000:	dcf0      	bgt.n	800bfe4 <scalbn+0x48>
 800c002:	2a00      	cmp	r2, #0
 800c004:	dd05      	ble.n	800c012 <scalbn+0x76>
 800c006:	4c17      	ldr	r4, [pc, #92]	; (800c064 <scalbn+0xc8>)
 800c008:	0512      	lsls	r2, r2, #20
 800c00a:	4023      	ands	r3, r4
 800c00c:	4313      	orrs	r3, r2
 800c00e:	0019      	movs	r1, r3
 800c010:	e7e0      	b.n	800bfd4 <scalbn+0x38>
 800c012:	0014      	movs	r4, r2
 800c014:	3435      	adds	r4, #53	; 0x35
 800c016:	da08      	bge.n	800c02a <scalbn+0x8e>
 800c018:	4c0a      	ldr	r4, [pc, #40]	; (800c044 <scalbn+0xa8>)
 800c01a:	4d0b      	ldr	r5, [pc, #44]	; (800c048 <scalbn+0xac>)
 800c01c:	2900      	cmp	r1, #0
 800c01e:	da01      	bge.n	800c024 <scalbn+0x88>
 800c020:	4c08      	ldr	r4, [pc, #32]	; (800c044 <scalbn+0xa8>)
 800c022:	4d11      	ldr	r5, [pc, #68]	; (800c068 <scalbn+0xcc>)
 800c024:	4a07      	ldr	r2, [pc, #28]	; (800c044 <scalbn+0xa8>)
 800c026:	4b08      	ldr	r3, [pc, #32]	; (800c048 <scalbn+0xac>)
 800c028:	e7e4      	b.n	800bff4 <scalbn+0x58>
 800c02a:	4c0e      	ldr	r4, [pc, #56]	; (800c064 <scalbn+0xc8>)
 800c02c:	3236      	adds	r2, #54	; 0x36
 800c02e:	4023      	ands	r3, r4
 800c030:	0512      	lsls	r2, r2, #20
 800c032:	431a      	orrs	r2, r3
 800c034:	0011      	movs	r1, r2
 800c036:	4b0d      	ldr	r3, [pc, #52]	; (800c06c <scalbn+0xd0>)
 800c038:	2200      	movs	r2, #0
 800c03a:	e7c2      	b.n	800bfc2 <scalbn+0x26>
 800c03c:	43500000 	.word	0x43500000
 800c040:	ffff3cb0 	.word	0xffff3cb0
 800c044:	c2f8f359 	.word	0xc2f8f359
 800c048:	01a56e1f 	.word	0x01a56e1f
 800c04c:	000007ff 	.word	0x000007ff
 800c050:	0000c350 	.word	0x0000c350
 800c054:	8800759c 	.word	0x8800759c
 800c058:	7e37e43c 	.word	0x7e37e43c
 800c05c:	fe37e43c 	.word	0xfe37e43c
 800c060:	000007fe 	.word	0x000007fe
 800c064:	800fffff 	.word	0x800fffff
 800c068:	81a56e1f 	.word	0x81a56e1f
 800c06c:	3c900000 	.word	0x3c900000

0800c070 <with_errno>:
 800c070:	b570      	push	{r4, r5, r6, lr}
 800c072:	000d      	movs	r5, r1
 800c074:	0016      	movs	r6, r2
 800c076:	0004      	movs	r4, r0
 800c078:	f7fc ff08 	bl	8008e8c <__errno>
 800c07c:	0029      	movs	r1, r5
 800c07e:	6006      	str	r6, [r0, #0]
 800c080:	0020      	movs	r0, r4
 800c082:	bd70      	pop	{r4, r5, r6, pc}

0800c084 <xflow>:
 800c084:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c086:	0015      	movs	r5, r2
 800c088:	001c      	movs	r4, r3
 800c08a:	2800      	cmp	r0, #0
 800c08c:	d010      	beq.n	800c0b0 <xflow+0x2c>
 800c08e:	2380      	movs	r3, #128	; 0x80
 800c090:	0010      	movs	r0, r2
 800c092:	061b      	lsls	r3, r3, #24
 800c094:	18e1      	adds	r1, r4, r3
 800c096:	9000      	str	r0, [sp, #0]
 800c098:	9101      	str	r1, [sp, #4]
 800c09a:	9a00      	ldr	r2, [sp, #0]
 800c09c:	9b01      	ldr	r3, [sp, #4]
 800c09e:	0028      	movs	r0, r5
 800c0a0:	0021      	movs	r1, r4
 800c0a2:	f7f5 ffb9 	bl	8002018 <__aeabi_dmul>
 800c0a6:	2222      	movs	r2, #34	; 0x22
 800c0a8:	f7ff ffe2 	bl	800c070 <with_errno>
 800c0ac:	b003      	add	sp, #12
 800c0ae:	bd30      	pop	{r4, r5, pc}
 800c0b0:	0010      	movs	r0, r2
 800c0b2:	0019      	movs	r1, r3
 800c0b4:	e7ef      	b.n	800c096 <xflow+0x12>

0800c0b6 <__math_uflow>:
 800c0b6:	2380      	movs	r3, #128	; 0x80
 800c0b8:	b510      	push	{r4, lr}
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	055b      	lsls	r3, r3, #21
 800c0be:	f7ff ffe1 	bl	800c084 <xflow>
 800c0c2:	bd10      	pop	{r4, pc}

0800c0c4 <__math_oflow>:
 800c0c4:	23e0      	movs	r3, #224	; 0xe0
 800c0c6:	b510      	push	{r4, lr}
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	05db      	lsls	r3, r3, #23
 800c0cc:	f7ff ffda 	bl	800c084 <xflow>
 800c0d0:	bd10      	pop	{r4, pc}
	...

0800c0d4 <__ieee754_log>:
 800c0d4:	2280      	movs	r2, #128	; 0x80
 800c0d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0d8:	000b      	movs	r3, r1
 800c0da:	b08d      	sub	sp, #52	; 0x34
 800c0dc:	0352      	lsls	r2, r2, #13
 800c0de:	4291      	cmp	r1, r2
 800c0e0:	da22      	bge.n	800c128 <__ieee754_log+0x54>
 800c0e2:	004a      	lsls	r2, r1, #1
 800c0e4:	0852      	lsrs	r2, r2, #1
 800c0e6:	4302      	orrs	r2, r0
 800c0e8:	d107      	bne.n	800c0fa <__ieee754_log+0x26>
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	2000      	movs	r0, #0
 800c0f0:	49b3      	ldr	r1, [pc, #716]	; (800c3c0 <__ieee754_log+0x2ec>)
 800c0f2:	f7f5 fb97 	bl	8001824 <__aeabi_ddiv>
 800c0f6:	b00d      	add	sp, #52	; 0x34
 800c0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0fa:	2900      	cmp	r1, #0
 800c0fc:	da05      	bge.n	800c10a <__ieee754_log+0x36>
 800c0fe:	0002      	movs	r2, r0
 800c100:	f7f6 fa4c 	bl	800259c <__aeabi_dsub>
 800c104:	2200      	movs	r2, #0
 800c106:	2300      	movs	r3, #0
 800c108:	e7f3      	b.n	800c0f2 <__ieee754_log+0x1e>
 800c10a:	4bae      	ldr	r3, [pc, #696]	; (800c3c4 <__ieee754_log+0x2f0>)
 800c10c:	2200      	movs	r2, #0
 800c10e:	f7f5 ff83 	bl	8002018 <__aeabi_dmul>
 800c112:	2436      	movs	r4, #54	; 0x36
 800c114:	000b      	movs	r3, r1
 800c116:	4264      	negs	r4, r4
 800c118:	4aab      	ldr	r2, [pc, #684]	; (800c3c8 <__ieee754_log+0x2f4>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	dd06      	ble.n	800c12c <__ieee754_log+0x58>
 800c11e:	0002      	movs	r2, r0
 800c120:	000b      	movs	r3, r1
 800c122:	f7f5 f81f 	bl	8001164 <__aeabi_dadd>
 800c126:	e7e6      	b.n	800c0f6 <__ieee754_log+0x22>
 800c128:	2400      	movs	r4, #0
 800c12a:	e7f5      	b.n	800c118 <__ieee754_log+0x44>
 800c12c:	4da7      	ldr	r5, [pc, #668]	; (800c3cc <__ieee754_log+0x2f8>)
 800c12e:	151a      	asrs	r2, r3, #20
 800c130:	1952      	adds	r2, r2, r5
 800c132:	1912      	adds	r2, r2, r4
 800c134:	031b      	lsls	r3, r3, #12
 800c136:	4ca6      	ldr	r4, [pc, #664]	; (800c3d0 <__ieee754_log+0x2fc>)
 800c138:	0b1b      	lsrs	r3, r3, #12
 800c13a:	9302      	str	r3, [sp, #8]
 800c13c:	191b      	adds	r3, r3, r4
 800c13e:	2480      	movs	r4, #128	; 0x80
 800c140:	0364      	lsls	r4, r4, #13
 800c142:	4023      	ands	r3, r4
 800c144:	4ca3      	ldr	r4, [pc, #652]	; (800c3d4 <__ieee754_log+0x300>)
 800c146:	9d02      	ldr	r5, [sp, #8]
 800c148:	405c      	eors	r4, r3
 800c14a:	151b      	asrs	r3, r3, #20
 800c14c:	189b      	adds	r3, r3, r2
 800c14e:	4325      	orrs	r5, r4
 800c150:	2200      	movs	r2, #0
 800c152:	9300      	str	r3, [sp, #0]
 800c154:	0029      	movs	r1, r5
 800c156:	4b9f      	ldr	r3, [pc, #636]	; (800c3d4 <__ieee754_log+0x300>)
 800c158:	f7f6 fa20 	bl	800259c <__aeabi_dsub>
 800c15c:	9b02      	ldr	r3, [sp, #8]
 800c15e:	0006      	movs	r6, r0
 800c160:	3302      	adds	r3, #2
 800c162:	031b      	lsls	r3, r3, #12
 800c164:	000f      	movs	r7, r1
 800c166:	2200      	movs	r2, #0
 800c168:	0b1b      	lsrs	r3, r3, #12
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	dc64      	bgt.n	800c238 <__ieee754_log+0x164>
 800c16e:	2300      	movs	r3, #0
 800c170:	f7f4 f96c 	bl	800044c <__aeabi_dcmpeq>
 800c174:	2800      	cmp	r0, #0
 800c176:	d019      	beq.n	800c1ac <__ieee754_log+0xd8>
 800c178:	9b00      	ldr	r3, [sp, #0]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d100      	bne.n	800c180 <__ieee754_log+0xac>
 800c17e:	e11c      	b.n	800c3ba <__ieee754_log+0x2e6>
 800c180:	0018      	movs	r0, r3
 800c182:	f7f6 fde1 	bl	8002d48 <__aeabi_i2d>
 800c186:	4a94      	ldr	r2, [pc, #592]	; (800c3d8 <__ieee754_log+0x304>)
 800c188:	4b94      	ldr	r3, [pc, #592]	; (800c3dc <__ieee754_log+0x308>)
 800c18a:	0004      	movs	r4, r0
 800c18c:	000d      	movs	r5, r1
 800c18e:	f7f5 ff43 	bl	8002018 <__aeabi_dmul>
 800c192:	4a93      	ldr	r2, [pc, #588]	; (800c3e0 <__ieee754_log+0x30c>)
 800c194:	0006      	movs	r6, r0
 800c196:	000f      	movs	r7, r1
 800c198:	4b92      	ldr	r3, [pc, #584]	; (800c3e4 <__ieee754_log+0x310>)
 800c19a:	0020      	movs	r0, r4
 800c19c:	0029      	movs	r1, r5
 800c19e:	f7f5 ff3b 	bl	8002018 <__aeabi_dmul>
 800c1a2:	0002      	movs	r2, r0
 800c1a4:	000b      	movs	r3, r1
 800c1a6:	0030      	movs	r0, r6
 800c1a8:	0039      	movs	r1, r7
 800c1aa:	e7ba      	b.n	800c122 <__ieee754_log+0x4e>
 800c1ac:	4a8e      	ldr	r2, [pc, #568]	; (800c3e8 <__ieee754_log+0x314>)
 800c1ae:	4b8f      	ldr	r3, [pc, #572]	; (800c3ec <__ieee754_log+0x318>)
 800c1b0:	0030      	movs	r0, r6
 800c1b2:	0039      	movs	r1, r7
 800c1b4:	f7f5 ff30 	bl	8002018 <__aeabi_dmul>
 800c1b8:	0002      	movs	r2, r0
 800c1ba:	000b      	movs	r3, r1
 800c1bc:	2000      	movs	r0, #0
 800c1be:	498c      	ldr	r1, [pc, #560]	; (800c3f0 <__ieee754_log+0x31c>)
 800c1c0:	f7f6 f9ec 	bl	800259c <__aeabi_dsub>
 800c1c4:	0032      	movs	r2, r6
 800c1c6:	0004      	movs	r4, r0
 800c1c8:	000d      	movs	r5, r1
 800c1ca:	003b      	movs	r3, r7
 800c1cc:	0030      	movs	r0, r6
 800c1ce:	0039      	movs	r1, r7
 800c1d0:	f7f5 ff22 	bl	8002018 <__aeabi_dmul>
 800c1d4:	000b      	movs	r3, r1
 800c1d6:	0002      	movs	r2, r0
 800c1d8:	0029      	movs	r1, r5
 800c1da:	0020      	movs	r0, r4
 800c1dc:	f7f5 ff1c 	bl	8002018 <__aeabi_dmul>
 800c1e0:	9b00      	ldr	r3, [sp, #0]
 800c1e2:	9002      	str	r0, [sp, #8]
 800c1e4:	9103      	str	r1, [sp, #12]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d106      	bne.n	800c1f8 <__ieee754_log+0x124>
 800c1ea:	0002      	movs	r2, r0
 800c1ec:	000b      	movs	r3, r1
 800c1ee:	0030      	movs	r0, r6
 800c1f0:	0039      	movs	r1, r7
 800c1f2:	f7f6 f9d3 	bl	800259c <__aeabi_dsub>
 800c1f6:	e77e      	b.n	800c0f6 <__ieee754_log+0x22>
 800c1f8:	9800      	ldr	r0, [sp, #0]
 800c1fa:	f7f6 fda5 	bl	8002d48 <__aeabi_i2d>
 800c1fe:	4a76      	ldr	r2, [pc, #472]	; (800c3d8 <__ieee754_log+0x304>)
 800c200:	4b76      	ldr	r3, [pc, #472]	; (800c3dc <__ieee754_log+0x308>)
 800c202:	0004      	movs	r4, r0
 800c204:	000d      	movs	r5, r1
 800c206:	f7f5 ff07 	bl	8002018 <__aeabi_dmul>
 800c20a:	4a75      	ldr	r2, [pc, #468]	; (800c3e0 <__ieee754_log+0x30c>)
 800c20c:	9000      	str	r0, [sp, #0]
 800c20e:	9101      	str	r1, [sp, #4]
 800c210:	4b74      	ldr	r3, [pc, #464]	; (800c3e4 <__ieee754_log+0x310>)
 800c212:	0020      	movs	r0, r4
 800c214:	0029      	movs	r1, r5
 800c216:	f7f5 feff 	bl	8002018 <__aeabi_dmul>
 800c21a:	0002      	movs	r2, r0
 800c21c:	000b      	movs	r3, r1
 800c21e:	9802      	ldr	r0, [sp, #8]
 800c220:	9903      	ldr	r1, [sp, #12]
 800c222:	f7f6 f9bb 	bl	800259c <__aeabi_dsub>
 800c226:	0032      	movs	r2, r6
 800c228:	003b      	movs	r3, r7
 800c22a:	f7f6 f9b7 	bl	800259c <__aeabi_dsub>
 800c22e:	0002      	movs	r2, r0
 800c230:	000b      	movs	r3, r1
 800c232:	9800      	ldr	r0, [sp, #0]
 800c234:	9901      	ldr	r1, [sp, #4]
 800c236:	e7dc      	b.n	800c1f2 <__ieee754_log+0x11e>
 800c238:	2380      	movs	r3, #128	; 0x80
 800c23a:	05db      	lsls	r3, r3, #23
 800c23c:	f7f4 ff92 	bl	8001164 <__aeabi_dadd>
 800c240:	0002      	movs	r2, r0
 800c242:	000b      	movs	r3, r1
 800c244:	0030      	movs	r0, r6
 800c246:	0039      	movs	r1, r7
 800c248:	f7f5 faec 	bl	8001824 <__aeabi_ddiv>
 800c24c:	9004      	str	r0, [sp, #16]
 800c24e:	9105      	str	r1, [sp, #20]
 800c250:	9800      	ldr	r0, [sp, #0]
 800c252:	f7f6 fd79 	bl	8002d48 <__aeabi_i2d>
 800c256:	9a04      	ldr	r2, [sp, #16]
 800c258:	9b05      	ldr	r3, [sp, #20]
 800c25a:	9006      	str	r0, [sp, #24]
 800c25c:	9107      	str	r1, [sp, #28]
 800c25e:	0010      	movs	r0, r2
 800c260:	0019      	movs	r1, r3
 800c262:	f7f5 fed9 	bl	8002018 <__aeabi_dmul>
 800c266:	4a63      	ldr	r2, [pc, #396]	; (800c3f4 <__ieee754_log+0x320>)
 800c268:	9b02      	ldr	r3, [sp, #8]
 800c26a:	4694      	mov	ip, r2
 800c26c:	4463      	add	r3, ip
 800c26e:	0002      	movs	r2, r0
 800c270:	930b      	str	r3, [sp, #44]	; 0x2c
 800c272:	000b      	movs	r3, r1
 800c274:	9008      	str	r0, [sp, #32]
 800c276:	9109      	str	r1, [sp, #36]	; 0x24
 800c278:	f7f5 fece 	bl	8002018 <__aeabi_dmul>
 800c27c:	0004      	movs	r4, r0
 800c27e:	000d      	movs	r5, r1
 800c280:	4a5d      	ldr	r2, [pc, #372]	; (800c3f8 <__ieee754_log+0x324>)
 800c282:	4b5e      	ldr	r3, [pc, #376]	; (800c3fc <__ieee754_log+0x328>)
 800c284:	f7f5 fec8 	bl	8002018 <__aeabi_dmul>
 800c288:	4a5d      	ldr	r2, [pc, #372]	; (800c400 <__ieee754_log+0x32c>)
 800c28a:	4b5e      	ldr	r3, [pc, #376]	; (800c404 <__ieee754_log+0x330>)
 800c28c:	f7f4 ff6a 	bl	8001164 <__aeabi_dadd>
 800c290:	0022      	movs	r2, r4
 800c292:	002b      	movs	r3, r5
 800c294:	f7f5 fec0 	bl	8002018 <__aeabi_dmul>
 800c298:	4a5b      	ldr	r2, [pc, #364]	; (800c408 <__ieee754_log+0x334>)
 800c29a:	4b5c      	ldr	r3, [pc, #368]	; (800c40c <__ieee754_log+0x338>)
 800c29c:	f7f4 ff62 	bl	8001164 <__aeabi_dadd>
 800c2a0:	0022      	movs	r2, r4
 800c2a2:	002b      	movs	r3, r5
 800c2a4:	f7f5 feb8 	bl	8002018 <__aeabi_dmul>
 800c2a8:	4a59      	ldr	r2, [pc, #356]	; (800c410 <__ieee754_log+0x33c>)
 800c2aa:	4b5a      	ldr	r3, [pc, #360]	; (800c414 <__ieee754_log+0x340>)
 800c2ac:	f7f4 ff5a 	bl	8001164 <__aeabi_dadd>
 800c2b0:	9a08      	ldr	r2, [sp, #32]
 800c2b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2b4:	f7f5 feb0 	bl	8002018 <__aeabi_dmul>
 800c2b8:	4a57      	ldr	r2, [pc, #348]	; (800c418 <__ieee754_log+0x344>)
 800c2ba:	9008      	str	r0, [sp, #32]
 800c2bc:	9109      	str	r1, [sp, #36]	; 0x24
 800c2be:	4b57      	ldr	r3, [pc, #348]	; (800c41c <__ieee754_log+0x348>)
 800c2c0:	0020      	movs	r0, r4
 800c2c2:	0029      	movs	r1, r5
 800c2c4:	f7f5 fea8 	bl	8002018 <__aeabi_dmul>
 800c2c8:	4a55      	ldr	r2, [pc, #340]	; (800c420 <__ieee754_log+0x34c>)
 800c2ca:	4b56      	ldr	r3, [pc, #344]	; (800c424 <__ieee754_log+0x350>)
 800c2cc:	f7f4 ff4a 	bl	8001164 <__aeabi_dadd>
 800c2d0:	0022      	movs	r2, r4
 800c2d2:	002b      	movs	r3, r5
 800c2d4:	f7f5 fea0 	bl	8002018 <__aeabi_dmul>
 800c2d8:	4a53      	ldr	r2, [pc, #332]	; (800c428 <__ieee754_log+0x354>)
 800c2da:	4b54      	ldr	r3, [pc, #336]	; (800c42c <__ieee754_log+0x358>)
 800c2dc:	f7f4 ff42 	bl	8001164 <__aeabi_dadd>
 800c2e0:	0022      	movs	r2, r4
 800c2e2:	002b      	movs	r3, r5
 800c2e4:	f7f5 fe98 	bl	8002018 <__aeabi_dmul>
 800c2e8:	0002      	movs	r2, r0
 800c2ea:	000b      	movs	r3, r1
 800c2ec:	9808      	ldr	r0, [sp, #32]
 800c2ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2f0:	f7f4 ff38 	bl	8001164 <__aeabi_dadd>
 800c2f4:	9a02      	ldr	r2, [sp, #8]
 800c2f6:	4b4e      	ldr	r3, [pc, #312]	; (800c430 <__ieee754_log+0x35c>)
 800c2f8:	0004      	movs	r4, r0
 800c2fa:	1a9b      	subs	r3, r3, r2
 800c2fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c2fe:	000d      	movs	r5, r1
 800c300:	4313      	orrs	r3, r2
 800c302:	2b00      	cmp	r3, #0
 800c304:	dd34      	ble.n	800c370 <__ieee754_log+0x29c>
 800c306:	2200      	movs	r2, #0
 800c308:	4b39      	ldr	r3, [pc, #228]	; (800c3f0 <__ieee754_log+0x31c>)
 800c30a:	0030      	movs	r0, r6
 800c30c:	0039      	movs	r1, r7
 800c30e:	f7f5 fe83 	bl	8002018 <__aeabi_dmul>
 800c312:	0032      	movs	r2, r6
 800c314:	003b      	movs	r3, r7
 800c316:	f7f5 fe7f 	bl	8002018 <__aeabi_dmul>
 800c31a:	0002      	movs	r2, r0
 800c31c:	000b      	movs	r3, r1
 800c31e:	9002      	str	r0, [sp, #8]
 800c320:	9103      	str	r1, [sp, #12]
 800c322:	0020      	movs	r0, r4
 800c324:	0029      	movs	r1, r5
 800c326:	f7f4 ff1d 	bl	8001164 <__aeabi_dadd>
 800c32a:	9a04      	ldr	r2, [sp, #16]
 800c32c:	9b05      	ldr	r3, [sp, #20]
 800c32e:	f7f5 fe73 	bl	8002018 <__aeabi_dmul>
 800c332:	9b00      	ldr	r3, [sp, #0]
 800c334:	0004      	movs	r4, r0
 800c336:	000d      	movs	r5, r1
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d106      	bne.n	800c34a <__ieee754_log+0x276>
 800c33c:	0002      	movs	r2, r0
 800c33e:	000b      	movs	r3, r1
 800c340:	9802      	ldr	r0, [sp, #8]
 800c342:	9903      	ldr	r1, [sp, #12]
 800c344:	f7f6 f92a 	bl	800259c <__aeabi_dsub>
 800c348:	e74f      	b.n	800c1ea <__ieee754_log+0x116>
 800c34a:	4a23      	ldr	r2, [pc, #140]	; (800c3d8 <__ieee754_log+0x304>)
 800c34c:	4b23      	ldr	r3, [pc, #140]	; (800c3dc <__ieee754_log+0x308>)
 800c34e:	9806      	ldr	r0, [sp, #24]
 800c350:	9907      	ldr	r1, [sp, #28]
 800c352:	f7f5 fe61 	bl	8002018 <__aeabi_dmul>
 800c356:	4a22      	ldr	r2, [pc, #136]	; (800c3e0 <__ieee754_log+0x30c>)
 800c358:	9000      	str	r0, [sp, #0]
 800c35a:	9101      	str	r1, [sp, #4]
 800c35c:	9806      	ldr	r0, [sp, #24]
 800c35e:	9907      	ldr	r1, [sp, #28]
 800c360:	4b20      	ldr	r3, [pc, #128]	; (800c3e4 <__ieee754_log+0x310>)
 800c362:	f7f5 fe59 	bl	8002018 <__aeabi_dmul>
 800c366:	0022      	movs	r2, r4
 800c368:	002b      	movs	r3, r5
 800c36a:	f7f4 fefb 	bl	8001164 <__aeabi_dadd>
 800c36e:	e754      	b.n	800c21a <__ieee754_log+0x146>
 800c370:	0002      	movs	r2, r0
 800c372:	000b      	movs	r3, r1
 800c374:	0030      	movs	r0, r6
 800c376:	0039      	movs	r1, r7
 800c378:	f7f6 f910 	bl	800259c <__aeabi_dsub>
 800c37c:	9a04      	ldr	r2, [sp, #16]
 800c37e:	9b05      	ldr	r3, [sp, #20]
 800c380:	f7f5 fe4a 	bl	8002018 <__aeabi_dmul>
 800c384:	9b00      	ldr	r3, [sp, #0]
 800c386:	0004      	movs	r4, r0
 800c388:	000d      	movs	r5, r1
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d102      	bne.n	800c394 <__ieee754_log+0x2c0>
 800c38e:	0002      	movs	r2, r0
 800c390:	000b      	movs	r3, r1
 800c392:	e72c      	b.n	800c1ee <__ieee754_log+0x11a>
 800c394:	4a10      	ldr	r2, [pc, #64]	; (800c3d8 <__ieee754_log+0x304>)
 800c396:	4b11      	ldr	r3, [pc, #68]	; (800c3dc <__ieee754_log+0x308>)
 800c398:	9806      	ldr	r0, [sp, #24]
 800c39a:	9907      	ldr	r1, [sp, #28]
 800c39c:	f7f5 fe3c 	bl	8002018 <__aeabi_dmul>
 800c3a0:	4a0f      	ldr	r2, [pc, #60]	; (800c3e0 <__ieee754_log+0x30c>)
 800c3a2:	9000      	str	r0, [sp, #0]
 800c3a4:	9101      	str	r1, [sp, #4]
 800c3a6:	9806      	ldr	r0, [sp, #24]
 800c3a8:	9907      	ldr	r1, [sp, #28]
 800c3aa:	4b0e      	ldr	r3, [pc, #56]	; (800c3e4 <__ieee754_log+0x310>)
 800c3ac:	f7f5 fe34 	bl	8002018 <__aeabi_dmul>
 800c3b0:	0002      	movs	r2, r0
 800c3b2:	000b      	movs	r3, r1
 800c3b4:	0020      	movs	r0, r4
 800c3b6:	0029      	movs	r1, r5
 800c3b8:	e733      	b.n	800c222 <__ieee754_log+0x14e>
 800c3ba:	2000      	movs	r0, #0
 800c3bc:	2100      	movs	r1, #0
 800c3be:	e69a      	b.n	800c0f6 <__ieee754_log+0x22>
 800c3c0:	c3500000 	.word	0xc3500000
 800c3c4:	43500000 	.word	0x43500000
 800c3c8:	7fefffff 	.word	0x7fefffff
 800c3cc:	fffffc01 	.word	0xfffffc01
 800c3d0:	00095f64 	.word	0x00095f64
 800c3d4:	3ff00000 	.word	0x3ff00000
 800c3d8:	fee00000 	.word	0xfee00000
 800c3dc:	3fe62e42 	.word	0x3fe62e42
 800c3e0:	35793c76 	.word	0x35793c76
 800c3e4:	3dea39ef 	.word	0x3dea39ef
 800c3e8:	55555555 	.word	0x55555555
 800c3ec:	3fd55555 	.word	0x3fd55555
 800c3f0:	3fe00000 	.word	0x3fe00000
 800c3f4:	fff9eb86 	.word	0xfff9eb86
 800c3f8:	df3e5244 	.word	0xdf3e5244
 800c3fc:	3fc2f112 	.word	0x3fc2f112
 800c400:	96cb03de 	.word	0x96cb03de
 800c404:	3fc74664 	.word	0x3fc74664
 800c408:	94229359 	.word	0x94229359
 800c40c:	3fd24924 	.word	0x3fd24924
 800c410:	55555593 	.word	0x55555593
 800c414:	3fe55555 	.word	0x3fe55555
 800c418:	d078c69f 	.word	0xd078c69f
 800c41c:	3fc39a09 	.word	0x3fc39a09
 800c420:	1d8e78af 	.word	0x1d8e78af
 800c424:	3fcc71c5 	.word	0x3fcc71c5
 800c428:	9997fa04 	.word	0x9997fa04
 800c42c:	3fd99999 	.word	0x3fd99999
 800c430:	0006b851 	.word	0x0006b851

0800c434 <_init>:
 800c434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c436:	46c0      	nop			; (mov r8, r8)
 800c438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c43a:	bc08      	pop	{r3}
 800c43c:	469e      	mov	lr, r3
 800c43e:	4770      	bx	lr

0800c440 <_fini>:
 800c440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c442:	46c0      	nop			; (mov r8, r8)
 800c444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c446:	bc08      	pop	{r3}
 800c448:	469e      	mov	lr, r3
 800c44a:	4770      	bx	lr
